circuit TestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 2:0]
  extmodule plusarg_reader : @[chipyard.TestHarness.SmallBoomConfig.fir 134:2]
    output out : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 135:4]
    defname = plusarg_reader
    parameter FORMAT = "tilelink_timeout=%d"
    parameter DEFAULT = 0
    parameter WIDTH = 32

  module Queue_5_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 34016:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 34017:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 34018:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    input io_enq_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    input io_enq_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    input io_enq_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    output io_deq_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    output io_deq_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    output io_deq_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    output io_deq_bits_sink : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    output io_deq_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    output io_deq_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 34019:4]

    mem ram_opcode : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 34021:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_param : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 34021:4]
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_size : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 34021:4]
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_source : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 34021:4]
      data-type => UInt<8>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_sink : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 34021:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_denied : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 34021:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_data : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 34021:4]
      data-type => UInt<64>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_corrupt : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 34021:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg value : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 34022:4]
    reg value_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value_1) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 34023:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 34024:4]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33 chipyard.TestHarness.SmallBoomConfig.fir 34025:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.SmallBoomConfig.fir 34026:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.SmallBoomConfig.fir 34027:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.SmallBoomConfig.fir 34028:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 34029:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 34032:4]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 34046:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 34047:6]
    node _GEN_12 = mux(do_enq, _value_T_1, value) @[Decoupled.scala 229:17 chipyard.TestHarness.SmallBoomConfig.fir 34035:4 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 34048:6 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 34022:4]
    node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 34052:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 34053:6]
    node _GEN_13 = mux(do_deq, _value_T_3, value_1) @[Decoupled.scala 233:17 chipyard.TestHarness.SmallBoomConfig.fir 34050:4 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 34054:6 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 34023:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.SmallBoomConfig.fir 34056:4]
    node _GEN_14 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.SmallBoomConfig.fir 34057:4 Decoupled.scala 237:16 chipyard.TestHarness.SmallBoomConfig.fir 34058:6 Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 34024:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.SmallBoomConfig.fir 34062:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.SmallBoomConfig.fir 34060:4]
    io_deq_bits_opcode <= ram_opcode.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 34072:4]
    io_deq_bits_param <= ram_param.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 34071:4]
    io_deq_bits_size <= ram_size.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 34070:4]
    io_deq_bits_source <= ram_source.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 34069:4]
    io_deq_bits_sink <= ram_sink.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 34068:4]
    io_deq_bits_denied <= ram_denied.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 34067:4]
    io_deq_bits_data <= ram_data.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 34066:4]
    io_deq_bits_corrupt <= ram_corrupt.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 34065:4]
    value <= mux(reset, UInt<1>("h0"), _GEN_12) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 34022:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 34022:4]
    value_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 34023:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 34023:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_14) @[Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 34024:4 Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 34024:4]
    ram_opcode.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_opcode.io_deq_bits_MPORT.addr <= value_1
    ram_opcode.io_deq_bits_MPORT.clk <= clock
    ram_opcode.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_opcode.MPORT.addr <= value
    ram_opcode.MPORT.mask <= UInt<1>("h1")
    ram_opcode.MPORT.data <= io_enq_bits_opcode
    ram_opcode.MPORT.clk <= clock
    ram_param.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_param.io_deq_bits_MPORT.addr <= value_1
    ram_param.io_deq_bits_MPORT.clk <= clock
    ram_param.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_param.MPORT.addr <= value
    ram_param.MPORT.mask <= UInt<1>("h1")
    ram_param.MPORT.data <= UInt<2>("h0")
    ram_param.MPORT.clk <= clock
    ram_size.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_size.io_deq_bits_MPORT.addr <= value_1
    ram_size.io_deq_bits_MPORT.clk <= clock
    ram_size.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_size.MPORT.addr <= value
    ram_size.MPORT.mask <= UInt<1>("h1")
    ram_size.MPORT.data <= io_enq_bits_size
    ram_size.MPORT.clk <= clock
    ram_source.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_source.io_deq_bits_MPORT.addr <= value_1
    ram_source.io_deq_bits_MPORT.clk <= clock
    ram_source.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_source.MPORT.addr <= value
    ram_source.MPORT.mask <= UInt<1>("h1")
    ram_source.MPORT.data <= io_enq_bits_source
    ram_source.MPORT.clk <= clock
    ram_sink.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_sink.io_deq_bits_MPORT.addr <= value_1
    ram_sink.io_deq_bits_MPORT.clk <= clock
    ram_sink.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_sink.MPORT.addr <= value
    ram_sink.MPORT.mask <= UInt<1>("h1")
    ram_sink.MPORT.data <= UInt<1>("h0")
    ram_sink.MPORT.clk <= clock
    ram_denied.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_denied.io_deq_bits_MPORT.addr <= value_1
    ram_denied.io_deq_bits_MPORT.clk <= clock
    ram_denied.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_denied.MPORT.addr <= value
    ram_denied.MPORT.mask <= UInt<1>("h1")
    ram_denied.MPORT.data <= UInt<1>("h0")
    ram_denied.MPORT.clk <= clock
    ram_data.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_data.io_deq_bits_MPORT.addr <= value_1
    ram_data.io_deq_bits_MPORT.clk <= clock
    ram_data.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_data.MPORT.addr <= value
    ram_data.MPORT.mask <= UInt<1>("h1")
    ram_data.MPORT.data <= io_enq_bits_data
    ram_data.MPORT.clk <= clock
    ram_corrupt.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_corrupt.io_deq_bits_MPORT.addr <= value_1
    ram_corrupt.io_deq_bits_MPORT.clk <= clock
    ram_corrupt.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_corrupt.MPORT.addr <= value
    ram_corrupt.MPORT.mask <= UInt<1>("h1")
    ram_corrupt.MPORT.data <= UInt<1>("h0")
    ram_corrupt.MPORT.clk <= clock

  module Queue_6_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 39472:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 39473:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39474:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    input io_enq_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    input io_enq_bits_address : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    input io_enq_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    input io_enq_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    output io_deq_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    output io_deq_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    output io_deq_bits_source : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    output io_deq_bits_address : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    output io_deq_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    output io_deq_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39475:4]

    mem ram_opcode : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39477:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_param : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39477:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_size : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39477:4]
      data-type => UInt<4>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_source : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39477:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_address : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39477:4]
      data-type => UInt<32>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_mask : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39477:4]
      data-type => UInt<8>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_data : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39477:4]
      data-type => UInt<64>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_corrupt : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39477:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg value : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39478:4]
    reg value_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value_1) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39479:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 39480:4]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33 chipyard.TestHarness.SmallBoomConfig.fir 39481:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.SmallBoomConfig.fir 39482:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.SmallBoomConfig.fir 39483:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.SmallBoomConfig.fir 39484:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 39485:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 39488:4]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 39502:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 39503:6]
    node _GEN_12 = mux(do_enq, _value_T_1, value) @[Decoupled.scala 229:17 chipyard.TestHarness.SmallBoomConfig.fir 39491:4 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 39504:6 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39478:4]
    node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 39508:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 39509:6]
    node _GEN_13 = mux(do_deq, _value_T_3, value_1) @[Decoupled.scala 233:17 chipyard.TestHarness.SmallBoomConfig.fir 39506:4 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 39510:6 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39479:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.SmallBoomConfig.fir 39512:4]
    node _GEN_14 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.SmallBoomConfig.fir 39513:4 Decoupled.scala 237:16 chipyard.TestHarness.SmallBoomConfig.fir 39514:6 Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 39480:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.SmallBoomConfig.fir 39518:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.SmallBoomConfig.fir 39516:4]
    io_deq_bits_opcode <= ram_opcode.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39528:4]
    io_deq_bits_param <= ram_param.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39527:4]
    io_deq_bits_size <= ram_size.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39526:4]
    io_deq_bits_source <= ram_source.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39525:4]
    io_deq_bits_address <= ram_address.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39524:4]
    io_deq_bits_mask <= ram_mask.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39523:4]
    io_deq_bits_data <= ram_data.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39522:4]
    io_deq_bits_corrupt <= ram_corrupt.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39521:4]
    value <= mux(reset, UInt<1>("h0"), _GEN_12) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39478:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39478:4]
    value_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39479:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39479:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_14) @[Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 39480:4 Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 39480:4]
    ram_opcode.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_opcode.io_deq_bits_MPORT.addr <= value_1
    ram_opcode.io_deq_bits_MPORT.clk <= clock
    ram_opcode.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_opcode.MPORT.addr <= value
    ram_opcode.MPORT.mask <= UInt<1>("h1")
    ram_opcode.MPORT.data <= io_enq_bits_opcode
    ram_opcode.MPORT.clk <= clock
    ram_param.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_param.io_deq_bits_MPORT.addr <= value_1
    ram_param.io_deq_bits_MPORT.clk <= clock
    ram_param.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_param.MPORT.addr <= value
    ram_param.MPORT.mask <= UInt<1>("h1")
    ram_param.MPORT.data <= UInt<3>("h0")
    ram_param.MPORT.clk <= clock
    ram_size.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_size.io_deq_bits_MPORT.addr <= value_1
    ram_size.io_deq_bits_MPORT.clk <= clock
    ram_size.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_size.MPORT.addr <= value
    ram_size.MPORT.mask <= UInt<1>("h1")
    ram_size.MPORT.data <= io_enq_bits_size
    ram_size.MPORT.clk <= clock
    ram_source.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_source.io_deq_bits_MPORT.addr <= value_1
    ram_source.io_deq_bits_MPORT.clk <= clock
    ram_source.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_source.MPORT.addr <= value
    ram_source.MPORT.mask <= UInt<1>("h1")
    ram_source.MPORT.data <= UInt<1>("h0")
    ram_source.MPORT.clk <= clock
    ram_address.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_address.io_deq_bits_MPORT.addr <= value_1
    ram_address.io_deq_bits_MPORT.clk <= clock
    ram_address.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_address.MPORT.addr <= value
    ram_address.MPORT.mask <= UInt<1>("h1")
    ram_address.MPORT.data <= io_enq_bits_address
    ram_address.MPORT.clk <= clock
    ram_mask.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_mask.io_deq_bits_MPORT.addr <= value_1
    ram_mask.io_deq_bits_MPORT.clk <= clock
    ram_mask.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_mask.MPORT.addr <= value
    ram_mask.MPORT.mask <= UInt<1>("h1")
    ram_mask.MPORT.data <= io_enq_bits_mask
    ram_mask.MPORT.clk <= clock
    ram_data.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_data.io_deq_bits_MPORT.addr <= value_1
    ram_data.io_deq_bits_MPORT.clk <= clock
    ram_data.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_data.MPORT.addr <= value
    ram_data.MPORT.mask <= UInt<1>("h1")
    ram_data.MPORT.data <= io_enq_bits_data
    ram_data.MPORT.clk <= clock
    ram_corrupt.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_corrupt.io_deq_bits_MPORT.addr <= value_1
    ram_corrupt.io_deq_bits_MPORT.clk <= clock
    ram_corrupt.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_corrupt.MPORT.addr <= value
    ram_corrupt.MPORT.mask <= UInt<1>("h1")
    ram_corrupt.MPORT.data <= UInt<1>("h0")
    ram_corrupt.MPORT.clk <= clock

  module Queue_7_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 39536:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 39537:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39538:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    input io_enq_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    input io_enq_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    input io_enq_bits_source : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    input io_enq_bits_sink : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    input io_enq_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    input io_enq_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    input io_enq_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    output io_deq_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    output io_deq_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    output io_deq_bits_source : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    output io_deq_bits_sink : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    output io_deq_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    output io_deq_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 39539:4]

    mem ram_opcode : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39541:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_param : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39541:4]
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_size : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39541:4]
      data-type => UInt<4>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_source : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39541:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_sink : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39541:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_denied : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39541:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_data : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39541:4]
      data-type => UInt<64>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_corrupt : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 39541:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg value : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39542:4]
    reg value_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value_1) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39543:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 39544:4]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33 chipyard.TestHarness.SmallBoomConfig.fir 39545:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.SmallBoomConfig.fir 39546:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.SmallBoomConfig.fir 39547:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.SmallBoomConfig.fir 39548:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 39549:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 39552:4]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 39566:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 39567:6]
    node _GEN_12 = mux(do_enq, _value_T_1, value) @[Decoupled.scala 229:17 chipyard.TestHarness.SmallBoomConfig.fir 39555:4 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 39568:6 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39542:4]
    node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 39572:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 39573:6]
    node _GEN_13 = mux(do_deq, _value_T_3, value_1) @[Decoupled.scala 233:17 chipyard.TestHarness.SmallBoomConfig.fir 39570:4 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 39574:6 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39543:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.SmallBoomConfig.fir 39576:4]
    node _GEN_14 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.SmallBoomConfig.fir 39577:4 Decoupled.scala 237:16 chipyard.TestHarness.SmallBoomConfig.fir 39578:6 Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 39544:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.SmallBoomConfig.fir 39582:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.SmallBoomConfig.fir 39580:4]
    io_deq_bits_opcode <= ram_opcode.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39592:4]
    io_deq_bits_param <= ram_param.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39591:4]
    io_deq_bits_size <= ram_size.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39590:4]
    io_deq_bits_source <= ram_source.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39589:4]
    io_deq_bits_sink <= ram_sink.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39588:4]
    io_deq_bits_denied <= ram_denied.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39587:4]
    io_deq_bits_data <= ram_data.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39586:4]
    io_deq_bits_corrupt <= ram_corrupt.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 39585:4]
    value <= mux(reset, UInt<1>("h0"), _GEN_12) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39542:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39542:4]
    value_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39543:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 39543:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_14) @[Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 39544:4 Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 39544:4]
    ram_opcode.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_opcode.io_deq_bits_MPORT.addr <= value_1
    ram_opcode.io_deq_bits_MPORT.clk <= clock
    ram_opcode.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_opcode.MPORT.addr <= value
    ram_opcode.MPORT.mask <= UInt<1>("h1")
    ram_opcode.MPORT.data <= io_enq_bits_opcode
    ram_opcode.MPORT.clk <= clock
    ram_param.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_param.io_deq_bits_MPORT.addr <= value_1
    ram_param.io_deq_bits_MPORT.clk <= clock
    ram_param.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_param.MPORT.addr <= value
    ram_param.MPORT.mask <= UInt<1>("h1")
    ram_param.MPORT.data <= io_enq_bits_param
    ram_param.MPORT.clk <= clock
    ram_size.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_size.io_deq_bits_MPORT.addr <= value_1
    ram_size.io_deq_bits_MPORT.clk <= clock
    ram_size.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_size.MPORT.addr <= value
    ram_size.MPORT.mask <= UInt<1>("h1")
    ram_size.MPORT.data <= io_enq_bits_size
    ram_size.MPORT.clk <= clock
    ram_source.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_source.io_deq_bits_MPORT.addr <= value_1
    ram_source.io_deq_bits_MPORT.clk <= clock
    ram_source.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_source.MPORT.addr <= value
    ram_source.MPORT.mask <= UInt<1>("h1")
    ram_source.MPORT.data <= io_enq_bits_source
    ram_source.MPORT.clk <= clock
    ram_sink.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_sink.io_deq_bits_MPORT.addr <= value_1
    ram_sink.io_deq_bits_MPORT.clk <= clock
    ram_sink.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_sink.MPORT.addr <= value
    ram_sink.MPORT.mask <= UInt<1>("h1")
    ram_sink.MPORT.data <= io_enq_bits_sink
    ram_sink.MPORT.clk <= clock
    ram_denied.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_denied.io_deq_bits_MPORT.addr <= value_1
    ram_denied.io_deq_bits_MPORT.clk <= clock
    ram_denied.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_denied.MPORT.addr <= value
    ram_denied.MPORT.mask <= UInt<1>("h1")
    ram_denied.MPORT.data <= io_enq_bits_denied
    ram_denied.MPORT.clk <= clock
    ram_data.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_data.io_deq_bits_MPORT.addr <= value_1
    ram_data.io_deq_bits_MPORT.clk <= clock
    ram_data.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_data.MPORT.addr <= value
    ram_data.MPORT.mask <= UInt<1>("h1")
    ram_data.MPORT.data <= io_enq_bits_data
    ram_data.MPORT.clk <= clock
    ram_corrupt.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_corrupt.io_deq_bits_MPORT.addr <= value_1
    ram_corrupt.io_deq_bits_MPORT.clk <= clock
    ram_corrupt.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_corrupt.MPORT.addr <= value
    ram_corrupt.MPORT.mask <= UInt<1>("h1")
    ram_corrupt.MPORT.data <= io_enq_bits_corrupt
    ram_corrupt.MPORT.clk <= clock

  module HellaPeekingArbiter_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 369278:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 369279:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369280:4]
    output io_in_1_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_1_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_1_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_1_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_1_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_1_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_1_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_1_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_1_bits_union : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_1_bits_last : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    output io_in_4_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_4_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_4_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_4_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_4_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_4_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_4_bits_address : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_4_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_4_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_4_bits_union : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_in_4_bits_last : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    input io_out_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    output io_out_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    output io_out_bits_chanId : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    output io_out_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    output io_out_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    output io_out_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    output io_out_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    output io_out_bits_address : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    output io_out_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    output io_out_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    output io_out_bits_union : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]
    output io_out_bits_last : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369281:4]

    reg lockIdx : UInt<3>, clock with :
      reset => (UInt<1>("h0"), lockIdx) @[Arbiters.scala 25:20 chipyard.TestHarness.SmallBoomConfig.fir 369286:4]
    reg locked : UInt<1>, clock with :
      reset => (UInt<1>("h0"), locked) @[Arbiters.scala 26:19 chipyard.TestHarness.SmallBoomConfig.fir 369287:4]
    node choice = mux(io_in_1_valid, UInt<3>("h1"), UInt<3>("h4")) @[Mux.scala 47:69 chipyard.TestHarness.SmallBoomConfig.fir 369290:4]
    node chosen = mux(locked, lockIdx, choice) @[Arbiters.scala 36:19 chipyard.TestHarness.SmallBoomConfig.fir 369292:4]
    node _io_in_1_ready_T = eq(chosen, UInt<3>("h1")) @[Arbiters.scala 39:46 chipyard.TestHarness.SmallBoomConfig.fir 369296:4]
    node _io_in_4_ready_T = eq(chosen, UInt<3>("h4")) @[Arbiters.scala 39:46 chipyard.TestHarness.SmallBoomConfig.fir 369305:4]
    node _GEN_65 = eq(UInt<3>("h1"), chosen) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_13 = and(_GEN_65, io_in_1_valid) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_14 = mux(eq(UInt<3>("h1"), chosen), UInt<3>("h3"), UInt<3>("h4")) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_15 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_opcode, UInt<3>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_16 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_param, UInt<3>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_17 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_size, UInt<4>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_18 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_source, UInt<4>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_20 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_data, UInt<64>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_21 = and(_GEN_65, io_in_1_bits_corrupt) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_22 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_union, UInt<8>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_23 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_last, UInt<1>("h1")) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_25 = mux(eq(UInt<3>("h2"), chosen), UInt<1>("h0"), _GEN_13) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_26 = mux(eq(UInt<3>("h2"), chosen), UInt<3>("h2"), _GEN_14) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_27 = mux(eq(UInt<3>("h2"), chosen), UInt<3>("h0"), _GEN_15) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_28 = mux(eq(UInt<3>("h2"), chosen), UInt<3>("h0"), _GEN_16) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_29 = mux(eq(UInt<3>("h2"), chosen), UInt<4>("h0"), _GEN_17) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_30 = mux(eq(UInt<3>("h2"), chosen), UInt<4>("h0"), _GEN_18) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_32 = mux(eq(UInt<3>("h2"), chosen), UInt<64>("h0"), _GEN_20) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_33 = mux(eq(UInt<3>("h2"), chosen), UInt<1>("h0"), _GEN_21) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_34 = mux(eq(UInt<3>("h2"), chosen), UInt<8>("h0"), _GEN_22) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_67 = eq(UInt<3>("h2"), chosen) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_35 = or(_GEN_67, _GEN_23) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_37 = mux(eq(UInt<3>("h3"), chosen), UInt<1>("h0"), _GEN_25) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_38 = mux(eq(UInt<3>("h3"), chosen), UInt<3>("h1"), _GEN_26) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_39 = mux(eq(UInt<3>("h3"), chosen), UInt<3>("h0"), _GEN_27) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_40 = mux(eq(UInt<3>("h3"), chosen), UInt<3>("h0"), _GEN_28) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_41 = mux(eq(UInt<3>("h3"), chosen), UInt<4>("h0"), _GEN_29) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_42 = mux(eq(UInt<3>("h3"), chosen), UInt<4>("h0"), _GEN_30) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_44 = mux(eq(UInt<3>("h3"), chosen), UInt<64>("h0"), _GEN_32) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_45 = mux(eq(UInt<3>("h3"), chosen), UInt<1>("h0"), _GEN_33) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_46 = mux(eq(UInt<3>("h3"), chosen), UInt<8>("h0"), _GEN_34) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_68 = eq(UInt<3>("h3"), chosen) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _GEN_47 = or(_GEN_68, _GEN_35) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    node _T = and(io_out_ready, io_out_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 369310:4]
    node _T_1 = not(locked) @[Arbiters.scala 59:11 chipyard.TestHarness.SmallBoomConfig.fir 369312:6]
    node _GEN_60 = mux(_T_1, choice, lockIdx) @[Arbiters.scala 59:50 chipyard.TestHarness.SmallBoomConfig.fir 369314:6 Arbiters.scala 60:15 chipyard.TestHarness.SmallBoomConfig.fir 369315:8 Arbiters.scala 25:20 chipyard.TestHarness.SmallBoomConfig.fir 369286:4]
    node _GEN_61 = or(_T_1, locked) @[Arbiters.scala 59:50 chipyard.TestHarness.SmallBoomConfig.fir 369314:6 Arbiters.scala 61:14 chipyard.TestHarness.SmallBoomConfig.fir 369316:8 Arbiters.scala 26:19 chipyard.TestHarness.SmallBoomConfig.fir 369287:4]
    node _GEN_62 = mux(io_out_bits_last, UInt<1>("h0"), _GEN_61) @[Arbiters.scala 64:35 chipyard.TestHarness.SmallBoomConfig.fir 369318:6 Arbiters.scala 65:14 chipyard.TestHarness.SmallBoomConfig.fir 369319:8]
    node _GEN_63 = mux(_T, _GEN_60, lockIdx) @[Arbiters.scala 58:24 chipyard.TestHarness.SmallBoomConfig.fir 369311:4 Arbiters.scala 25:20 chipyard.TestHarness.SmallBoomConfig.fir 369286:4]
    node _GEN_64 = mux(_T, _GEN_62, locked) @[Arbiters.scala 58:24 chipyard.TestHarness.SmallBoomConfig.fir 369311:4 Arbiters.scala 26:19 chipyard.TestHarness.SmallBoomConfig.fir 369287:4]
    io_in_1_ready <= and(io_out_ready, _io_in_1_ready_T) @[Arbiters.scala 39:36 chipyard.TestHarness.SmallBoomConfig.fir 369297:4]
    io_in_4_ready <= and(io_out_ready, _io_in_4_ready_T) @[Arbiters.scala 39:36 chipyard.TestHarness.SmallBoomConfig.fir 369306:4]
    io_out_valid <= mux(eq(UInt<3>("h4"), chosen), io_in_4_valid, _GEN_37) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    io_out_bits_chanId <= mux(eq(UInt<3>("h4"), chosen), UInt<3>("h0"), _GEN_38) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    io_out_bits_opcode <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_opcode, _GEN_39) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    io_out_bits_param <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_param, _GEN_40) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    io_out_bits_size <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_size, _GEN_41) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    io_out_bits_source <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_source, _GEN_42) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    io_out_bits_address <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_address, UInt<32>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    io_out_bits_data <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_data, _GEN_44) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    io_out_bits_corrupt <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_corrupt, _GEN_45) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    io_out_bits_union <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_union, _GEN_46) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    io_out_bits_last <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_last, _GEN_47) @[Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4 Arbiters.scala 42:16 chipyard.TestHarness.SmallBoomConfig.fir 369308:4]
    lockIdx <= mux(reset, UInt<3>("h0"), _GEN_63) @[Arbiters.scala 25:20 chipyard.TestHarness.SmallBoomConfig.fir 369286:4 Arbiters.scala 25:20 chipyard.TestHarness.SmallBoomConfig.fir 369286:4]
    locked <= mux(reset, UInt<1>("h0"), _GEN_64) @[Arbiters.scala 26:19 chipyard.TestHarness.SmallBoomConfig.fir 369287:4 Arbiters.scala 26:19 chipyard.TestHarness.SmallBoomConfig.fir 369287:4]

  module GenericSerializer_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 369323:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 369324:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369325:4]
    output io_in_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    input io_in_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    input io_in_bits_chanId : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    input io_in_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    input io_in_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    input io_in_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    input io_in_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    input io_in_bits_address : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    input io_in_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    input io_in_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    input io_in_bits_union : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    input io_in_bits_last : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    input io_out_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    output io_out_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]
    output io_out_bits : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 369326:4]

    reg data : UInt<123>, clock with :
      reset => (UInt<1>("h0"), data) @[Serdes.scala 175:17 chipyard.TestHarness.SmallBoomConfig.fir 369328:4]
    reg sending : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sending) @[Serdes.scala 177:24 chipyard.TestHarness.SmallBoomConfig.fir 369329:4]
    node _T = and(io_out_ready, io_out_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 369330:4]
    reg sendCount : UInt<5>, clock with :
      reset => (UInt<1>("h0"), sendCount) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 369331:4]
    node wrap_wrap = eq(sendCount, UInt<5>("h1e")) @[Counter.scala 72:24 chipyard.TestHarness.SmallBoomConfig.fir 369335:6]
    node _wrap_value_T = add(sendCount, UInt<5>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 369336:6]
    node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 369337:6]
    node _GEN_0 = mux(wrap_wrap, UInt<5>("h0"), _wrap_value_T_1) @[Counter.scala 86:20 chipyard.TestHarness.SmallBoomConfig.fir 369339:6 Counter.scala 86:28 chipyard.TestHarness.SmallBoomConfig.fir 369340:8 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 369338:6]
    node _GEN_1 = mux(_T, _GEN_0, sendCount) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 369334:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 369331:4]
    node sendDone = and(_T, wrap_wrap) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 369334:4 Counter.scala 118:24 chipyard.TestHarness.SmallBoomConfig.fir 369342:6 chipyard.TestHarness.SmallBoomConfig.fir 369333:4]
    node _T_1 = and(io_in_ready, io_in_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 369349:4]
    node _data_T = cat(cat(cat(cat(io_in_bits_chanId, io_in_bits_opcode), io_in_bits_param), cat(io_in_bits_size, io_in_bits_source)), cat(cat(cat(io_in_bits_address, io_in_bits_data), io_in_bits_corrupt), cat(io_in_bits_union, io_in_bits_last))) @[Serdes.scala 185:24 chipyard.TestHarness.SmallBoomConfig.fir 369359:6]
    node _GEN_3 = mux(_T_1, _data_T, data) @[Serdes.scala 184:23 chipyard.TestHarness.SmallBoomConfig.fir 369350:4 Serdes.scala 185:10 chipyard.TestHarness.SmallBoomConfig.fir 369360:6 Serdes.scala 175:17 chipyard.TestHarness.SmallBoomConfig.fir 369328:4]
    node _GEN_4 = or(_T_1, sending) @[Serdes.scala 184:23 chipyard.TestHarness.SmallBoomConfig.fir 369350:4 Serdes.scala 186:13 chipyard.TestHarness.SmallBoomConfig.fir 369361:6 Serdes.scala 177:24 chipyard.TestHarness.SmallBoomConfig.fir 369329:4]
    node _GEN_7 = shr(data, 4) @[Serdes.scala 189:39 chipyard.TestHarness.SmallBoomConfig.fir 369365:6]
    node _data_T_1 = pad(_GEN_7, 123) @[Serdes.scala 189:39 chipyard.TestHarness.SmallBoomConfig.fir 369365:6]
    node _GEN_6 = mux(sendDone, UInt<1>("h0"), _GEN_4) @[Serdes.scala 191:19 chipyard.TestHarness.SmallBoomConfig.fir 369368:4 Serdes.scala 191:29 chipyard.TestHarness.SmallBoomConfig.fir 369369:6]
    io_in_ready <= not(sending) @[Serdes.scala 180:18 chipyard.TestHarness.SmallBoomConfig.fir 369344:4]
    io_out_valid <= sending @[Serdes.scala 181:16 chipyard.TestHarness.SmallBoomConfig.fir 369346:4]
    io_out_bits <= bits(data, 3, 0) @[Serdes.scala 182:22 chipyard.TestHarness.SmallBoomConfig.fir 369347:4]
    data <= mux(_T, _data_T_1, _GEN_3) @[Serdes.scala 189:24 chipyard.TestHarness.SmallBoomConfig.fir 369364:4 Serdes.scala 189:31 chipyard.TestHarness.SmallBoomConfig.fir 369366:6]
    sending <= mux(reset, UInt<1>("h0"), _GEN_6) @[Serdes.scala 177:24 chipyard.TestHarness.SmallBoomConfig.fir 369329:4 Serdes.scala 177:24 chipyard.TestHarness.SmallBoomConfig.fir 369329:4]
    sendCount <= mux(reset, UInt<5>("h0"), _GEN_1) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 369331:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 369331:4]

  module GenericDeserializer_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 369372:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 369373:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369374:4]
    output io_in_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]
    input io_in_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]
    input io_in_bits : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]
    input io_out_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]
    output io_out_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]
    output io_out_bits_chanId : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]
    output io_out_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]
    output io_out_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]
    output io_out_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]
    output io_out_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]
    output io_out_bits_address : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]
    output io_out_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]
    output io_out_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]
    output io_out_bits_union : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 369375:4]

    reg data_0 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_0) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_1) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_2 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_2) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_3 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_3) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_4 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_4) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_5 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_5) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_6 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_6) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_7 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_7) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_8 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_8) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_9 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_9) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_10 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_10) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_11 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_11) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_12 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_12) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_13 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_13) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_14 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_14) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_15 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_15) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_16 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_16) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_17 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_17) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_18 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_18) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_19 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_19) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_20 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_20) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_21 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_21) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_22 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_22) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_23 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_23) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_24 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_24) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_25 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_25) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_26 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_26) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_27 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_27) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_28 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_28) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_29 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_29) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg data_30 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_30) @[Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    reg receiving : UInt<1>, clock with :
      reset => (UInt<1>("h0"), receiving) @[Serdes.scala 204:26 chipyard.TestHarness.SmallBoomConfig.fir 369378:4]
    node _T = and(io_in_ready, io_in_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 369379:4]
    reg recvCount : UInt<5>, clock with :
      reset => (UInt<1>("h0"), recvCount) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 369380:4]
    node wrap_wrap = eq(recvCount, UInt<5>("h1e")) @[Counter.scala 72:24 chipyard.TestHarness.SmallBoomConfig.fir 369384:6]
    node _wrap_value_T = add(recvCount, UInt<5>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 369385:6]
    node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 369386:6]
    node _GEN_0 = mux(wrap_wrap, UInt<5>("h0"), _wrap_value_T_1) @[Counter.scala 86:20 chipyard.TestHarness.SmallBoomConfig.fir 369388:6 Counter.scala 86:28 chipyard.TestHarness.SmallBoomConfig.fir 369389:8 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 369387:6]
    node _GEN_1 = mux(_T, _GEN_0, recvCount) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 369383:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 369380:4]
    node recvDone = and(_T, wrap_wrap) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 369383:4 Counter.scala 118:24 chipyard.TestHarness.SmallBoomConfig.fir 369391:6 chipyard.TestHarness.SmallBoomConfig.fir 369382:4]
    node io_out_bits_lo_lo = cat(cat(cat(data_6, data_5), cat(data_4, data_3)), cat(cat(data_2, data_1), data_0)) @[Serdes.scala 209:23 chipyard.TestHarness.SmallBoomConfig.fir 369401:4]
    node io_out_bits_lo = cat(cat(cat(cat(data_14, data_13), cat(data_12, data_11)), cat(cat(data_10, data_9), cat(data_8, data_7))), io_out_bits_lo_lo) @[Serdes.scala 209:23 chipyard.TestHarness.SmallBoomConfig.fir 369409:4]
    node io_out_bits_hi_lo = cat(cat(cat(data_22, data_21), cat(data_20, data_19)), cat(cat(data_18, data_17), cat(data_16, data_15))) @[Serdes.scala 209:23 chipyard.TestHarness.SmallBoomConfig.fir 369416:4]
    node _io_out_bits_T = cat(cat(cat(cat(cat(data_30, data_29), cat(data_28, data_27)), cat(cat(data_26, data_25), cat(data_24, data_23))), io_out_bits_hi_lo), io_out_bits_lo) @[Serdes.scala 209:23 chipyard.TestHarness.SmallBoomConfig.fir 369425:4]
    node _io_out_bits_WIRE_1 = bits(_io_out_bits_T, 122, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 369427:4 chipyard.TestHarness.SmallBoomConfig.fir 369428:4]
    node _GEN_3 = mux(eq(UInt<5>("h0"), recvCount), io_in_bits, data_0) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_4 = mux(eq(UInt<5>("h1"), recvCount), io_in_bits, data_1) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_5 = mux(eq(UInt<5>("h2"), recvCount), io_in_bits, data_2) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_6 = mux(eq(UInt<5>("h3"), recvCount), io_in_bits, data_3) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_7 = mux(eq(UInt<5>("h4"), recvCount), io_in_bits, data_4) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_8 = mux(eq(UInt<5>("h5"), recvCount), io_in_bits, data_5) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_9 = mux(eq(UInt<5>("h6"), recvCount), io_in_bits, data_6) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_10 = mux(eq(UInt<5>("h7"), recvCount), io_in_bits, data_7) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_11 = mux(eq(UInt<5>("h8"), recvCount), io_in_bits, data_8) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_12 = mux(eq(UInt<5>("h9"), recvCount), io_in_bits, data_9) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_13 = mux(eq(UInt<5>("ha"), recvCount), io_in_bits, data_10) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_14 = mux(eq(UInt<5>("hb"), recvCount), io_in_bits, data_11) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_15 = mux(eq(UInt<5>("hc"), recvCount), io_in_bits, data_12) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_16 = mux(eq(UInt<5>("hd"), recvCount), io_in_bits, data_13) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_17 = mux(eq(UInt<5>("he"), recvCount), io_in_bits, data_14) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_18 = mux(eq(UInt<5>("hf"), recvCount), io_in_bits, data_15) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_19 = mux(eq(UInt<5>("h10"), recvCount), io_in_bits, data_16) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_20 = mux(eq(UInt<5>("h11"), recvCount), io_in_bits, data_17) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_21 = mux(eq(UInt<5>("h12"), recvCount), io_in_bits, data_18) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_22 = mux(eq(UInt<5>("h13"), recvCount), io_in_bits, data_19) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_23 = mux(eq(UInt<5>("h14"), recvCount), io_in_bits, data_20) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_24 = mux(eq(UInt<5>("h15"), recvCount), io_in_bits, data_21) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_25 = mux(eq(UInt<5>("h16"), recvCount), io_in_bits, data_22) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_26 = mux(eq(UInt<5>("h17"), recvCount), io_in_bits, data_23) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_27 = mux(eq(UInt<5>("h18"), recvCount), io_in_bits, data_24) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_28 = mux(eq(UInt<5>("h19"), recvCount), io_in_bits, data_25) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_29 = mux(eq(UInt<5>("h1a"), recvCount), io_in_bits, data_26) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_30 = mux(eq(UInt<5>("h1b"), recvCount), io_in_bits, data_27) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_31 = mux(eq(UInt<5>("h1c"), recvCount), io_in_bits, data_28) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_32 = mux(eq(UInt<5>("h1d"), recvCount), io_in_bits, data_29) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_33 = mux(eq(UInt<5>("h1e"), recvCount), io_in_bits, data_30) @[Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 369461:6 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    node _GEN_65 = mux(recvDone, UInt<1>("h0"), receiving) @[Serdes.scala 215:19 chipyard.TestHarness.SmallBoomConfig.fir 369463:4 Serdes.scala 215:31 chipyard.TestHarness.SmallBoomConfig.fir 369464:6 Serdes.scala 204:26 chipyard.TestHarness.SmallBoomConfig.fir 369378:4]
    node _T_2 = and(io_out_ready, io_out_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 369466:4]
    node _GEN_66 = or(_T_2, _GEN_65) @[Serdes.scala 217:24 chipyard.TestHarness.SmallBoomConfig.fir 369467:4 Serdes.scala 217:36 chipyard.TestHarness.SmallBoomConfig.fir 369468:6]
    io_in_ready <= receiving @[Serdes.scala 207:15 chipyard.TestHarness.SmallBoomConfig.fir 369393:4]
    io_out_valid <= not(receiving) @[Serdes.scala 208:19 chipyard.TestHarness.SmallBoomConfig.fir 369394:4]
    io_out_bits_chanId <= bits(_io_out_bits_WIRE_1, 122, 120) @[Serdes.scala 209:38 chipyard.TestHarness.SmallBoomConfig.fir 369447:4]
    io_out_bits_opcode <= bits(_io_out_bits_WIRE_1, 119, 117) @[Serdes.scala 209:38 chipyard.TestHarness.SmallBoomConfig.fir 369445:4]
    io_out_bits_param <= bits(_io_out_bits_WIRE_1, 116, 114) @[Serdes.scala 209:38 chipyard.TestHarness.SmallBoomConfig.fir 369443:4]
    io_out_bits_size <= bits(_io_out_bits_WIRE_1, 113, 110) @[Serdes.scala 209:38 chipyard.TestHarness.SmallBoomConfig.fir 369441:4]
    io_out_bits_source <= bits(_io_out_bits_WIRE_1, 109, 106) @[Serdes.scala 209:38 chipyard.TestHarness.SmallBoomConfig.fir 369439:4]
    io_out_bits_address <= bits(_io_out_bits_WIRE_1, 105, 74) @[Serdes.scala 209:38 chipyard.TestHarness.SmallBoomConfig.fir 369437:4]
    io_out_bits_data <= bits(_io_out_bits_WIRE_1, 73, 10) @[Serdes.scala 209:38 chipyard.TestHarness.SmallBoomConfig.fir 369435:4]
    io_out_bits_corrupt <= bits(_io_out_bits_WIRE_1, 9, 9) @[Serdes.scala 209:38 chipyard.TestHarness.SmallBoomConfig.fir 369433:4]
    io_out_bits_union <= bits(_io_out_bits_WIRE_1, 8, 1) @[Serdes.scala 209:38 chipyard.TestHarness.SmallBoomConfig.fir 369431:4]
    data_0 <= mux(_T, _GEN_3, data_0) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_1 <= mux(_T, _GEN_4, data_1) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_2 <= mux(_T, _GEN_5, data_2) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_3 <= mux(_T, _GEN_6, data_3) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_4 <= mux(_T, _GEN_7, data_4) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_5 <= mux(_T, _GEN_8, data_5) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_6 <= mux(_T, _GEN_9, data_6) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_7 <= mux(_T, _GEN_10, data_7) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_8 <= mux(_T, _GEN_11, data_8) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_9 <= mux(_T, _GEN_12, data_9) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_10 <= mux(_T, _GEN_13, data_10) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_11 <= mux(_T, _GEN_14, data_11) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_12 <= mux(_T, _GEN_15, data_12) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_13 <= mux(_T, _GEN_16, data_13) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_14 <= mux(_T, _GEN_17, data_14) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_15 <= mux(_T, _GEN_18, data_15) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_16 <= mux(_T, _GEN_19, data_16) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_17 <= mux(_T, _GEN_20, data_17) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_18 <= mux(_T, _GEN_21, data_18) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_19 <= mux(_T, _GEN_22, data_19) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_20 <= mux(_T, _GEN_23, data_20) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_21 <= mux(_T, _GEN_24, data_21) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_22 <= mux(_T, _GEN_25, data_22) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_23 <= mux(_T, _GEN_26, data_23) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_24 <= mux(_T, _GEN_27, data_24) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_25 <= mux(_T, _GEN_28, data_25) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_26 <= mux(_T, _GEN_29, data_26) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_27 <= mux(_T, _GEN_30, data_27) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_28 <= mux(_T, _GEN_31, data_28) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_29 <= mux(_T, _GEN_32, data_29) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    data_30 <= mux(_T, _GEN_33, data_30) @[Serdes.scala 211:23 chipyard.TestHarness.SmallBoomConfig.fir 369460:4 Serdes.scala 202:17 chipyard.TestHarness.SmallBoomConfig.fir 369377:4]
    receiving <= or(reset, _GEN_66) @[Serdes.scala 204:26 chipyard.TestHarness.SmallBoomConfig.fir 369378:4 Serdes.scala 204:26 chipyard.TestHarness.SmallBoomConfig.fir 369378:4]
    recvCount <= mux(reset, UInt<5>("h0"), _GEN_1) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 369380:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 369380:4]

  extmodule ChipTop : @[chipyard.TestHarness.SmallBoomConfig.fir 380121:2]
    input jtag_TCK : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 380123:4]
    input jtag_TMS : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380123:4]
    input jtag_TDI : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380123:4]
    output jtag_TDO_data : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380123:4]
    output jtag_TDO_driven : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380123:4]
    output serial_tl_clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 380124:4]
    output serial_tl_bits_in_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380124:4]
    input serial_tl_bits_in_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380124:4]
    input serial_tl_bits_in_bits : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 380124:4]
    input serial_tl_bits_out_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380124:4]
    output serial_tl_bits_out_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380124:4]
    output serial_tl_bits_out_bits : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 380124:4]
    output axi4_mem_0_clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    input axi4_mem_0_bits_aw_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_aw_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_aw_bits_id : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_aw_bits_addr : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_aw_bits_len : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_aw_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_aw_bits_burst : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_aw_bits_lock : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_aw_bits_cache : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_aw_bits_prot : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_aw_bits_qos : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    input axi4_mem_0_bits_w_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_w_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_w_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_w_bits_strb : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_w_bits_last : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_b_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    input axi4_mem_0_bits_b_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    input axi4_mem_0_bits_b_bits_id : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    input axi4_mem_0_bits_b_bits_resp : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    input axi4_mem_0_bits_ar_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_ar_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_ar_bits_id : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_ar_bits_addr : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_ar_bits_len : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_ar_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_ar_bits_burst : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_ar_bits_lock : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_ar_bits_cache : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_ar_bits_prot : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_ar_bits_qos : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output axi4_mem_0_bits_r_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    input axi4_mem_0_bits_r_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    input axi4_mem_0_bits_r_bits_id : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    input axi4_mem_0_bits_r_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    input axi4_mem_0_bits_r_bits_resp : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    input axi4_mem_0_bits_r_bits_last : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380125:4]
    output uart_0_txd : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380126:4]
    input uart_0_rxd : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380126:4]
    input reset_wire_reset : AsyncReset @[chipyard.TestHarness.SmallBoomConfig.fir 380127:4]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 380128:4]
    defname = ChipTop

  extmodule SimJTAG : @[chipyard.TestHarness.SmallBoomConfig.fir 380429:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 380430:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380431:4]
    output jtag_TRSTn : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380432:4]
    output jtag_TCK : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 380432:4]
    output jtag_TMS : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380432:4]
    output jtag_TDI : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380432:4]
    input jtag_TDO_data : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380432:4]
    input jtag_TDO_driven : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380432:4]
    input enable : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380433:4]
    input init_done : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380434:4]
    output exit : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 380435:4]
    defname = SimJTAG
    parameter TICK_DELAY = 3

  extmodule plusarg_reader_107 : @[chipyard.TestHarness.SmallBoomConfig.fir 380440:2]
    output out : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 380441:4]
    defname = plusarg_reader
    parameter FORMAT = "jtag_rbb_enable=%d"
    parameter DEFAULT = 0
    parameter WIDTH = 32

  module SerialAdapter_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 380448:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 380449:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380450:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380451:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380451:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 380451:4]
    output auto_out_a_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 380451:4]
    output auto_out_a_bits_address : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 380451:4]
    output auto_out_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 380451:4]
    output auto_out_a_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 380451:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380451:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380451:4]
    input auto_out_d_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 380451:4]
    output io_serial_in_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380452:4]
    input io_serial_in_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380452:4]
    input io_serial_in_bits : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 380452:4]
    input io_serial_out_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380452:4]
    output io_serial_out_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 380452:4]
    output io_serial_out_bits : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 380452:4]

    reg cmd : UInt<32>, clock with :
      reset => (UInt<1>("h0"), cmd) @[SerialAdapter.scala 86:16 chipyard.TestHarness.SmallBoomConfig.fir 380461:4]
    reg addr : UInt<64>, clock with :
      reset => (UInt<1>("h0"), addr) @[SerialAdapter.scala 87:17 chipyard.TestHarness.SmallBoomConfig.fir 380462:4]
    reg len : UInt<64>, clock with :
      reset => (UInt<1>("h0"), len) @[SerialAdapter.scala 88:16 chipyard.TestHarness.SmallBoomConfig.fir 380463:4]
    reg body_0 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), body_0) @[SerialAdapter.scala 89:17 chipyard.TestHarness.SmallBoomConfig.fir 380464:4]
    reg body_1 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), body_1) @[SerialAdapter.scala 89:17 chipyard.TestHarness.SmallBoomConfig.fir 380464:4]
    reg bodyValid : UInt<2>, clock with :
      reset => (UInt<1>("h0"), bodyValid) @[SerialAdapter.scala 90:22 chipyard.TestHarness.SmallBoomConfig.fir 380465:4]
    reg idx : UInt<1>, clock with :
      reset => (UInt<1>("h0"), idx) @[SerialAdapter.scala 91:16 chipyard.TestHarness.SmallBoomConfig.fir 380466:4]
    reg state : UInt<4>, clock with :
      reset => (UInt<1>("h0"), state) @[SerialAdapter.scala 97:22 chipyard.TestHarness.SmallBoomConfig.fir 380467:4]
    node _io_serial_in_ready_T = eq(state, UInt<4>("h0")) @[package.scala 15:47 chipyard.TestHarness.SmallBoomConfig.fir 380468:4]
    node _io_serial_in_ready_T_1 = eq(state, UInt<4>("h1")) @[package.scala 15:47 chipyard.TestHarness.SmallBoomConfig.fir 380469:4]
    node _io_serial_in_ready_T_2 = eq(state, UInt<4>("h2")) @[package.scala 15:47 chipyard.TestHarness.SmallBoomConfig.fir 380470:4]
    node _io_serial_in_ready_T_3 = eq(state, UInt<4>("h6")) @[package.scala 15:47 chipyard.TestHarness.SmallBoomConfig.fir 380471:4]
    node _io_serial_in_ready_T_4 = or(_io_serial_in_ready_T, _io_serial_in_ready_T_1) @[package.scala 72:59 chipyard.TestHarness.SmallBoomConfig.fir 380472:4]
    node _io_serial_in_ready_T_5 = or(_io_serial_in_ready_T_4, _io_serial_in_ready_T_2) @[package.scala 72:59 chipyard.TestHarness.SmallBoomConfig.fir 380473:4]
    node _io_serial_out_valid_T = eq(state, UInt<4>("h5")) @[SerialAdapter.scala 100:32 chipyard.TestHarness.SmallBoomConfig.fir 380476:4]
    node beatAddr = bits(addr, 31, 3) @[SerialAdapter.scala 103:22 chipyard.TestHarness.SmallBoomConfig.fir 380479:4]
    node _nextAddr_T = add(beatAddr, UInt<29>("h1")) @[SerialAdapter.scala 104:31 chipyard.TestHarness.SmallBoomConfig.fir 380480:4]
    node nextAddr_hi = tail(_nextAddr_T, 1) @[SerialAdapter.scala 104:31 chipyard.TestHarness.SmallBoomConfig.fir 380481:4]
    node nextAddr = cat(nextAddr_hi, UInt<3>("h0")) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 380482:4]
    node _wmask_T = bits(bodyValid, 0, 0) @[Bitwise.scala 26:51 chipyard.TestHarness.SmallBoomConfig.fir 380483:4]
    node _wmask_T_1 = bits(bodyValid, 1, 1) @[Bitwise.scala 26:51 chipyard.TestHarness.SmallBoomConfig.fir 380484:4]
    node wmask_lo = mux(_wmask_T, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12 chipyard.TestHarness.SmallBoomConfig.fir 380486:4]
    node wmask_hi = mux(_wmask_T_1, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12 chipyard.TestHarness.SmallBoomConfig.fir 380488:4]
    node wmask = cat(wmask_hi, wmask_lo) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 380489:4]
    node _GEN_55 = pad(nextAddr, 64) @[SerialAdapter.scala 107:28 chipyard.TestHarness.SmallBoomConfig.fir 380490:4]
    node _addr_size_T = sub(_GEN_55, addr) @[SerialAdapter.scala 107:28 chipyard.TestHarness.SmallBoomConfig.fir 380490:4]
    node addr_size = tail(_addr_size_T, 1) @[SerialAdapter.scala 107:28 chipyard.TestHarness.SmallBoomConfig.fir 380491:4]
    node _len_size_T = add(len, UInt<64>("h1")) @[SerialAdapter.scala 108:26 chipyard.TestHarness.SmallBoomConfig.fir 380492:4]
    node len_size_hi = tail(_len_size_T, 1) @[SerialAdapter.scala 108:26 chipyard.TestHarness.SmallBoomConfig.fir 380493:4]
    node len_size = cat(len_size_hi, UInt<2>("h0")) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 380494:4]
    node _GEN_56 = pad(addr_size, 66) @[SerialAdapter.scala 109:31 chipyard.TestHarness.SmallBoomConfig.fir 380495:4]
    node _raw_size_T = lt(len_size, _GEN_56) @[SerialAdapter.scala 109:31 chipyard.TestHarness.SmallBoomConfig.fir 380495:4]
    node raw_size = mux(_raw_size_T, len_size, pad(addr_size, 66)) @[SerialAdapter.scala 109:21 chipyard.TestHarness.SmallBoomConfig.fir 380496:4]
    node _rsize_T = eq(UInt<66>("h1"), raw_size) @[Mux.scala 80:60 chipyard.TestHarness.SmallBoomConfig.fir 380497:4]
    node _rsize_T_1 = mux(_rsize_T, UInt<2>("h0"), UInt<2>("h3")) @[Mux.scala 80:57 chipyard.TestHarness.SmallBoomConfig.fir 380498:4]
    node _rsize_T_2 = eq(UInt<66>("h2"), raw_size) @[Mux.scala 80:60 chipyard.TestHarness.SmallBoomConfig.fir 380499:4]
    node _rsize_T_3 = mux(_rsize_T_2, UInt<2>("h1"), _rsize_T_1) @[Mux.scala 80:57 chipyard.TestHarness.SmallBoomConfig.fir 380500:4]
    node _rsize_T_4 = eq(UInt<66>("h4"), raw_size) @[Mux.scala 80:60 chipyard.TestHarness.SmallBoomConfig.fir 380501:4]
    node rsize = mux(_rsize_T_4, UInt<2>("h2"), _rsize_T_3) @[Mux.scala 80:57 chipyard.TestHarness.SmallBoomConfig.fir 380502:4]
    node _pow2size_T = bits(raw_size, 0, 0) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380503:4]
    node _pow2size_T_1 = bits(raw_size, 1, 1) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380504:4]
    node _pow2size_T_2 = bits(raw_size, 2, 2) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380505:4]
    node _pow2size_T_3 = bits(raw_size, 3, 3) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380506:4]
    node _pow2size_T_4 = bits(raw_size, 4, 4) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380507:4]
    node _pow2size_T_5 = bits(raw_size, 5, 5) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380508:4]
    node _pow2size_T_6 = bits(raw_size, 6, 6) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380509:4]
    node _pow2size_T_7 = bits(raw_size, 7, 7) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380510:4]
    node _pow2size_T_8 = bits(raw_size, 8, 8) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380511:4]
    node _pow2size_T_9 = bits(raw_size, 9, 9) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380512:4]
    node _pow2size_T_10 = bits(raw_size, 10, 10) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380513:4]
    node _pow2size_T_11 = bits(raw_size, 11, 11) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380514:4]
    node _pow2size_T_12 = bits(raw_size, 12, 12) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380515:4]
    node _pow2size_T_13 = bits(raw_size, 13, 13) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380516:4]
    node _pow2size_T_14 = bits(raw_size, 14, 14) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380517:4]
    node _pow2size_T_15 = bits(raw_size, 15, 15) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380518:4]
    node _pow2size_T_16 = bits(raw_size, 16, 16) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380519:4]
    node _pow2size_T_17 = bits(raw_size, 17, 17) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380520:4]
    node _pow2size_T_18 = bits(raw_size, 18, 18) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380521:4]
    node _pow2size_T_19 = bits(raw_size, 19, 19) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380522:4]
    node _pow2size_T_20 = bits(raw_size, 20, 20) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380523:4]
    node _pow2size_T_21 = bits(raw_size, 21, 21) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380524:4]
    node _pow2size_T_22 = bits(raw_size, 22, 22) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380525:4]
    node _pow2size_T_23 = bits(raw_size, 23, 23) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380526:4]
    node _pow2size_T_24 = bits(raw_size, 24, 24) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380527:4]
    node _pow2size_T_25 = bits(raw_size, 25, 25) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380528:4]
    node _pow2size_T_26 = bits(raw_size, 26, 26) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380529:4]
    node _pow2size_T_27 = bits(raw_size, 27, 27) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380530:4]
    node _pow2size_T_28 = bits(raw_size, 28, 28) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380531:4]
    node _pow2size_T_29 = bits(raw_size, 29, 29) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380532:4]
    node _pow2size_T_30 = bits(raw_size, 30, 30) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380533:4]
    node _pow2size_T_31 = bits(raw_size, 31, 31) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380534:4]
    node _pow2size_T_32 = bits(raw_size, 32, 32) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380535:4]
    node _pow2size_T_33 = bits(raw_size, 33, 33) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380536:4]
    node _pow2size_T_34 = bits(raw_size, 34, 34) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380537:4]
    node _pow2size_T_35 = bits(raw_size, 35, 35) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380538:4]
    node _pow2size_T_36 = bits(raw_size, 36, 36) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380539:4]
    node _pow2size_T_37 = bits(raw_size, 37, 37) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380540:4]
    node _pow2size_T_38 = bits(raw_size, 38, 38) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380541:4]
    node _pow2size_T_39 = bits(raw_size, 39, 39) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380542:4]
    node _pow2size_T_40 = bits(raw_size, 40, 40) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380543:4]
    node _pow2size_T_41 = bits(raw_size, 41, 41) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380544:4]
    node _pow2size_T_42 = bits(raw_size, 42, 42) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380545:4]
    node _pow2size_T_43 = bits(raw_size, 43, 43) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380546:4]
    node _pow2size_T_44 = bits(raw_size, 44, 44) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380547:4]
    node _pow2size_T_45 = bits(raw_size, 45, 45) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380548:4]
    node _pow2size_T_46 = bits(raw_size, 46, 46) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380549:4]
    node _pow2size_T_47 = bits(raw_size, 47, 47) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380550:4]
    node _pow2size_T_48 = bits(raw_size, 48, 48) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380551:4]
    node _pow2size_T_49 = bits(raw_size, 49, 49) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380552:4]
    node _pow2size_T_50 = bits(raw_size, 50, 50) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380553:4]
    node _pow2size_T_51 = bits(raw_size, 51, 51) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380554:4]
    node _pow2size_T_52 = bits(raw_size, 52, 52) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380555:4]
    node _pow2size_T_53 = bits(raw_size, 53, 53) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380556:4]
    node _pow2size_T_54 = bits(raw_size, 54, 54) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380557:4]
    node _pow2size_T_55 = bits(raw_size, 55, 55) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380558:4]
    node _pow2size_T_56 = bits(raw_size, 56, 56) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380559:4]
    node _pow2size_T_57 = bits(raw_size, 57, 57) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380560:4]
    node _pow2size_T_58 = bits(raw_size, 58, 58) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380561:4]
    node _pow2size_T_59 = bits(raw_size, 59, 59) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380562:4]
    node _pow2size_T_60 = bits(raw_size, 60, 60) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380563:4]
    node _pow2size_T_61 = bits(raw_size, 61, 61) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380564:4]
    node _pow2size_T_62 = bits(raw_size, 62, 62) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380565:4]
    node _pow2size_T_63 = bits(raw_size, 63, 63) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380566:4]
    node _pow2size_T_64 = bits(raw_size, 64, 64) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380567:4]
    node _pow2size_T_65 = bits(raw_size, 65, 65) @[Bitwise.scala 49:65 chipyard.TestHarness.SmallBoomConfig.fir 380568:4]
    node _pow2size_T_66 = add(_pow2size_T, _pow2size_T_1) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380569:4]
    node _pow2size_T_68 = add(_pow2size_T_2, _pow2size_T_3) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380571:4]
    node _pow2size_T_70 = add(_pow2size_T_66, _pow2size_T_68) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380573:4]
    node _pow2size_T_72 = add(_pow2size_T_4, _pow2size_T_5) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380575:4]
    node _pow2size_T_74 = add(_pow2size_T_6, _pow2size_T_7) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380577:4]
    node _pow2size_T_76 = add(_pow2size_T_72, _pow2size_T_74) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380579:4]
    node _pow2size_T_78 = add(_pow2size_T_70, _pow2size_T_76) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380581:4]
    node _pow2size_T_80 = add(_pow2size_T_8, _pow2size_T_9) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380583:4]
    node _pow2size_T_82 = add(_pow2size_T_10, _pow2size_T_11) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380585:4]
    node _pow2size_T_84 = add(_pow2size_T_80, _pow2size_T_82) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380587:4]
    node _pow2size_T_86 = add(_pow2size_T_12, _pow2size_T_13) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380589:4]
    node _pow2size_T_88 = add(_pow2size_T_14, _pow2size_T_15) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380591:4]
    node _pow2size_T_90 = add(_pow2size_T_86, _pow2size_T_88) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380593:4]
    node _pow2size_T_92 = add(_pow2size_T_84, _pow2size_T_90) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380595:4]
    node _pow2size_T_94 = add(_pow2size_T_78, _pow2size_T_92) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380597:4]
    node _pow2size_T_96 = add(_pow2size_T_16, _pow2size_T_17) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380599:4]
    node _pow2size_T_98 = add(_pow2size_T_18, _pow2size_T_19) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380601:4]
    node _pow2size_T_100 = add(_pow2size_T_96, _pow2size_T_98) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380603:4]
    node _pow2size_T_102 = add(_pow2size_T_20, _pow2size_T_21) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380605:4]
    node _pow2size_T_104 = add(_pow2size_T_22, _pow2size_T_23) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380607:4]
    node _pow2size_T_106 = add(_pow2size_T_102, _pow2size_T_104) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380609:4]
    node _pow2size_T_108 = add(_pow2size_T_100, _pow2size_T_106) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380611:4]
    node _pow2size_T_110 = add(_pow2size_T_24, _pow2size_T_25) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380613:4]
    node _pow2size_T_112 = add(_pow2size_T_26, _pow2size_T_27) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380615:4]
    node _pow2size_T_114 = add(_pow2size_T_110, _pow2size_T_112) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380617:4]
    node _pow2size_T_116 = add(_pow2size_T_28, _pow2size_T_29) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380619:4]
    node _pow2size_T_118 = add(_pow2size_T_31, _pow2size_T_32) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380621:4]
    node _GEN_57 = pad(_pow2size_T_30, 2) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380623:4]
    node _pow2size_T_120 = add(_GEN_57, _pow2size_T_118) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380623:4]
    node _pow2size_T_121 = bits(_pow2size_T_120, 1, 0) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380624:4]
    node _pow2size_T_122 = add(_pow2size_T_116, _pow2size_T_121) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380625:4]
    node _pow2size_T_124 = add(_pow2size_T_114, _pow2size_T_122) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380627:4]
    node _pow2size_T_126 = add(_pow2size_T_108, _pow2size_T_124) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380629:4]
    node _pow2size_T_128 = add(_pow2size_T_94, _pow2size_T_126) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380631:4]
    node _pow2size_T_130 = add(_pow2size_T_33, _pow2size_T_34) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380633:4]
    node _pow2size_T_132 = add(_pow2size_T_35, _pow2size_T_36) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380635:4]
    node _pow2size_T_134 = add(_pow2size_T_130, _pow2size_T_132) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380637:4]
    node _pow2size_T_136 = add(_pow2size_T_37, _pow2size_T_38) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380639:4]
    node _pow2size_T_138 = add(_pow2size_T_39, _pow2size_T_40) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380641:4]
    node _pow2size_T_140 = add(_pow2size_T_136, _pow2size_T_138) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380643:4]
    node _pow2size_T_142 = add(_pow2size_T_134, _pow2size_T_140) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380645:4]
    node _pow2size_T_144 = add(_pow2size_T_41, _pow2size_T_42) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380647:4]
    node _pow2size_T_146 = add(_pow2size_T_43, _pow2size_T_44) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380649:4]
    node _pow2size_T_148 = add(_pow2size_T_144, _pow2size_T_146) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380651:4]
    node _pow2size_T_150 = add(_pow2size_T_45, _pow2size_T_46) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380653:4]
    node _pow2size_T_152 = add(_pow2size_T_47, _pow2size_T_48) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380655:4]
    node _pow2size_T_154 = add(_pow2size_T_150, _pow2size_T_152) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380657:4]
    node _pow2size_T_156 = add(_pow2size_T_148, _pow2size_T_154) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380659:4]
    node _pow2size_T_158 = add(_pow2size_T_142, _pow2size_T_156) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380661:4]
    node _pow2size_T_160 = add(_pow2size_T_49, _pow2size_T_50) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380663:4]
    node _pow2size_T_162 = add(_pow2size_T_51, _pow2size_T_52) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380665:4]
    node _pow2size_T_164 = add(_pow2size_T_160, _pow2size_T_162) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380667:4]
    node _pow2size_T_166 = add(_pow2size_T_53, _pow2size_T_54) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380669:4]
    node _pow2size_T_168 = add(_pow2size_T_55, _pow2size_T_56) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380671:4]
    node _pow2size_T_170 = add(_pow2size_T_166, _pow2size_T_168) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380673:4]
    node _pow2size_T_172 = add(_pow2size_T_164, _pow2size_T_170) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380675:4]
    node _pow2size_T_174 = add(_pow2size_T_57, _pow2size_T_58) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380677:4]
    node _pow2size_T_176 = add(_pow2size_T_59, _pow2size_T_60) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380679:4]
    node _pow2size_T_178 = add(_pow2size_T_174, _pow2size_T_176) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380681:4]
    node _pow2size_T_180 = add(_pow2size_T_61, _pow2size_T_62) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380683:4]
    node _pow2size_T_182 = add(_pow2size_T_64, _pow2size_T_65) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380685:4]
    node _GEN_58 = pad(_pow2size_T_63, 2) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380687:4]
    node _pow2size_T_184 = add(_GEN_58, _pow2size_T_182) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380687:4]
    node _pow2size_T_185 = bits(_pow2size_T_184, 1, 0) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380688:4]
    node _pow2size_T_186 = add(_pow2size_T_180, _pow2size_T_185) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380689:4]
    node _pow2size_T_188 = add(_pow2size_T_178, _pow2size_T_186) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380691:4]
    node _pow2size_T_190 = add(_pow2size_T_172, _pow2size_T_188) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380693:4]
    node _pow2size_T_192 = add(_pow2size_T_158, _pow2size_T_190) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380695:4]
    node _pow2size_T_194 = add(_pow2size_T_128, _pow2size_T_192) @[Bitwise.scala 47:55 chipyard.TestHarness.SmallBoomConfig.fir 380697:4]
    node pow2size = eq(_pow2size_T_194, UInt<7>("h1")) @[SerialAdapter.scala 113:37 chipyard.TestHarness.SmallBoomConfig.fir 380699:4]
    node _byteAddr_T = bits(addr, 2, 0) @[SerialAdapter.scala 114:36 chipyard.TestHarness.SmallBoomConfig.fir 380700:4]
    node byteAddr = mux(pow2size, _byteAddr_T, UInt<3>("h0")) @[SerialAdapter.scala 114:21 chipyard.TestHarness.SmallBoomConfig.fir 380701:4]
    node put_acquire_address = shl(beatAddr, 3) @[SerialAdapter.scala 117:19 chipyard.TestHarness.SmallBoomConfig.fir 380702:4]
    node put_acquire_data = cat(body_1, body_0) @[SerialAdapter.scala 118:10 chipyard.TestHarness.SmallBoomConfig.fir 380703:4]
    node get_acquire_address = cat(beatAddr, byteAddr) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 380768:4]
    node _get_acquire_a_mask_sizeOH_T = pad(rsize, 3) @[Misc.scala 201:34 chipyard.TestHarness.SmallBoomConfig.fir 380834:4]
    node get_acquire_a_mask_sizeOH_shiftAmount = bits(_get_acquire_a_mask_sizeOH_T, 1, 0) @[OneHot.scala 64:49 chipyard.TestHarness.SmallBoomConfig.fir 380835:4]
    node _get_acquire_a_mask_sizeOH_T_1 = dshlw(UInt<4>("h1"), get_acquire_a_mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.SmallBoomConfig.fir 380836:4]
    node _get_acquire_a_mask_sizeOH_T_2 = bits(_get_acquire_a_mask_sizeOH_T_1, 2, 0) @[OneHot.scala 65:27 chipyard.TestHarness.SmallBoomConfig.fir 380837:4]
    node get_acquire_a_mask_sizeOH = or(_get_acquire_a_mask_sizeOH_T_2, UInt<3>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.SmallBoomConfig.fir 380838:4]
    node _get_acquire_a_mask_T = geq(rsize, UInt<2>("h3")) @[Misc.scala 205:21 chipyard.TestHarness.SmallBoomConfig.fir 380839:4]
    node get_acquire_a_mask_size = bits(get_acquire_a_mask_sizeOH, 2, 2) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 380840:4]
    node get_acquire_a_mask_bit = bits(get_acquire_address, 2, 2) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 380841:4]
    node get_acquire_a_mask_nbit = not(get_acquire_a_mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 380842:4]
    node _get_acquire_a_mask_acc_T = and(get_acquire_a_mask_size, get_acquire_a_mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380844:4]
    node get_acquire_a_mask_acc = or(_get_acquire_a_mask_T, _get_acquire_a_mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380845:4]
    node _get_acquire_a_mask_acc_T_1 = and(get_acquire_a_mask_size, get_acquire_a_mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380847:4]
    node get_acquire_a_mask_acc_1 = or(_get_acquire_a_mask_T, _get_acquire_a_mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380848:4]
    node get_acquire_a_mask_size_1 = bits(get_acquire_a_mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 380849:4]
    node get_acquire_a_mask_bit_1 = bits(get_acquire_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 380850:4]
    node get_acquire_a_mask_nbit_1 = not(get_acquire_a_mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 380851:4]
    node get_acquire_a_mask_eq_2 = and(get_acquire_a_mask_nbit, get_acquire_a_mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 380852:4]
    node _get_acquire_a_mask_acc_T_2 = and(get_acquire_a_mask_size_1, get_acquire_a_mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380853:4]
    node get_acquire_a_mask_acc_2 = or(get_acquire_a_mask_acc, _get_acquire_a_mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380854:4]
    node get_acquire_a_mask_eq_3 = and(get_acquire_a_mask_nbit, get_acquire_a_mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 380855:4]
    node _get_acquire_a_mask_acc_T_3 = and(get_acquire_a_mask_size_1, get_acquire_a_mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380856:4]
    node get_acquire_a_mask_acc_3 = or(get_acquire_a_mask_acc, _get_acquire_a_mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380857:4]
    node get_acquire_a_mask_eq_4 = and(get_acquire_a_mask_bit, get_acquire_a_mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 380858:4]
    node _get_acquire_a_mask_acc_T_4 = and(get_acquire_a_mask_size_1, get_acquire_a_mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380859:4]
    node get_acquire_a_mask_acc_4 = or(get_acquire_a_mask_acc_1, _get_acquire_a_mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380860:4]
    node get_acquire_a_mask_eq_5 = and(get_acquire_a_mask_bit, get_acquire_a_mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 380861:4]
    node _get_acquire_a_mask_acc_T_5 = and(get_acquire_a_mask_size_1, get_acquire_a_mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380862:4]
    node get_acquire_a_mask_acc_5 = or(get_acquire_a_mask_acc_1, _get_acquire_a_mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380863:4]
    node get_acquire_a_mask_size_2 = bits(get_acquire_a_mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 380864:4]
    node get_acquire_a_mask_bit_2 = bits(get_acquire_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 380865:4]
    node get_acquire_a_mask_nbit_2 = not(get_acquire_a_mask_bit_2) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 380866:4]
    node get_acquire_a_mask_eq_6 = and(get_acquire_a_mask_eq_2, get_acquire_a_mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 380867:4]
    node _get_acquire_a_mask_acc_T_6 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_6) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380868:4]
    node get_acquire_a_mask_lo_lo_lo = or(get_acquire_a_mask_acc_2, _get_acquire_a_mask_acc_T_6) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380869:4]
    node get_acquire_a_mask_eq_7 = and(get_acquire_a_mask_eq_2, get_acquire_a_mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 380870:4]
    node _get_acquire_a_mask_acc_T_7 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_7) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380871:4]
    node get_acquire_a_mask_lo_lo_hi = or(get_acquire_a_mask_acc_2, _get_acquire_a_mask_acc_T_7) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380872:4]
    node get_acquire_a_mask_eq_8 = and(get_acquire_a_mask_eq_3, get_acquire_a_mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 380873:4]
    node _get_acquire_a_mask_acc_T_8 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_8) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380874:4]
    node get_acquire_a_mask_lo_hi_lo = or(get_acquire_a_mask_acc_3, _get_acquire_a_mask_acc_T_8) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380875:4]
    node get_acquire_a_mask_eq_9 = and(get_acquire_a_mask_eq_3, get_acquire_a_mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 380876:4]
    node _get_acquire_a_mask_acc_T_9 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_9) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380877:4]
    node get_acquire_a_mask_lo_hi_hi = or(get_acquire_a_mask_acc_3, _get_acquire_a_mask_acc_T_9) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380878:4]
    node get_acquire_a_mask_eq_10 = and(get_acquire_a_mask_eq_4, get_acquire_a_mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 380879:4]
    node _get_acquire_a_mask_acc_T_10 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_10) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380880:4]
    node get_acquire_a_mask_hi_lo_lo = or(get_acquire_a_mask_acc_4, _get_acquire_a_mask_acc_T_10) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380881:4]
    node get_acquire_a_mask_eq_11 = and(get_acquire_a_mask_eq_4, get_acquire_a_mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 380882:4]
    node _get_acquire_a_mask_acc_T_11 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_11) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380883:4]
    node get_acquire_a_mask_hi_lo_hi = or(get_acquire_a_mask_acc_4, _get_acquire_a_mask_acc_T_11) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380884:4]
    node get_acquire_a_mask_eq_12 = and(get_acquire_a_mask_eq_5, get_acquire_a_mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 380885:4]
    node _get_acquire_a_mask_acc_T_12 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_12) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380886:4]
    node get_acquire_a_mask_hi_hi_lo = or(get_acquire_a_mask_acc_5, _get_acquire_a_mask_acc_T_12) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380887:4]
    node get_acquire_a_mask_eq_13 = and(get_acquire_a_mask_eq_5, get_acquire_a_mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 380888:4]
    node _get_acquire_a_mask_acc_T_13 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_13) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 380889:4]
    node get_acquire_a_mask_hi_hi_hi = or(get_acquire_a_mask_acc_5, _get_acquire_a_mask_acc_T_13) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 380890:4]
    node get_acquire_mask = cat(cat(cat(get_acquire_a_mask_hi_hi_hi, get_acquire_a_mask_hi_hi_lo), cat(get_acquire_a_mask_hi_lo_hi, get_acquire_a_mask_hi_lo_lo)), cat(cat(get_acquire_a_mask_lo_hi_hi, get_acquire_a_mask_lo_hi_lo), cat(get_acquire_a_mask_lo_lo_hi, get_acquire_a_mask_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 380897:4]
    node _bundleOut_0_a_valid_T = eq(state, UInt<4>("h7")) @[package.scala 15:47 chipyard.TestHarness.SmallBoomConfig.fir 380901:4]
    node _bundleOut_0_a_valid_T_1 = eq(state, UInt<4>("h3")) @[package.scala 15:47 chipyard.TestHarness.SmallBoomConfig.fir 380902:4]
    node get_acquire_size = pad(rsize, 4) @[Edges.scala 447:17 chipyard.TestHarness.SmallBoomConfig.fir 380827:4 Edges.scala 450:15 chipyard.TestHarness.SmallBoomConfig.fir 380831:4]
    node _bundleOut_0_d_ready_T = eq(state, UInt<4>("h8")) @[package.scala 15:47 chipyard.TestHarness.SmallBoomConfig.fir 380921:4]
    node _bundleOut_0_d_ready_T_1 = eq(state, UInt<4>("h4")) @[package.scala 15:47 chipyard.TestHarness.SmallBoomConfig.fir 380922:4]
    node _T_1 = and(_io_serial_in_ready_T, io_serial_in_valid) @[SerialAdapter.scala 138:25 chipyard.TestHarness.SmallBoomConfig.fir 380929:4]
    node _GEN_3 = mux(_T_1, UInt<1>("h0"), idx) @[SerialAdapter.scala 138:48 chipyard.TestHarness.SmallBoomConfig.fir 380930:4 SerialAdapter.scala 140:9 chipyard.TestHarness.SmallBoomConfig.fir 380932:6 SerialAdapter.scala 91:16 chipyard.TestHarness.SmallBoomConfig.fir 380466:4]
    node _GEN_4 = mux(_T_1, UInt<64>("h0"), addr) @[SerialAdapter.scala 138:48 chipyard.TestHarness.SmallBoomConfig.fir 380930:4 SerialAdapter.scala 141:10 chipyard.TestHarness.SmallBoomConfig.fir 380933:6 SerialAdapter.scala 87:17 chipyard.TestHarness.SmallBoomConfig.fir 380462:4]
    node _GEN_5 = mux(_T_1, UInt<64>("h0"), len) @[SerialAdapter.scala 138:48 chipyard.TestHarness.SmallBoomConfig.fir 380930:4 SerialAdapter.scala 142:9 chipyard.TestHarness.SmallBoomConfig.fir 380934:6 SerialAdapter.scala 88:16 chipyard.TestHarness.SmallBoomConfig.fir 380463:4]
    node _GEN_6 = mux(_T_1, UInt<4>("h1"), state) @[SerialAdapter.scala 138:48 chipyard.TestHarness.SmallBoomConfig.fir 380930:4 SerialAdapter.scala 143:11 chipyard.TestHarness.SmallBoomConfig.fir 380935:6 SerialAdapter.scala 97:22 chipyard.TestHarness.SmallBoomConfig.fir 380467:4]
    node _T_3 = and(_io_serial_in_ready_T_1, io_serial_in_valid) @[SerialAdapter.scala 146:26 chipyard.TestHarness.SmallBoomConfig.fir 380938:4]
    node _addr_T = cat(idx, UInt<5>("h0")) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 380941:6]
    node _GEN_59 = pad(io_serial_in_bits, 95) @[SerialAdapter.scala 132:12 chipyard.TestHarness.SmallBoomConfig.fir 380942:6]
    node _addr_T_1 = dshlw(_GEN_59, _addr_T) @[SerialAdapter.scala 132:12 chipyard.TestHarness.SmallBoomConfig.fir 380942:6]
    node _GEN_60 = pad(addr, 95) @[SerialAdapter.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 380943:6]
    node _addr_T_2 = or(_GEN_60, _addr_T_1) @[SerialAdapter.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 380943:6]
    node _idx_T = add(idx, UInt<1>("h1")) @[SerialAdapter.scala 148:16 chipyard.TestHarness.SmallBoomConfig.fir 380945:6]
    node _idx_T_1 = tail(_idx_T, 1) @[SerialAdapter.scala 148:16 chipyard.TestHarness.SmallBoomConfig.fir 380946:6]
    node _GEN_7 = mux(idx, UInt<1>("h0"), _idx_T_1) @[SerialAdapter.scala 149:43 chipyard.TestHarness.SmallBoomConfig.fir 380949:6 SerialAdapter.scala 150:11 chipyard.TestHarness.SmallBoomConfig.fir 380950:8 SerialAdapter.scala 148:9 chipyard.TestHarness.SmallBoomConfig.fir 380947:6]
    node _GEN_8 = mux(idx, UInt<4>("h2"), _GEN_6) @[SerialAdapter.scala 149:43 chipyard.TestHarness.SmallBoomConfig.fir 380949:6 SerialAdapter.scala 151:13 chipyard.TestHarness.SmallBoomConfig.fir 380951:8]
    node _GEN_9 = mux(_T_3, _addr_T_2, pad(_GEN_4, 95)) @[SerialAdapter.scala 146:49 chipyard.TestHarness.SmallBoomConfig.fir 380939:4 SerialAdapter.scala 147:10 chipyard.TestHarness.SmallBoomConfig.fir 380944:6]
    node _GEN_10 = mux(_T_3, _GEN_7, _GEN_3) @[SerialAdapter.scala 146:49 chipyard.TestHarness.SmallBoomConfig.fir 380939:4]
    node _GEN_11 = mux(_T_3, _GEN_8, _GEN_6) @[SerialAdapter.scala 146:49 chipyard.TestHarness.SmallBoomConfig.fir 380939:4]
    node _T_6 = and(_io_serial_in_ready_T_2, io_serial_in_valid) @[SerialAdapter.scala 155:25 chipyard.TestHarness.SmallBoomConfig.fir 380955:4]
    node _GEN_62 = pad(len, 95) @[SerialAdapter.scala 156:16 chipyard.TestHarness.SmallBoomConfig.fir 380960:6]
    node _len_T_2 = or(_GEN_62, _addr_T_1) @[SerialAdapter.scala 156:16 chipyard.TestHarness.SmallBoomConfig.fir 380960:6]
    node _idx_T_4 = bits(addr, 2, 2) @[SerialAdapter.scala 136:33 chipyard.TestHarness.SmallBoomConfig.fir 380967:8]
    node _T_8 = eq(cmd, UInt<32>("h1")) @[SerialAdapter.scala 160:17 chipyard.TestHarness.SmallBoomConfig.fir 380969:8]
    node _T_9 = eq(cmd, UInt<32>("h0")) @[SerialAdapter.scala 163:24 chipyard.TestHarness.SmallBoomConfig.fir 380975:10]
    node _T_12 = not(reset) @[SerialAdapter.scala 166:15 chipyard.TestHarness.SmallBoomConfig.fir 380982:12]
    node _GEN_12 = mux(_T_9, UInt<4>("h3"), _GEN_11) @[SerialAdapter.scala 163:38 chipyard.TestHarness.SmallBoomConfig.fir 380976:10 SerialAdapter.scala 164:15 chipyard.TestHarness.SmallBoomConfig.fir 380977:12]
    node _GEN_13 = mux(_T_8, UInt<2>("h0"), bodyValid) @[SerialAdapter.scala 160:32 chipyard.TestHarness.SmallBoomConfig.fir 380970:8 SerialAdapter.scala 161:19 chipyard.TestHarness.SmallBoomConfig.fir 380971:10 SerialAdapter.scala 90:22 chipyard.TestHarness.SmallBoomConfig.fir 380465:4]
    node _GEN_14 = mux(_T_8, UInt<4>("h6"), _GEN_12) @[SerialAdapter.scala 160:32 chipyard.TestHarness.SmallBoomConfig.fir 380970:8 SerialAdapter.scala 162:15 chipyard.TestHarness.SmallBoomConfig.fir 380972:10]
    node _GEN_15 = mux(idx, _idx_T_4, _idx_T_1) @[SerialAdapter.scala 158:43 chipyard.TestHarness.SmallBoomConfig.fir 380966:6 SerialAdapter.scala 159:11 chipyard.TestHarness.SmallBoomConfig.fir 380968:8 SerialAdapter.scala 157:9 chipyard.TestHarness.SmallBoomConfig.fir 380964:6]
    node _GEN_16 = mux(idx, _GEN_13, bodyValid) @[SerialAdapter.scala 158:43 chipyard.TestHarness.SmallBoomConfig.fir 380966:6 SerialAdapter.scala 90:22 chipyard.TestHarness.SmallBoomConfig.fir 380465:4]
    node _GEN_17 = mux(idx, _GEN_14, _GEN_11) @[SerialAdapter.scala 158:43 chipyard.TestHarness.SmallBoomConfig.fir 380966:6]
    node _GEN_18 = mux(_T_6, _len_T_2, pad(_GEN_5, 95)) @[SerialAdapter.scala 155:48 chipyard.TestHarness.SmallBoomConfig.fir 380956:4 SerialAdapter.scala 156:9 chipyard.TestHarness.SmallBoomConfig.fir 380961:6]
    node _GEN_19 = mux(_T_6, _GEN_15, _GEN_10) @[SerialAdapter.scala 155:48 chipyard.TestHarness.SmallBoomConfig.fir 380956:4]
    node _GEN_20 = mux(_T_6, _GEN_16, bodyValid) @[SerialAdapter.scala 155:48 chipyard.TestHarness.SmallBoomConfig.fir 380956:4 SerialAdapter.scala 90:22 chipyard.TestHarness.SmallBoomConfig.fir 380465:4]
    node _GEN_21 = mux(_T_6, _GEN_17, _GEN_11) @[SerialAdapter.scala 155:48 chipyard.TestHarness.SmallBoomConfig.fir 380956:4]
    node _T_14 = and(_bundleOut_0_a_valid_T_1, auto_out_a_ready) @[SerialAdapter.scala 171:30 chipyard.TestHarness.SmallBoomConfig.fir 380991:4]
    node _GEN_22 = mux(_T_14, UInt<4>("h4"), _GEN_21) @[SerialAdapter.scala 171:46 chipyard.TestHarness.SmallBoomConfig.fir 380992:4 SerialAdapter.scala 172:11 chipyard.TestHarness.SmallBoomConfig.fir 380993:6]
    node _T_16 = and(_bundleOut_0_d_ready_T_1, auto_out_d_valid) @[SerialAdapter.scala 175:31 chipyard.TestHarness.SmallBoomConfig.fir 380996:4]
    node _T_17 = bits(auto_out_d_bits_data, 31, 0) @[SerialAdapter.scala 176:37 chipyard.TestHarness.SmallBoomConfig.fir 381001:6]
    node _T_18 = bits(auto_out_d_bits_data, 63, 32) @[SerialAdapter.scala 176:37 chipyard.TestHarness.SmallBoomConfig.fir 381003:6]
    node _GEN_23 = mux(_T_16, _T_17, body_0) @[SerialAdapter.scala 175:47 chipyard.TestHarness.SmallBoomConfig.fir 380997:4 SerialAdapter.scala 176:10 chipyard.TestHarness.SmallBoomConfig.fir 381005:6 SerialAdapter.scala 89:17 chipyard.TestHarness.SmallBoomConfig.fir 380464:4]
    node _GEN_24 = mux(_T_16, _T_18, body_1) @[SerialAdapter.scala 175:47 chipyard.TestHarness.SmallBoomConfig.fir 380997:4 SerialAdapter.scala 176:10 chipyard.TestHarness.SmallBoomConfig.fir 381006:6 SerialAdapter.scala 89:17 chipyard.TestHarness.SmallBoomConfig.fir 380464:4]
    node _GEN_25 = mux(_T_16, _idx_T_4, _GEN_19) @[SerialAdapter.scala 175:47 chipyard.TestHarness.SmallBoomConfig.fir 380997:4 SerialAdapter.scala 177:9 chipyard.TestHarness.SmallBoomConfig.fir 381008:6]
    node _GEN_26 = mux(_T_16, pad(nextAddr, 95), _GEN_9) @[SerialAdapter.scala 175:47 chipyard.TestHarness.SmallBoomConfig.fir 380997:4 SerialAdapter.scala 178:10 chipyard.TestHarness.SmallBoomConfig.fir 381009:6]
    node _GEN_27 = mux(_T_16, UInt<4>("h5"), _GEN_22) @[SerialAdapter.scala 175:47 chipyard.TestHarness.SmallBoomConfig.fir 380997:4 SerialAdapter.scala 179:11 chipyard.TestHarness.SmallBoomConfig.fir 381010:6]
    node _T_20 = and(_io_serial_out_valid_T, io_serial_out_ready) @[SerialAdapter.scala 182:31 chipyard.TestHarness.SmallBoomConfig.fir 381013:4]
    node _len_T_3 = sub(len, UInt<64>("h1")) @[SerialAdapter.scala 184:16 chipyard.TestHarness.SmallBoomConfig.fir 381018:6]
    node _len_T_4 = tail(_len_T_3, 1) @[SerialAdapter.scala 184:16 chipyard.TestHarness.SmallBoomConfig.fir 381019:6]
    node _T_21 = eq(len, UInt<64>("h0")) @[SerialAdapter.scala 185:15 chipyard.TestHarness.SmallBoomConfig.fir 381021:6]
    node _GEN_28 = mux(idx, UInt<4>("h3"), _GEN_27) @[SerialAdapter.scala 186:48 chipyard.TestHarness.SmallBoomConfig.fir 381027:8 SerialAdapter.scala 186:56 chipyard.TestHarness.SmallBoomConfig.fir 381028:10]
    node _GEN_29 = mux(_T_21, UInt<4>("h0"), _GEN_28) @[SerialAdapter.scala 185:24 chipyard.TestHarness.SmallBoomConfig.fir 381022:6 SerialAdapter.scala 185:32 chipyard.TestHarness.SmallBoomConfig.fir 381023:8]
    node _GEN_30 = mux(_T_20, _idx_T_1, _GEN_25) @[SerialAdapter.scala 182:55 chipyard.TestHarness.SmallBoomConfig.fir 381014:4 SerialAdapter.scala 183:9 chipyard.TestHarness.SmallBoomConfig.fir 381017:6]
    node _GEN_31 = mux(_T_20, pad(_len_T_4, 95), _GEN_18) @[SerialAdapter.scala 182:55 chipyard.TestHarness.SmallBoomConfig.fir 381014:4 SerialAdapter.scala 184:9 chipyard.TestHarness.SmallBoomConfig.fir 381020:6]
    node _GEN_32 = mux(_T_20, _GEN_29, _GEN_27) @[SerialAdapter.scala 182:55 chipyard.TestHarness.SmallBoomConfig.fir 381014:4]
    node _T_24 = and(_io_serial_in_ready_T_3, io_serial_in_valid) @[SerialAdapter.scala 189:32 chipyard.TestHarness.SmallBoomConfig.fir 381032:4]
    node _GEN_33 = mux(not(idx), io_serial_in_bits, _GEN_23) @[SerialAdapter.scala 190:15 chipyard.TestHarness.SmallBoomConfig.fir 381034:6 SerialAdapter.scala 190:15 chipyard.TestHarness.SmallBoomConfig.fir 381034:6]
    node _GEN_34 = mux(idx, io_serial_in_bits, _GEN_24) @[SerialAdapter.scala 190:15 chipyard.TestHarness.SmallBoomConfig.fir 381034:6 SerialAdapter.scala 190:15 chipyard.TestHarness.SmallBoomConfig.fir 381034:6]
    node _bodyValid_T = dshlw(UInt<2>("h1"), idx) @[OneHot.scala 58:35 chipyard.TestHarness.SmallBoomConfig.fir 381035:6]
    node _bodyValid_T_1 = or(bodyValid, _bodyValid_T) @[SerialAdapter.scala 191:28 chipyard.TestHarness.SmallBoomConfig.fir 381036:6]
    node _T_27 = or(idx, _T_21) @[SerialAdapter.scala 192:42 chipyard.TestHarness.SmallBoomConfig.fir 381040:6]
    node _GEN_35 = mux(_T_27, UInt<4>("h7"), _GEN_32) @[SerialAdapter.scala 192:58 chipyard.TestHarness.SmallBoomConfig.fir 381041:6 SerialAdapter.scala 193:13 chipyard.TestHarness.SmallBoomConfig.fir 381042:8]
    node _GEN_36 = mux(_T_27, _GEN_30, _idx_T_1) @[SerialAdapter.scala 192:58 chipyard.TestHarness.SmallBoomConfig.fir 381041:6 SerialAdapter.scala 195:11 chipyard.TestHarness.SmallBoomConfig.fir 381047:8]
    node _GEN_37 = mux(_T_27, _GEN_31, pad(_len_T_4, 95)) @[SerialAdapter.scala 192:58 chipyard.TestHarness.SmallBoomConfig.fir 381041:6 SerialAdapter.scala 196:11 chipyard.TestHarness.SmallBoomConfig.fir 381050:8]
    node _GEN_40 = mux(_T_24, _bodyValid_T_1, _GEN_20) @[SerialAdapter.scala 189:55 chipyard.TestHarness.SmallBoomConfig.fir 381033:4 SerialAdapter.scala 191:15 chipyard.TestHarness.SmallBoomConfig.fir 381037:6]
    node _GEN_41 = mux(_T_24, _GEN_35, _GEN_32) @[SerialAdapter.scala 189:55 chipyard.TestHarness.SmallBoomConfig.fir 381033:4]
    node _GEN_42 = mux(_T_24, _GEN_36, _GEN_30) @[SerialAdapter.scala 189:55 chipyard.TestHarness.SmallBoomConfig.fir 381033:4]
    node _GEN_43 = mux(_T_24, _GEN_37, _GEN_31) @[SerialAdapter.scala 189:55 chipyard.TestHarness.SmallBoomConfig.fir 381033:4]
    node _T_29 = and(_bundleOut_0_a_valid_T, auto_out_a_ready) @[SerialAdapter.scala 200:32 chipyard.TestHarness.SmallBoomConfig.fir 381054:4]
    node _GEN_44 = mux(_T_29, UInt<4>("h8"), _GEN_41) @[SerialAdapter.scala 200:48 chipyard.TestHarness.SmallBoomConfig.fir 381055:4 SerialAdapter.scala 201:11 chipyard.TestHarness.SmallBoomConfig.fir 381056:6]
    node _T_31 = and(_bundleOut_0_d_ready_T, auto_out_d_valid) @[SerialAdapter.scala 204:31 chipyard.TestHarness.SmallBoomConfig.fir 381059:4]
    node _GEN_45 = mux(_T_21, UInt<4>("h0"), UInt<4>("h6")) @[SerialAdapter.scala 205:24 chipyard.TestHarness.SmallBoomConfig.fir 381062:6 SerialAdapter.scala 206:13 chipyard.TestHarness.SmallBoomConfig.fir 381063:8 SerialAdapter.scala 212:13 chipyard.TestHarness.SmallBoomConfig.fir 381072:8]
    node _GEN_46 = mux(_T_21, _GEN_26, pad(nextAddr, 95)) @[SerialAdapter.scala 205:24 chipyard.TestHarness.SmallBoomConfig.fir 381062:6 SerialAdapter.scala 208:12 chipyard.TestHarness.SmallBoomConfig.fir 381066:8]
    node _GEN_47 = mux(_T_21, _GEN_43, pad(_len_T_4, 95)) @[SerialAdapter.scala 205:24 chipyard.TestHarness.SmallBoomConfig.fir 381062:6 SerialAdapter.scala 209:11 chipyard.TestHarness.SmallBoomConfig.fir 381069:8]
    node _GEN_48 = and(_T_21, _GEN_42) @[SerialAdapter.scala 205:24 chipyard.TestHarness.SmallBoomConfig.fir 381062:6 SerialAdapter.scala 210:11 chipyard.TestHarness.SmallBoomConfig.fir 381070:8]
    node _GEN_49 = mux(_T_21, _GEN_40, UInt<2>("h0")) @[SerialAdapter.scala 205:24 chipyard.TestHarness.SmallBoomConfig.fir 381062:6 SerialAdapter.scala 211:17 chipyard.TestHarness.SmallBoomConfig.fir 381071:8]
    node _GEN_50 = mux(_T_31, _GEN_45, _GEN_44) @[SerialAdapter.scala 204:47 chipyard.TestHarness.SmallBoomConfig.fir 381060:4]
    node _GEN_51 = mux(_T_31, _GEN_46, _GEN_26) @[SerialAdapter.scala 204:47 chipyard.TestHarness.SmallBoomConfig.fir 381060:4]
    node _GEN_52 = mux(_T_31, _GEN_47, _GEN_43) @[SerialAdapter.scala 204:47 chipyard.TestHarness.SmallBoomConfig.fir 381060:4]
    auto_out_a_valid <= or(_bundleOut_0_a_valid_T, _bundleOut_0_a_valid_T_1) @[package.scala 72:59 chipyard.TestHarness.SmallBoomConfig.fir 380903:4]
    auto_out_a_bits_opcode <= mux(_bundleOut_0_a_valid_T, UInt<3>("h1"), UInt<3>("h4")) @[SerialAdapter.scala 124:20 chipyard.TestHarness.SmallBoomConfig.fir 380906:4]
    auto_out_a_bits_size <= mux(_bundleOut_0_a_valid_T, UInt<4>("h3"), get_acquire_size) @[SerialAdapter.scala 124:20 chipyard.TestHarness.SmallBoomConfig.fir 380906:4]
    auto_out_a_bits_address <= mux(_bundleOut_0_a_valid_T, put_acquire_address, get_acquire_address) @[SerialAdapter.scala 124:20 chipyard.TestHarness.SmallBoomConfig.fir 380906:4]
    auto_out_a_bits_mask <= mux(_bundleOut_0_a_valid_T, wmask, get_acquire_mask) @[SerialAdapter.scala 124:20 chipyard.TestHarness.SmallBoomConfig.fir 380906:4]
    auto_out_a_bits_data <= mux(_bundleOut_0_a_valid_T, put_acquire_data, UInt<64>("h0")) @[SerialAdapter.scala 124:20 chipyard.TestHarness.SmallBoomConfig.fir 380906:4]
    auto_out_d_ready <= or(_bundleOut_0_d_ready_T, _bundleOut_0_d_ready_T_1) @[package.scala 72:59 chipyard.TestHarness.SmallBoomConfig.fir 380923:4]
    io_serial_in_ready <= or(_io_serial_in_ready_T_5, _io_serial_in_ready_T_3) @[package.scala 72:59 chipyard.TestHarness.SmallBoomConfig.fir 380474:4]
    io_serial_out_valid <= eq(state, UInt<4>("h5")) @[SerialAdapter.scala 100:32 chipyard.TestHarness.SmallBoomConfig.fir 380476:4]
    io_serial_out_bits <= mux(idx, body_1, body_0) @[SerialAdapter.scala 101:22 chipyard.TestHarness.SmallBoomConfig.fir 380478:4 SerialAdapter.scala 101:22 chipyard.TestHarness.SmallBoomConfig.fir 380478:4]
    cmd <= mux(_T_1, io_serial_in_bits, cmd) @[SerialAdapter.scala 138:48 chipyard.TestHarness.SmallBoomConfig.fir 380930:4 SerialAdapter.scala 139:9 chipyard.TestHarness.SmallBoomConfig.fir 380931:6 SerialAdapter.scala 86:16 chipyard.TestHarness.SmallBoomConfig.fir 380461:4]
    addr <= bits(_GEN_51, 63, 0)
    len <= bits(_GEN_52, 63, 0)
    body_0 <= mux(_T_24, _GEN_33, _GEN_23) @[SerialAdapter.scala 189:55 chipyard.TestHarness.SmallBoomConfig.fir 381033:4]
    body_1 <= mux(_T_24, _GEN_34, _GEN_24) @[SerialAdapter.scala 189:55 chipyard.TestHarness.SmallBoomConfig.fir 381033:4]
    bodyValid <= mux(_T_31, _GEN_49, _GEN_40) @[SerialAdapter.scala 204:47 chipyard.TestHarness.SmallBoomConfig.fir 381060:4]
    idx <= mux(_T_31, _GEN_48, _GEN_42) @[SerialAdapter.scala 204:47 chipyard.TestHarness.SmallBoomConfig.fir 381060:4]
    state <= mux(reset, UInt<4>("h0"), _GEN_50) @[SerialAdapter.scala 97:22 chipyard.TestHarness.SmallBoomConfig.fir 380467:4 SerialAdapter.scala 97:22 chipyard.TestHarness.SmallBoomConfig.fir 380467:4]
    node _GEN_63 = and(_T_6, idx) @[SerialAdapter.scala 166:15 chipyard.TestHarness.SmallBoomConfig.fir 380984:14]
    node _GEN_64 = not(_T_8) @[SerialAdapter.scala 166:15 chipyard.TestHarness.SmallBoomConfig.fir 380984:14]
    node _GEN_65 = and(_GEN_63, _GEN_64) @[SerialAdapter.scala 166:15 chipyard.TestHarness.SmallBoomConfig.fir 380984:14]
    node _GEN_66 = not(_T_9) @[SerialAdapter.scala 166:15 chipyard.TestHarness.SmallBoomConfig.fir 380984:14]
    node _GEN_67 = and(_GEN_65, _GEN_66) @[SerialAdapter.scala 166:15 chipyard.TestHarness.SmallBoomConfig.fir 380984:14]
    printf(clock, and(_GEN_67, _T_12), "Assertion failed: Bad TSI command\n    at SerialAdapter.scala:166 assert(false.B, \"Bad TSI command\")\n") @[SerialAdapter.scala 166:15 chipyard.TestHarness.SmallBoomConfig.fir 380984:14]
    stop(clock, and(_GEN_67, _T_12), 1) @[SerialAdapter.scala 166:15 chipyard.TestHarness.SmallBoomConfig.fir 380985:14]

  module TLMonitor_53_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 381092:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 381093:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 381094:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_a_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_a_bits_source : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_a_bits_address : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_d_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_d_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_d_bits_source : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_d_bits_sink : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]
    input io_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 381095:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.SmallBoomConfig.fir 383034:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.SmallBoomConfig.fir 383341:4]
    node _source_ok_T = not(io_in_a_bits_source) @[Parameters.scala 46:9 chipyard.TestHarness.SmallBoomConfig.fir 381106:6]
    node _is_aligned_mask_T_1 = dshlw(UInt<27>("hfff"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.SmallBoomConfig.fir 381111:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 11, 0) @[package.scala 234:82 chipyard.TestHarness.SmallBoomConfig.fir 381112:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.SmallBoomConfig.fir 381113:6]
    node _GEN_71 = pad(is_aligned_mask, 32) @[Edges.scala 20:16 chipyard.TestHarness.SmallBoomConfig.fir 381114:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.SmallBoomConfig.fir 381114:6]
    node is_aligned = eq(_is_aligned_T, UInt<32>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.SmallBoomConfig.fir 381115:6]
    node mask_sizeOH_shiftAmount = bits(io_in_a_bits_size, 1, 0) @[OneHot.scala 64:49 chipyard.TestHarness.SmallBoomConfig.fir 381117:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<4>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.SmallBoomConfig.fir 381118:6]
    node _mask_sizeOH_T_2 = bits(_mask_sizeOH_T_1, 2, 0) @[OneHot.scala 65:27 chipyard.TestHarness.SmallBoomConfig.fir 381119:6]
    node mask_sizeOH = or(_mask_sizeOH_T_2, UInt<3>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.SmallBoomConfig.fir 381120:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<4>("h3")) @[Misc.scala 205:21 chipyard.TestHarness.SmallBoomConfig.fir 381121:6]
    node mask_size = bits(mask_sizeOH, 2, 2) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 381122:6]
    node mask_bit = bits(io_in_a_bits_address, 2, 2) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 381123:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 381124:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381126:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381127:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381129:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381130:6]
    node mask_size_1 = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 381131:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 381132:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 381133:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 381134:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381135:6]
    node mask_acc_2 = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381136:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 381137:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381138:6]
    node mask_acc_3 = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381139:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 381140:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381141:6]
    node mask_acc_4 = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381142:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 381143:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381144:6]
    node mask_acc_5 = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381145:6]
    node mask_size_2 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 381146:6]
    node mask_bit_2 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 381147:6]
    node mask_nbit_2 = not(mask_bit_2) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 381148:6]
    node mask_eq_6 = and(mask_eq_2, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 381149:6]
    node _mask_acc_T_6 = and(mask_size_2, mask_eq_6) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381150:6]
    node mask_lo_lo_lo = or(mask_acc_2, _mask_acc_T_6) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381151:6]
    node mask_eq_7 = and(mask_eq_2, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 381152:6]
    node _mask_acc_T_7 = and(mask_size_2, mask_eq_7) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381153:6]
    node mask_lo_lo_hi = or(mask_acc_2, _mask_acc_T_7) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381154:6]
    node mask_eq_8 = and(mask_eq_3, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 381155:6]
    node _mask_acc_T_8 = and(mask_size_2, mask_eq_8) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381156:6]
    node mask_lo_hi_lo = or(mask_acc_3, _mask_acc_T_8) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381157:6]
    node mask_eq_9 = and(mask_eq_3, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 381158:6]
    node _mask_acc_T_9 = and(mask_size_2, mask_eq_9) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381159:6]
    node mask_lo_hi_hi = or(mask_acc_3, _mask_acc_T_9) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381160:6]
    node mask_eq_10 = and(mask_eq_4, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 381161:6]
    node _mask_acc_T_10 = and(mask_size_2, mask_eq_10) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381162:6]
    node mask_hi_lo_lo = or(mask_acc_4, _mask_acc_T_10) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381163:6]
    node mask_eq_11 = and(mask_eq_4, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 381164:6]
    node _mask_acc_T_11 = and(mask_size_2, mask_eq_11) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381165:6]
    node mask_hi_lo_hi = or(mask_acc_4, _mask_acc_T_11) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381166:6]
    node mask_eq_12 = and(mask_eq_5, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 381167:6]
    node _mask_acc_T_12 = and(mask_size_2, mask_eq_12) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381168:6]
    node mask_hi_hi_lo = or(mask_acc_5, _mask_acc_T_12) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381169:6]
    node mask_eq_13 = and(mask_eq_5, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 381170:6]
    node _mask_acc_T_13 = and(mask_size_2, mask_eq_13) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 381171:6]
    node mask_hi_hi_hi = or(mask_acc_5, _mask_acc_T_13) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 381172:6]
    node mask = cat(cat(cat(mask_hi_hi_hi, mask_hi_hi_lo), cat(mask_hi_lo_hi, mask_hi_lo_lo)), cat(cat(mask_lo_hi_hi, mask_lo_hi_lo), cat(mask_lo_lo_hi, mask_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 381179:6]
    node _T_7 = cvt(io_in_a_bits_address) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 381183:6]
    node _T_15 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.SmallBoomConfig.fir 381195:6]
    node _T_17 = leq(io_in_a_bits_size, UInt<4>("hc")) @[Parameters.scala 92:42 chipyard.TestHarness.SmallBoomConfig.fir 381198:8]
    node _T_20 = and(_T_17, _source_ok_T) @[Parameters.scala 1160:30 chipyard.TestHarness.SmallBoomConfig.fir 381201:8]
    node _T_25 = and(_T_7, SInt<33>("h-101000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381206:8]
    node _T_26 = asSInt(_T_25) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381207:8]
    node _T_27 = eq(_T_26, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 381208:8]
    node _T_28 = xor(io_in_a_bits_address, UInt<32>("h3000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 381209:8]
    node _T_29 = cvt(_T_28) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 381210:8]
    node _T_30 = and(_T_29, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381211:8]
    node _T_31 = asSInt(_T_30) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381212:8]
    node _T_32 = eq(_T_31, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 381213:8]
    node _T_33 = xor(io_in_a_bits_address, UInt<32>("h10000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 381214:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 381215:8]
    node _T_35 = and(_T_34, SInt<33>("h-10000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381216:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381217:8]
    node _T_37 = eq(_T_36, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 381218:8]
    node _T_38 = xor(io_in_a_bits_address, UInt<32>("h2000000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 381219:8]
    node _T_39 = cvt(_T_38) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 381220:8]
    node _T_40 = and(_T_39, SInt<33>("h-10000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381221:8]
    node _T_41 = asSInt(_T_40) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381222:8]
    node _T_42 = eq(_T_41, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 381223:8]
    node _T_43 = xor(io_in_a_bits_address, UInt<32>("h2010000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 381224:8]
    node _T_44 = cvt(_T_43) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 381225:8]
    node _T_45 = and(_T_44, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381226:8]
    node _T_46 = asSInt(_T_45) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381227:8]
    node _T_47 = eq(_T_46, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 381228:8]
    node _T_48 = xor(io_in_a_bits_address, UInt<32>("hc000000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 381229:8]
    node _T_49 = cvt(_T_48) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 381230:8]
    node _T_50 = and(_T_49, SInt<33>("h-4000000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381231:8]
    node _T_51 = asSInt(_T_50) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381232:8]
    node _T_52 = eq(_T_51, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 381233:8]
    node _T_53 = xor(io_in_a_bits_address, UInt<32>("h54000000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 381234:8]
    node _T_54 = cvt(_T_53) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 381235:8]
    node _T_55 = and(_T_54, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381236:8]
    node _T_56 = asSInt(_T_55) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381237:8]
    node _T_57 = eq(_T_56, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 381238:8]
    node _T_58 = or(_T_27, _T_32) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381239:8]
    node _T_65 = eq(UInt<4>("h6"), io_in_a_bits_size) @[Parameters.scala 91:48 chipyard.TestHarness.SmallBoomConfig.fir 381246:8]
    node _T_67 = xor(io_in_a_bits_address, UInt<32>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 381248:8]
    node _T_68 = cvt(_T_67) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 381249:8]
    node _T_69 = and(_T_68, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381250:8]
    node _T_70 = asSInt(_T_69) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381251:8]
    node _T_71 = eq(_T_70, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 381252:8]
    node _T_72 = xor(io_in_a_bits_address, UInt<32>("h80000000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 381253:8]
    node _T_73 = cvt(_T_72) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 381254:8]
    node _T_74 = and(_T_73, SInt<33>("h-10000000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381255:8]
    node _T_75 = asSInt(_T_74) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 381256:8]
    node _T_76 = eq(_T_75, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 381257:8]
    node _T_77 = or(_T_71, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381258:8]
    node _T_78 = and(_T_65, _T_77) @[Parameters.scala 670:56 chipyard.TestHarness.SmallBoomConfig.fir 381259:8]
    node _T_81 = and(_T_20, _T_78) @[Monitor.scala 82:72 chipyard.TestHarness.SmallBoomConfig.fir 381262:8]
    node _T_83 = or(_T_81, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381264:8]
    node _T_84 = not(_T_83) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381265:8]
    node _T_147 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381332:8]
    node _T_149 = or(_source_ok_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381338:8]
    node _T_150 = not(_T_149) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381339:8]
    node _T_153 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381346:8]
    node _T_154 = not(_T_153) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381347:8]
    node _T_156 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381353:8]
    node _T_157 = not(_T_156) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381354:8]
    node _T_158 = leq(io_in_a_bits_param, UInt<3>("h2")) @[Bundles.scala 108:27 chipyard.TestHarness.SmallBoomConfig.fir 381359:8]
    node _T_160 = or(_T_158, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381361:8]
    node _T_161 = not(_T_160) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381362:8]
    node _T_162 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.SmallBoomConfig.fir 381367:8]
    node _T_163 = eq(_T_162, UInt<8>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.SmallBoomConfig.fir 381368:8]
    node _T_165 = or(_T_163, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381370:8]
    node _T_166 = not(_T_165) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381371:8]
    node _T_167 = not(io_in_a_bits_corrupt) @[Monitor.scala 89:18 chipyard.TestHarness.SmallBoomConfig.fir 381376:8]
    node _T_169 = or(_T_167, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381378:8]
    node _T_170 = not(_T_169) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381379:8]
    node _T_171 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.SmallBoomConfig.fir 381385:6]
    node _T_318 = neq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 99:31 chipyard.TestHarness.SmallBoomConfig.fir 381557:8]
    node _T_320 = or(_T_318, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381559:8]
    node _T_321 = not(_T_320) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381560:8]
    node _T_331 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.SmallBoomConfig.fir 381583:6]
    node _T_339 = or(_T_20, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381592:8]
    node _T_340 = not(_T_339) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381593:8]
    node _T_350 = and(_T_17, _T_32) @[Parameters.scala 670:56 chipyard.TestHarness.SmallBoomConfig.fir 381607:8]
    node _T_352 = leq(io_in_a_bits_size, UInt<4>("h6")) @[Parameters.scala 92:42 chipyard.TestHarness.SmallBoomConfig.fir 381609:8]
    node _T_395 = or(_T_27, _T_37) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381652:8]
    node _T_396 = or(_T_395, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381653:8]
    node _T_397 = or(_T_396, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381654:8]
    node _T_398 = or(_T_397, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381655:8]
    node _T_399 = or(_T_398, _T_71) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381656:8]
    node _T_400 = or(_T_399, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381657:8]
    node _T_401 = or(_T_400, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381658:8]
    node _T_402 = and(_T_352, _T_401) @[Parameters.scala 670:56 chipyard.TestHarness.SmallBoomConfig.fir 381659:8]
    node _T_404 = or(_T_350, _T_402) @[Parameters.scala 672:30 chipyard.TestHarness.SmallBoomConfig.fir 381661:8]
    node _T_406 = or(_T_404, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381663:8]
    node _T_407 = not(_T_406) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381664:8]
    node _T_414 = eq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 109:31 chipyard.TestHarness.SmallBoomConfig.fir 381683:8]
    node _T_416 = or(_T_414, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381685:8]
    node _T_417 = not(_T_416) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381686:8]
    node _T_418 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.SmallBoomConfig.fir 381691:8]
    node _T_420 = or(_T_418, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381693:8]
    node _T_421 = not(_T_420) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381694:8]
    node _T_426 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.SmallBoomConfig.fir 381708:6]
    node _T_482 = or(_T_27, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381765:8]
    node _T_483 = or(_T_482, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381766:8]
    node _T_484 = or(_T_483, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381767:8]
    node _T_485 = or(_T_484, _T_71) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381768:8]
    node _T_486 = or(_T_485, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381769:8]
    node _T_487 = or(_T_486, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381770:8]
    node _T_488 = and(_T_352, _T_487) @[Parameters.scala 670:56 chipyard.TestHarness.SmallBoomConfig.fir 381771:8]
    node _T_497 = or(_T_350, _T_488) @[Parameters.scala 672:30 chipyard.TestHarness.SmallBoomConfig.fir 381780:8]
    node _T_499 = and(_T_20, _T_497) @[Monitor.scala 115:71 chipyard.TestHarness.SmallBoomConfig.fir 381782:8]
    node _T_501 = or(_T_499, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381784:8]
    node _T_502 = not(_T_501) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381785:8]
    node _T_517 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.SmallBoomConfig.fir 381821:6]
    node _T_604 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.SmallBoomConfig.fir 381925:8]
    node _T_605 = and(io_in_a_bits_mask, _T_604) @[Monitor.scala 127:31 chipyard.TestHarness.SmallBoomConfig.fir 381926:8]
    node _T_606 = eq(_T_605, UInt<8>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.SmallBoomConfig.fir 381927:8]
    node _T_608 = or(_T_606, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381929:8]
    node _T_609 = not(_T_608) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381930:8]
    node _T_610 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.SmallBoomConfig.fir 381936:6]
    node _T_618 = leq(io_in_a_bits_size, UInt<4>("h3")) @[Parameters.scala 92:42 chipyard.TestHarness.SmallBoomConfig.fir 381945:8]
    node _T_662 = or(_T_58, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381989:8]
    node _T_663 = or(_T_662, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381990:8]
    node _T_664 = or(_T_663, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381991:8]
    node _T_665 = or(_T_664, _T_71) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381992:8]
    node _T_666 = or(_T_665, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381993:8]
    node _T_667 = or(_T_666, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 381994:8]
    node _T_668 = and(_T_618, _T_667) @[Parameters.scala 670:56 chipyard.TestHarness.SmallBoomConfig.fir 381995:8]
    node _T_678 = and(_T_20, _T_668) @[Monitor.scala 131:74 chipyard.TestHarness.SmallBoomConfig.fir 382005:8]
    node _T_680 = or(_T_678, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382007:8]
    node _T_681 = not(_T_680) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382008:8]
    node _T_688 = leq(io_in_a_bits_param, UInt<3>("h4")) @[Bundles.scala 138:33 chipyard.TestHarness.SmallBoomConfig.fir 382027:8]
    node _T_690 = or(_T_688, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382029:8]
    node _T_691 = not(_T_690) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382030:8]
    node _T_696 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.SmallBoomConfig.fir 382044:6]
    node _T_774 = leq(io_in_a_bits_param, UInt<3>("h3")) @[Bundles.scala 145:30 chipyard.TestHarness.SmallBoomConfig.fir 382135:8]
    node _T_776 = or(_T_774, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382137:8]
    node _T_777 = not(_T_776) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382138:8]
    node _T_782 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.SmallBoomConfig.fir 382152:6]
    node _T_851 = and(_T_352, _T_77) @[Parameters.scala 670:56 chipyard.TestHarness.SmallBoomConfig.fir 382222:8]
    node _T_854 = or(_T_350, _T_851) @[Parameters.scala 672:30 chipyard.TestHarness.SmallBoomConfig.fir 382225:8]
    node _T_855 = and(_T_20, _T_854) @[Monitor.scala 147:68 chipyard.TestHarness.SmallBoomConfig.fir 382226:8]
    node _T_857 = or(_T_855, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382228:8]
    node _T_858 = not(_T_857) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382229:8]
    node _T_865 = leq(io_in_a_bits_param, UInt<3>("h1")) @[Bundles.scala 158:28 chipyard.TestHarness.SmallBoomConfig.fir 382248:8]
    node _T_867 = or(_T_865, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382250:8]
    node _T_868 = not(_T_867) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382251:8]
    node _T_877 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.SmallBoomConfig.fir 382275:6]
    node _T_879 = or(_T_877, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382277:6]
    node _T_880 = not(_T_879) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382278:6]
    node _source_ok_T_1 = not(io_in_d_bits_source) @[Parameters.scala 46:9 chipyard.TestHarness.SmallBoomConfig.fir 382283:6]
    node _T_881 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.SmallBoomConfig.fir 382288:6]
    node _T_883 = or(_source_ok_T_1, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382291:8]
    node _T_884 = not(_T_883) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382292:8]
    node _T_885 = geq(io_in_d_bits_size, UInt<4>("h3")) @[Monitor.scala 312:27 chipyard.TestHarness.SmallBoomConfig.fir 382297:8]
    node _T_887 = or(_T_885, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382299:8]
    node _T_888 = not(_T_887) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382300:8]
    node _T_889 = eq(io_in_d_bits_param, UInt<2>("h0")) @[Monitor.scala 313:28 chipyard.TestHarness.SmallBoomConfig.fir 382305:8]
    node _T_891 = or(_T_889, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382307:8]
    node _T_892 = not(_T_891) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382308:8]
    node _T_893 = not(io_in_d_bits_corrupt) @[Monitor.scala 314:15 chipyard.TestHarness.SmallBoomConfig.fir 382313:8]
    node _T_895 = or(_T_893, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382315:8]
    node _T_896 = not(_T_895) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382316:8]
    node _T_897 = not(io_in_d_bits_denied) @[Monitor.scala 315:15 chipyard.TestHarness.SmallBoomConfig.fir 382321:8]
    node _T_899 = or(_T_897, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382323:8]
    node _T_900 = not(_T_899) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382324:8]
    node _T_901 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.SmallBoomConfig.fir 382330:6]
    node _T_912 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 102:26 chipyard.TestHarness.SmallBoomConfig.fir 382354:8]
    node _T_914 = or(_T_912, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382356:8]
    node _T_915 = not(_T_914) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382357:8]
    node _T_916 = neq(io_in_d_bits_param, UInt<2>("h2")) @[Monitor.scala 323:28 chipyard.TestHarness.SmallBoomConfig.fir 382362:8]
    node _T_918 = or(_T_916, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382364:8]
    node _T_919 = not(_T_918) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382365:8]
    node _T_929 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.SmallBoomConfig.fir 382388:6]
    node _T_949 = or(_T_897, io_in_d_bits_corrupt) @[Monitor.scala 334:30 chipyard.TestHarness.SmallBoomConfig.fir 382429:8]
    node _T_951 = or(_T_949, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382431:8]
    node _T_952 = not(_T_951) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382432:8]
    node _T_958 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.SmallBoomConfig.fir 382447:6]
    node _T_975 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.SmallBoomConfig.fir 382482:6]
    node _T_993 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.SmallBoomConfig.fir 382518:6]
    node _a_first_T = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 382584:4]
    node a_first_beats1_decode = shr(is_aligned_mask, 3) @[Edges.scala 219:59 chipyard.TestHarness.SmallBoomConfig.fir 382589:4]
    node _a_first_beats1_opdata_T = bits(io_in_a_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.SmallBoomConfig.fir 382590:4]
    node a_first_beats1_opdata = not(_a_first_beats1_opdata_T) @[Edges.scala 91:28 chipyard.TestHarness.SmallBoomConfig.fir 382591:4]
    node a_first_beats1 = mux(a_first_beats1_opdata, a_first_beats1_decode, UInt<9>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.SmallBoomConfig.fir 382592:4]
    reg a_first_counter : UInt<9>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382593:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 382594:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 382595:4]
    node a_first = eq(a_first_counter, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 382596:4]
    node _a_first_counter_T = mux(a_first, a_first_beats1, a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 382604:6]
    node _GEN_0 = mux(_a_first_T, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 382603:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 382605:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382593:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.SmallBoomConfig.fir 382607:4]
    reg param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), param) @[Monitor.scala 385:22 chipyard.TestHarness.SmallBoomConfig.fir 382608:4]
    reg size : UInt<4>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.SmallBoomConfig.fir 382609:4]
    reg source : UInt<1>, clock with :
      reset => (UInt<1>("h0"), source) @[Monitor.scala 387:22 chipyard.TestHarness.SmallBoomConfig.fir 382610:4]
    reg address : UInt<32>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.SmallBoomConfig.fir 382611:4]
    node _T_1022 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.SmallBoomConfig.fir 382612:4]
    node _T_1023 = and(io_in_a_valid, _T_1022) @[Monitor.scala 389:19 chipyard.TestHarness.SmallBoomConfig.fir 382613:4]
    node _T_1024 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.SmallBoomConfig.fir 382615:6]
    node _T_1026 = or(_T_1024, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382617:6]
    node _T_1027 = not(_T_1026) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382618:6]
    node _T_1028 = eq(io_in_a_bits_param, param) @[Monitor.scala 391:32 chipyard.TestHarness.SmallBoomConfig.fir 382623:6]
    node _T_1030 = or(_T_1028, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382625:6]
    node _T_1031 = not(_T_1030) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382626:6]
    node _T_1032 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.SmallBoomConfig.fir 382631:6]
    node _T_1034 = or(_T_1032, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382633:6]
    node _T_1035 = not(_T_1034) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382634:6]
    node _T_1036 = eq(io_in_a_bits_source, source) @[Monitor.scala 393:32 chipyard.TestHarness.SmallBoomConfig.fir 382639:6]
    node _T_1038 = or(_T_1036, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382641:6]
    node _T_1039 = not(_T_1038) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382642:6]
    node _T_1040 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.SmallBoomConfig.fir 382647:6]
    node _T_1042 = or(_T_1040, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382649:6]
    node _T_1043 = not(_T_1042) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382650:6]
    node _T_1045 = and(_a_first_T, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.SmallBoomConfig.fir 382657:4]
    node _d_first_T = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 382665:4]
    node _d_first_beats1_decode_T_1 = dshlw(UInt<27>("hfff"), io_in_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.SmallBoomConfig.fir 382667:4]
    node _d_first_beats1_decode_T_2 = bits(_d_first_beats1_decode_T_1, 11, 0) @[package.scala 234:82 chipyard.TestHarness.SmallBoomConfig.fir 382668:4]
    node _d_first_beats1_decode_T_3 = not(_d_first_beats1_decode_T_2) @[package.scala 234:46 chipyard.TestHarness.SmallBoomConfig.fir 382669:4]
    node d_first_beats1_decode = shr(_d_first_beats1_decode_T_3, 3) @[Edges.scala 219:59 chipyard.TestHarness.SmallBoomConfig.fir 382670:4]
    node d_first_beats1_opdata = bits(io_in_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.SmallBoomConfig.fir 382671:4]
    node d_first_beats1 = mux(d_first_beats1_opdata, d_first_beats1_decode, UInt<9>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.SmallBoomConfig.fir 382672:4]
    reg d_first_counter : UInt<9>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382673:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 382674:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 382675:4]
    node d_first = eq(d_first_counter, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 382676:4]
    node _d_first_counter_T = mux(d_first, d_first_beats1, d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 382684:6]
    node _GEN_6 = mux(_d_first_T, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 382683:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 382685:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382673:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.SmallBoomConfig.fir 382687:4]
    reg param_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), param_1) @[Monitor.scala 536:22 chipyard.TestHarness.SmallBoomConfig.fir 382688:4]
    reg size_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.SmallBoomConfig.fir 382689:4]
    reg source_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.SmallBoomConfig.fir 382690:4]
    reg sink : UInt<3>, clock with :
      reset => (UInt<1>("h0"), sink) @[Monitor.scala 539:22 chipyard.TestHarness.SmallBoomConfig.fir 382691:4]
    reg denied : UInt<1>, clock with :
      reset => (UInt<1>("h0"), denied) @[Monitor.scala 540:22 chipyard.TestHarness.SmallBoomConfig.fir 382692:4]
    node _T_1046 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.SmallBoomConfig.fir 382693:4]
    node _T_1047 = and(io_in_d_valid, _T_1046) @[Monitor.scala 541:19 chipyard.TestHarness.SmallBoomConfig.fir 382694:4]
    node _T_1048 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.SmallBoomConfig.fir 382696:6]
    node _T_1050 = or(_T_1048, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382698:6]
    node _T_1051 = not(_T_1050) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382699:6]
    node _T_1052 = eq(io_in_d_bits_param, param_1) @[Monitor.scala 543:29 chipyard.TestHarness.SmallBoomConfig.fir 382704:6]
    node _T_1054 = or(_T_1052, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382706:6]
    node _T_1055 = not(_T_1054) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382707:6]
    node _T_1056 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.SmallBoomConfig.fir 382712:6]
    node _T_1058 = or(_T_1056, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382714:6]
    node _T_1059 = not(_T_1058) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382715:6]
    node _T_1060 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.SmallBoomConfig.fir 382720:6]
    node _T_1062 = or(_T_1060, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382722:6]
    node _T_1063 = not(_T_1062) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382723:6]
    node _T_1064 = eq(io_in_d_bits_sink, sink) @[Monitor.scala 546:29 chipyard.TestHarness.SmallBoomConfig.fir 382728:6]
    node _T_1066 = or(_T_1064, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382730:6]
    node _T_1067 = not(_T_1066) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382731:6]
    node _T_1068 = eq(io_in_d_bits_denied, denied) @[Monitor.scala 547:29 chipyard.TestHarness.SmallBoomConfig.fir 382736:6]
    node _T_1070 = or(_T_1068, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382738:6]
    node _T_1071 = not(_T_1070) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382739:6]
    node _T_1073 = and(_d_first_T, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.SmallBoomConfig.fir 382746:4]
    reg inflight : UInt<1>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 382755:4]
    reg inflight_opcodes : UInt<4>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 382756:4]
    reg inflight_sizes : UInt<8>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 382757:4]
    reg a_first_counter_1 : UInt<9>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382767:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 382768:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 382769:4]
    node a_first_1 = eq(a_first_counter_1, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 382770:4]
    node _a_first_counter_T_1 = mux(a_first_1, a_first_beats1, a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 382778:6]
    node _GEN_13 = mux(_a_first_T, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 382777:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 382779:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382767:4]
    reg d_first_counter_1 : UInt<9>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382789:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 382790:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 382791:4]
    node d_first_1 = eq(d_first_counter_1, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 382792:4]
    node _d_first_counter_T_1 = mux(d_first_1, d_first_beats1, d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 382800:6]
    node _GEN_14 = mux(_d_first_T, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 382799:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 382801:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382789:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.SmallBoomConfig.fir 382813:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 4) @[Monitor.scala 634:69 chipyard.TestHarness.SmallBoomConfig.fir 382813:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.SmallBoomConfig.fir 382814:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 382817:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 382818:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_1, 16) @[Monitor.scala 634:97 chipyard.TestHarness.SmallBoomConfig.fir 382819:4]
    node _a_opcode_lookup_T_6 = and(_GEN_73, _a_opcode_lookup_T_5) @[Monitor.scala 634:97 chipyard.TestHarness.SmallBoomConfig.fir 382819:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.SmallBoomConfig.fir 382820:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 16) @[Monitor.scala 634:152 chipyard.TestHarness.SmallBoomConfig.fir 382820:4]
    node _a_size_lookup_T = shl(io_in_d_bits_source, 3) @[Monitor.scala 638:65 chipyard.TestHarness.SmallBoomConfig.fir 382824:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_size_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.SmallBoomConfig.fir 382825:4]
    node _a_size_lookup_T_4 = sub(UInt<16>("h100"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 382828:4]
    node _a_size_lookup_T_5 = tail(_a_size_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 382829:4]
    node _GEN_75 = pad(_a_size_lookup_T_1, 16) @[Monitor.scala 638:91 chipyard.TestHarness.SmallBoomConfig.fir 382830:4]
    node _a_size_lookup_T_6 = and(_GEN_75, _a_size_lookup_T_5) @[Monitor.scala 638:91 chipyard.TestHarness.SmallBoomConfig.fir 382830:4]
    node _GEN_76 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.SmallBoomConfig.fir 382831:4]
    node _a_size_lookup_T_7 = pad(_GEN_76, 16) @[Monitor.scala 638:144 chipyard.TestHarness.SmallBoomConfig.fir 382831:4]
    node _T_1074 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.SmallBoomConfig.fir 382855:4]
    node _a_set_wo_ready_T = dshlw(UInt<2>("h1"), io_in_a_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.SmallBoomConfig.fir 382858:6]
    node _GEN_15 = mux(_T_1074, _a_set_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.SmallBoomConfig.fir 382857:4 Monitor.scala 649:22 chipyard.TestHarness.SmallBoomConfig.fir 382859:6 chipyard.TestHarness.SmallBoomConfig.fir 382806:4]
    node _T_1077 = and(_a_first_T, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.SmallBoomConfig.fir 382862:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.SmallBoomConfig.fir 382867:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.SmallBoomConfig.fir 382868:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.SmallBoomConfig.fir 382870:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<5>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.SmallBoomConfig.fir 382871:6]
    node _GEN_77 = shl(io_in_a_bits_source, 2) @[Monitor.scala 656:79 chipyard.TestHarness.SmallBoomConfig.fir 382873:6]
    node _a_opcodes_set_T = pad(_GEN_77, 4) @[Monitor.scala 656:79 chipyard.TestHarness.SmallBoomConfig.fir 382873:6]
    node a_opcodes_set_interm = mux(_T_1077, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 382864:4 Monitor.scala 654:28 chipyard.TestHarness.SmallBoomConfig.fir 382869:6 chipyard.TestHarness.SmallBoomConfig.fir 382852:4]
    node _GEN_78 = pad(a_opcodes_set_interm, 19) @[Monitor.scala 656:54 chipyard.TestHarness.SmallBoomConfig.fir 382874:6]
    node _a_opcodes_set_T_1 = dshlw(_GEN_78, _a_opcodes_set_T) @[Monitor.scala 656:54 chipyard.TestHarness.SmallBoomConfig.fir 382874:6]
    node _a_sizes_set_T = shl(io_in_a_bits_source, 3) @[Monitor.scala 657:77 chipyard.TestHarness.SmallBoomConfig.fir 382876:6]
    node a_sizes_set_interm = mux(_T_1077, _a_sizes_set_interm_T_1, UInt<5>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 382864:4 Monitor.scala 655:28 chipyard.TestHarness.SmallBoomConfig.fir 382872:6 chipyard.TestHarness.SmallBoomConfig.fir 382854:4]
    node _GEN_79 = pad(a_sizes_set_interm, 20) @[Monitor.scala 657:52 chipyard.TestHarness.SmallBoomConfig.fir 382877:6]
    node _a_sizes_set_T_1 = dshlw(_GEN_79, _a_sizes_set_T) @[Monitor.scala 657:52 chipyard.TestHarness.SmallBoomConfig.fir 382877:6]
    node _T_1079 = dshr(inflight, io_in_a_bits_source) @[Monitor.scala 658:26 chipyard.TestHarness.SmallBoomConfig.fir 382879:6]
    node _T_1081 = not(_T_1079) @[Monitor.scala 658:17 chipyard.TestHarness.SmallBoomConfig.fir 382881:6]
    node _T_1083 = or(_T_1081, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382883:6]
    node _T_1084 = not(_T_1083) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382884:6]
    node _GEN_16 = mux(_T_1077, _a_set_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 382864:4 Monitor.scala 653:28 chipyard.TestHarness.SmallBoomConfig.fir 382866:6 chipyard.TestHarness.SmallBoomConfig.fir 382804:4]
    node _GEN_19 = mux(_T_1077, _a_opcodes_set_T_1, UInt<19>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 382864:4 Monitor.scala 656:28 chipyard.TestHarness.SmallBoomConfig.fir 382875:6 chipyard.TestHarness.SmallBoomConfig.fir 382808:4]
    node _GEN_20 = mux(_T_1077, _a_sizes_set_T_1, UInt<20>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 382864:4 Monitor.scala 657:28 chipyard.TestHarness.SmallBoomConfig.fir 382878:6 chipyard.TestHarness.SmallBoomConfig.fir 382810:4]
    node _T_1085 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.SmallBoomConfig.fir 382899:4]
    node _T_1087 = not(_T_881) @[Monitor.scala 671:74 chipyard.TestHarness.SmallBoomConfig.fir 382901:4]
    node _T_1088 = and(_T_1085, _T_1087) @[Monitor.scala 671:71 chipyard.TestHarness.SmallBoomConfig.fir 382902:4]
    node _d_clr_wo_ready_T = dshlw(UInt<2>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.SmallBoomConfig.fir 382904:6]
    node _GEN_21 = mux(_T_1088, _d_clr_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.SmallBoomConfig.fir 382903:4 Monitor.scala 672:22 chipyard.TestHarness.SmallBoomConfig.fir 382905:6 chipyard.TestHarness.SmallBoomConfig.fir 382893:4]
    node _T_1090 = and(_d_first_T, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.SmallBoomConfig.fir 382908:4]
    node _T_1093 = and(_T_1090, _T_1087) @[Monitor.scala 675:72 chipyard.TestHarness.SmallBoomConfig.fir 382911:4]
    node _GEN_81 = pad(_a_opcode_lookup_T_5, 31) @[Monitor.scala 677:76 chipyard.TestHarness.SmallBoomConfig.fir 382920:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_81, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.SmallBoomConfig.fir 382920:6]
    node _GEN_82 = pad(_a_size_lookup_T_5, 31) @[Monitor.scala 678:74 chipyard.TestHarness.SmallBoomConfig.fir 382927:6]
    node _d_sizes_clr_T_5 = dshlw(_GEN_82, _a_size_lookup_T) @[Monitor.scala 678:74 chipyard.TestHarness.SmallBoomConfig.fir 382927:6]
    node _GEN_22 = mux(_T_1093, _d_clr_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.SmallBoomConfig.fir 382912:4 Monitor.scala 676:21 chipyard.TestHarness.SmallBoomConfig.fir 382914:6 chipyard.TestHarness.SmallBoomConfig.fir 382891:4]
    node _GEN_23 = mux(_T_1093, _d_opcodes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.SmallBoomConfig.fir 382912:4 Monitor.scala 677:21 chipyard.TestHarness.SmallBoomConfig.fir 382921:6 chipyard.TestHarness.SmallBoomConfig.fir 382895:4]
    node _GEN_24 = mux(_T_1093, _d_sizes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.SmallBoomConfig.fir 382912:4 Monitor.scala 678:21 chipyard.TestHarness.SmallBoomConfig.fir 382928:6 chipyard.TestHarness.SmallBoomConfig.fir 382897:4]
    node _same_cycle_resp_T_2 = eq(io_in_a_bits_source, io_in_d_bits_source) @[Monitor.scala 681:113 chipyard.TestHarness.SmallBoomConfig.fir 382937:6]
    node same_cycle_resp = and(_T_1074, _same_cycle_resp_T_2) @[Monitor.scala 681:88 chipyard.TestHarness.SmallBoomConfig.fir 382938:6]
    node _T_1098 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.SmallBoomConfig.fir 382939:6]
    node _T_1100 = or(_T_1098, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.SmallBoomConfig.fir 382941:6]
    node _T_1102 = or(_T_1100, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382943:6]
    node _T_1103 = not(_T_1102) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382944:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 382950:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 382950:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 382950:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 382950:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 382950:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 382950:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 382950:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 382950:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 382950:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 382950:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 382950:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 382950:8]
    node _T_1104 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 382950:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 382951:8 Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 382951:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 382951:8 Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 382951:8]
    node _T_1105 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 382951:8]
    node _T_1106 = or(_T_1104, _T_1105) @[Monitor.scala 685:77 chipyard.TestHarness.SmallBoomConfig.fir 382952:8]
    node _T_1108 = or(_T_1106, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382954:8]
    node _T_1109 = not(_T_1108) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382955:8]
    node _T_1110 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.SmallBoomConfig.fir 382960:8]
    node _T_1112 = or(_T_1110, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382962:8]
    node _T_1113 = not(_T_1112) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382963:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 382811:4 Monitor.scala 634:21 chipyard.TestHarness.SmallBoomConfig.fir 382821:4]
    node _T_1114 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 382970:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_1114), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 382971:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 382971:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_1114), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 382971:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 382971:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_1114), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 382971:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 382971:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_1114), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 382971:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 382971:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_1114), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 382971:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 382971:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_1114), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 382971:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 382971:8]
    node _T_1115 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 382971:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_1114), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 382973:8 Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 382973:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_1114), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 382973:8 Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 382973:8]
    node _T_1117 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 382973:8]
    node _T_1118 = or(_T_1115, _T_1117) @[Monitor.scala 689:72 chipyard.TestHarness.SmallBoomConfig.fir 382974:8]
    node _T_1120 = or(_T_1118, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382976:8]
    node _T_1121 = not(_T_1120) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382977:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 7, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 382822:4 Monitor.scala 638:19 chipyard.TestHarness.SmallBoomConfig.fir 382832:4]
    node _GEN_83 = pad(io_in_d_bits_size, 8) @[Monitor.scala 691:36 chipyard.TestHarness.SmallBoomConfig.fir 382982:8]
    node _T_1122 = eq(_GEN_83, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.SmallBoomConfig.fir 382982:8]
    node _T_1124 = or(_T_1122, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382984:8]
    node _T_1125 = not(_T_1124) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382985:8]
    node _T_1127 = and(_T_1085, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.SmallBoomConfig.fir 382993:4]
    node _T_1128 = and(_T_1127, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.SmallBoomConfig.fir 382994:4]
    node _T_1130 = and(_T_1128, _same_cycle_resp_T_2) @[Monitor.scala 694:65 chipyard.TestHarness.SmallBoomConfig.fir 382996:4]
    node _T_1132 = and(_T_1130, _T_1087) @[Monitor.scala 694:116 chipyard.TestHarness.SmallBoomConfig.fir 382998:4]
    node _T_1133 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.SmallBoomConfig.fir 383000:6]
    node _T_1134 = or(_T_1133, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.SmallBoomConfig.fir 383001:6]
    node _T_1136 = or(_T_1134, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383003:6]
    node _T_1137 = not(_T_1136) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383004:6]
    node a_set_wo_ready = bits(_GEN_15, 0, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 382805:4]
    node d_clr_wo_ready = bits(_GEN_21, 0, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 382892:4]
    node _T_1138 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.SmallBoomConfig.fir 383010:4]
    node _T_1139 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.SmallBoomConfig.fir 383011:4]
    node _T_1140 = not(_T_1139) @[Monitor.scala 699:51 chipyard.TestHarness.SmallBoomConfig.fir 383012:4]
    node _T_1141 = or(_T_1138, _T_1140) @[Monitor.scala 699:48 chipyard.TestHarness.SmallBoomConfig.fir 383013:4]
    node _T_1143 = or(_T_1141, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383015:4]
    node _T_1144 = not(_T_1143) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383016:4]
    node a_set = bits(_GEN_16, 0, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 382803:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.SmallBoomConfig.fir 383021:4]
    node d_clr = bits(_GEN_22, 0, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 382890:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.SmallBoomConfig.fir 383022:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.SmallBoomConfig.fir 383023:4]
    node a_opcodes_set = bits(_GEN_19, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 382807:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.SmallBoomConfig.fir 383025:4]
    node d_opcodes_clr = bits(_GEN_23, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 382894:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.SmallBoomConfig.fir 383026:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.SmallBoomConfig.fir 383027:4]
    node a_sizes_set = bits(_GEN_20, 7, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 382809:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.SmallBoomConfig.fir 383029:4]
    node d_sizes_clr = bits(_GEN_24, 7, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 382896:4]
    node _inflight_sizes_T_1 = not(d_sizes_clr) @[Monitor.scala 704:56 chipyard.TestHarness.SmallBoomConfig.fir 383030:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_sizes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.SmallBoomConfig.fir 383031:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 383033:4]
    node _T_1145 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.SmallBoomConfig.fir 383036:4]
    node _T_1146 = not(_T_1145) @[Monitor.scala 709:16 chipyard.TestHarness.SmallBoomConfig.fir 383037:4]
    node _T_1147 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.SmallBoomConfig.fir 383038:4]
    node _T_1148 = or(_T_1146, _T_1147) @[Monitor.scala 709:30 chipyard.TestHarness.SmallBoomConfig.fir 383039:4]
    node _T_1149 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.SmallBoomConfig.fir 383040:4]
    node _T_1150 = or(_T_1148, _T_1149) @[Monitor.scala 709:47 chipyard.TestHarness.SmallBoomConfig.fir 383041:4]
    node _T_1152 = or(_T_1150, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 383043:4]
    node _T_1153 = not(_T_1152) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 383044:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.SmallBoomConfig.fir 383049:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.SmallBoomConfig.fir 383050:4]
    node _T_1156 = or(_a_first_T, _d_first_T) @[Monitor.scala 712:27 chipyard.TestHarness.SmallBoomConfig.fir 383054:4]
    node _GEN_57 = mux(_T_1156, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.SmallBoomConfig.fir 383055:4 Monitor.scala 712:58 chipyard.TestHarness.SmallBoomConfig.fir 383056:6 Monitor.scala 711:14 chipyard.TestHarness.SmallBoomConfig.fir 383051:4]
    reg inflight_sizes_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 383060:4]
    reg d_first_counter_2 : UInt<9>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 383095:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 383096:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 383097:4]
    node d_first_2 = eq(d_first_counter_2, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 383098:4]
    node _d_first_counter_T_2 = mux(d_first_2, d_first_beats1, d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 383106:6]
    node _GEN_59 = mux(_d_first_T, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 383105:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 383107:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 383095:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_size_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.SmallBoomConfig.fir 383131:4]
    node _GEN_87 = pad(_c_size_lookup_T_1, 16) @[Monitor.scala 747:93 chipyard.TestHarness.SmallBoomConfig.fir 383136:4]
    node _c_size_lookup_T_6 = and(_GEN_87, _a_size_lookup_T_5) @[Monitor.scala 747:93 chipyard.TestHarness.SmallBoomConfig.fir 383136:4]
    node _GEN_88 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.SmallBoomConfig.fir 383137:4]
    node _c_size_lookup_T_7 = pad(_GEN_88, 16) @[Monitor.scala 747:146 chipyard.TestHarness.SmallBoomConfig.fir 383137:4]
    node _T_1174 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.SmallBoomConfig.fir 383215:4]
    node _T_1176 = and(_T_1174, _T_881) @[Monitor.scala 779:71 chipyard.TestHarness.SmallBoomConfig.fir 383217:4]
    node _T_1178 = and(_d_first_T, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.SmallBoomConfig.fir 383223:4]
    node _T_1180 = and(_T_1178, _T_881) @[Monitor.scala 783:72 chipyard.TestHarness.SmallBoomConfig.fir 383225:4]
    node _GEN_69 = mux(_T_1180, _d_sizes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.SmallBoomConfig.fir 383226:4 Monitor.scala 786:21 chipyard.TestHarness.SmallBoomConfig.fir 383242:6 chipyard.TestHarness.SmallBoomConfig.fir 383213:4]
    node _T_1184 = dshr(UInt<1>("h0"), io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.SmallBoomConfig.fir 383261:6]
    node _T_1188 = or(_T_1184, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383265:6]
    node _T_1189 = not(_T_1188) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383266:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 7, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 383119:4 Monitor.scala 747:21 chipyard.TestHarness.SmallBoomConfig.fir 383138:4]
    node _T_1194 = eq(_GEN_83, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.SmallBoomConfig.fir 383284:8]
    node _T_1196 = or(_T_1194, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383286:8]
    node _T_1197 = not(_T_1196) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383287:8]
    node d_sizes_clr_1 = bits(_GEN_69, 7, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 383212:4]
    node _inflight_sizes_T_4 = not(d_sizes_clr_1) @[Monitor.scala 811:58 chipyard.TestHarness.SmallBoomConfig.fir 383337:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_sizes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.SmallBoomConfig.fir 383338:4]
    a_first_counter <= mux(reset, UInt<9>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382593:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382593:4]
    opcode <= mux(_T_1045, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 382658:4 Monitor.scala 397:15 chipyard.TestHarness.SmallBoomConfig.fir 382659:6 Monitor.scala 384:22 chipyard.TestHarness.SmallBoomConfig.fir 382607:4]
    param <= mux(_T_1045, io_in_a_bits_param, param) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 382658:4 Monitor.scala 398:15 chipyard.TestHarness.SmallBoomConfig.fir 382660:6 Monitor.scala 385:22 chipyard.TestHarness.SmallBoomConfig.fir 382608:4]
    size <= mux(_T_1045, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 382658:4 Monitor.scala 399:15 chipyard.TestHarness.SmallBoomConfig.fir 382661:6 Monitor.scala 386:22 chipyard.TestHarness.SmallBoomConfig.fir 382609:4]
    source <= mux(_T_1045, io_in_a_bits_source, source) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 382658:4 Monitor.scala 400:15 chipyard.TestHarness.SmallBoomConfig.fir 382662:6 Monitor.scala 387:22 chipyard.TestHarness.SmallBoomConfig.fir 382610:4]
    address <= mux(_T_1045, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 382658:4 Monitor.scala 401:15 chipyard.TestHarness.SmallBoomConfig.fir 382663:6 Monitor.scala 388:22 chipyard.TestHarness.SmallBoomConfig.fir 382611:4]
    d_first_counter <= mux(reset, UInt<9>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382673:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382673:4]
    opcode_1 <= mux(_T_1073, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 382747:4 Monitor.scala 550:15 chipyard.TestHarness.SmallBoomConfig.fir 382748:6 Monitor.scala 535:22 chipyard.TestHarness.SmallBoomConfig.fir 382687:4]
    param_1 <= mux(_T_1073, io_in_d_bits_param, param_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 382747:4 Monitor.scala 551:15 chipyard.TestHarness.SmallBoomConfig.fir 382749:6 Monitor.scala 536:22 chipyard.TestHarness.SmallBoomConfig.fir 382688:4]
    size_1 <= mux(_T_1073, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 382747:4 Monitor.scala 552:15 chipyard.TestHarness.SmallBoomConfig.fir 382750:6 Monitor.scala 537:22 chipyard.TestHarness.SmallBoomConfig.fir 382689:4]
    source_1 <= mux(_T_1073, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 382747:4 Monitor.scala 553:15 chipyard.TestHarness.SmallBoomConfig.fir 382751:6 Monitor.scala 538:22 chipyard.TestHarness.SmallBoomConfig.fir 382690:4]
    sink <= mux(_T_1073, io_in_d_bits_sink, sink) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 382747:4 Monitor.scala 554:15 chipyard.TestHarness.SmallBoomConfig.fir 382752:6 Monitor.scala 539:22 chipyard.TestHarness.SmallBoomConfig.fir 382691:4]
    denied <= mux(_T_1073, io_in_d_bits_denied, denied) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 382747:4 Monitor.scala 555:15 chipyard.TestHarness.SmallBoomConfig.fir 382753:6 Monitor.scala 540:22 chipyard.TestHarness.SmallBoomConfig.fir 382692:4]
    inflight <= mux(reset, UInt<1>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 382755:4 Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 382755:4 Monitor.scala 702:14 chipyard.TestHarness.SmallBoomConfig.fir 383024:4]
    inflight_opcodes <= mux(reset, UInt<4>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 382756:4 Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 382756:4 Monitor.scala 703:22 chipyard.TestHarness.SmallBoomConfig.fir 383028:4]
    inflight_sizes <= mux(reset, UInt<8>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 382757:4 Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 382757:4 Monitor.scala 704:20 chipyard.TestHarness.SmallBoomConfig.fir 383032:4]
    a_first_counter_1 <= mux(reset, UInt<9>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382767:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382767:4]
    d_first_counter_1 <= mux(reset, UInt<9>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382789:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 382789:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 383033:4 Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 383033:4]
    inflight_sizes_1 <= mux(reset, UInt<8>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 383060:4 Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 383060:4 Monitor.scala 811:22 chipyard.TestHarness.SmallBoomConfig.fir 383339:4]
    d_first_counter_2 <= mux(reset, UInt<9>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 383095:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 383095:4]
    node _GEN_93 = and(io_in_a_valid, _T_15) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381267:10]
    printf(clock, and(_GEN_93, _T_84), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381267:10]
    stop(clock, and(_GEN_93, _T_84), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381268:10]
    printf(clock, and(_GEN_93, _T_147), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381334:10]
    stop(clock, and(_GEN_93, _T_147), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381335:10]
    printf(clock, and(_GEN_93, _T_150), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381341:10]
    stop(clock, and(_GEN_93, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381342:10]
    printf(clock, and(_GEN_93, _T_154), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381349:10]
    stop(clock, and(_GEN_93, _T_154), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381350:10]
    printf(clock, and(_GEN_93, _T_157), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381356:10]
    stop(clock, and(_GEN_93, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381357:10]
    printf(clock, and(_GEN_93, _T_161), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381364:10]
    stop(clock, and(_GEN_93, _T_161), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381365:10]
    printf(clock, and(_GEN_93, _T_166), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381373:10]
    stop(clock, and(_GEN_93, _T_166), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381374:10]
    printf(clock, and(_GEN_93, _T_170), "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381381:10]
    stop(clock, and(_GEN_93, _T_170), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381382:10]
    node _GEN_109 = and(io_in_a_valid, _T_171) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381457:10]
    printf(clock, and(_GEN_109, _T_84), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381457:10]
    stop(clock, and(_GEN_109, _T_84), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381458:10]
    printf(clock, and(_GEN_109, _T_147), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381524:10]
    stop(clock, and(_GEN_109, _T_147), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381525:10]
    printf(clock, and(_GEN_109, _T_150), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381531:10]
    stop(clock, and(_GEN_109, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381532:10]
    printf(clock, and(_GEN_109, _T_154), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381539:10]
    stop(clock, and(_GEN_109, _T_154), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381540:10]
    printf(clock, and(_GEN_109, _T_157), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381546:10]
    stop(clock, and(_GEN_109, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381547:10]
    printf(clock, and(_GEN_109, _T_161), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381554:10]
    stop(clock, and(_GEN_109, _T_161), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381555:10]
    printf(clock, and(_GEN_109, _T_321), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381562:10]
    stop(clock, and(_GEN_109, _T_321), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381563:10]
    printf(clock, and(_GEN_109, _T_166), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381571:10]
    stop(clock, and(_GEN_109, _T_166), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381572:10]
    printf(clock, and(_GEN_109, _T_170), "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381579:10]
    stop(clock, and(_GEN_109, _T_170), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381580:10]
    node _GEN_127 = and(io_in_a_valid, _T_331) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381595:10]
    printf(clock, and(_GEN_127, _T_340), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381595:10]
    stop(clock, and(_GEN_127, _T_340), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381596:10]
    printf(clock, and(_GEN_127, _T_407), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381666:10]
    stop(clock, and(_GEN_127, _T_407), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381667:10]
    printf(clock, and(_GEN_127, _T_150), "Assertion failed: 'A' channel Get carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381673:10]
    stop(clock, and(_GEN_127, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381674:10]
    printf(clock, and(_GEN_127, _T_157), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381680:10]
    stop(clock, and(_GEN_127, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381681:10]
    printf(clock, and(_GEN_127, _T_417), "Assertion failed: 'A' channel Get carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381688:10]
    stop(clock, and(_GEN_127, _T_417), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381689:10]
    printf(clock, and(_GEN_127, _T_421), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381696:10]
    stop(clock, and(_GEN_127, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381697:10]
    printf(clock, and(_GEN_127, _T_170), "Assertion failed: 'A' channel Get is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381704:10]
    stop(clock, and(_GEN_127, _T_170), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381705:10]
    node _GEN_141 = and(io_in_a_valid, _T_426) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381787:10]
    printf(clock, and(_GEN_141, _T_502), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381787:10]
    stop(clock, and(_GEN_141, _T_502), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381788:10]
    printf(clock, and(_GEN_141, _T_150), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381794:10]
    stop(clock, and(_GEN_141, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381795:10]
    printf(clock, and(_GEN_141, _T_157), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381801:10]
    stop(clock, and(_GEN_141, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381802:10]
    printf(clock, and(_GEN_141, _T_417), "Assertion failed: 'A' channel PutFull carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381809:10]
    stop(clock, and(_GEN_141, _T_417), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381810:10]
    printf(clock, and(_GEN_141, _T_421), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381817:10]
    stop(clock, and(_GEN_141, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381818:10]
    node _GEN_151 = and(io_in_a_valid, _T_517) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381900:10]
    printf(clock, and(_GEN_151, _T_502), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381900:10]
    stop(clock, and(_GEN_151, _T_502), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381901:10]
    printf(clock, and(_GEN_151, _T_150), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381907:10]
    stop(clock, and(_GEN_151, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381908:10]
    printf(clock, and(_GEN_151, _T_157), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381914:10]
    stop(clock, and(_GEN_151, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381915:10]
    printf(clock, and(_GEN_151, _T_417), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381922:10]
    stop(clock, and(_GEN_151, _T_417), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381923:10]
    printf(clock, and(_GEN_151, _T_609), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381932:10]
    stop(clock, and(_GEN_151, _T_609), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 381933:10]
    node _GEN_161 = and(io_in_a_valid, _T_610) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382010:10]
    printf(clock, and(_GEN_161, _T_681), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382010:10]
    stop(clock, and(_GEN_161, _T_681), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382011:10]
    printf(clock, and(_GEN_161, _T_150), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382017:10]
    stop(clock, and(_GEN_161, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382018:10]
    printf(clock, and(_GEN_161, _T_157), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382024:10]
    stop(clock, and(_GEN_161, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382025:10]
    printf(clock, and(_GEN_161, _T_691), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382032:10]
    stop(clock, and(_GEN_161, _T_691), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382033:10]
    printf(clock, and(_GEN_161, _T_421), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382040:10]
    stop(clock, and(_GEN_161, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382041:10]
    node _GEN_171 = and(io_in_a_valid, _T_696) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382118:10]
    printf(clock, and(_GEN_171, _T_681), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382118:10]
    stop(clock, and(_GEN_171, _T_681), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382119:10]
    printf(clock, and(_GEN_171, _T_150), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382125:10]
    stop(clock, and(_GEN_171, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382126:10]
    printf(clock, and(_GEN_171, _T_157), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382132:10]
    stop(clock, and(_GEN_171, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382133:10]
    printf(clock, and(_GEN_171, _T_777), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382140:10]
    stop(clock, and(_GEN_171, _T_777), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382141:10]
    printf(clock, and(_GEN_171, _T_421), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382148:10]
    stop(clock, and(_GEN_171, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382149:10]
    node _GEN_181 = and(io_in_a_valid, _T_782) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382231:10]
    printf(clock, and(_GEN_181, _T_858), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382231:10]
    stop(clock, and(_GEN_181, _T_858), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382232:10]
    printf(clock, and(_GEN_181, _T_150), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382238:10]
    stop(clock, and(_GEN_181, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382239:10]
    printf(clock, and(_GEN_181, _T_157), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382245:10]
    stop(clock, and(_GEN_181, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382246:10]
    printf(clock, and(_GEN_181, _T_868), "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382253:10]
    stop(clock, and(_GEN_181, _T_868), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382254:10]
    printf(clock, and(_GEN_181, _T_421), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382261:10]
    stop(clock, and(_GEN_181, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382262:10]
    printf(clock, and(_GEN_181, _T_170), "Assertion failed: 'A' channel Hint is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382269:10]
    stop(clock, and(_GEN_181, _T_170), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382270:10]
    printf(clock, and(io_in_d_valid, _T_880), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382280:8]
    stop(clock, and(io_in_d_valid, _T_880), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382281:8]
    node _GEN_193 = and(io_in_d_valid, _T_881) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382294:10]
    printf(clock, and(_GEN_193, _T_884), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382294:10]
    stop(clock, and(_GEN_193, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382295:10]
    printf(clock, and(_GEN_193, _T_888), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382302:10]
    stop(clock, and(_GEN_193, _T_888), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382303:10]
    printf(clock, and(_GEN_193, _T_892), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382310:10]
    stop(clock, and(_GEN_193, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382311:10]
    printf(clock, and(_GEN_193, _T_896), "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382318:10]
    stop(clock, and(_GEN_193, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382319:10]
    printf(clock, and(_GEN_193, _T_900), "Assertion failed: 'D' channel ReleaseAck is denied (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382326:10]
    stop(clock, and(_GEN_193, _T_900), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382327:10]
    node _GEN_203 = and(io_in_d_valid, _T_901) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382336:10]
    printf(clock, and(_GEN_203, _T_884), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382336:10]
    stop(clock, and(_GEN_203, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382337:10]
    printf(clock, and(_GEN_203, _T_888), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382351:10]
    stop(clock, and(_GEN_203, _T_888), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382352:10]
    printf(clock, and(_GEN_203, _T_915), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382359:10]
    stop(clock, and(_GEN_203, _T_915), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382360:10]
    printf(clock, and(_GEN_203, _T_919), "Assertion failed: 'D' channel Grant carries toN param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382367:10]
    stop(clock, and(_GEN_203, _T_919), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382368:10]
    printf(clock, and(_GEN_203, _T_896), "Assertion failed: 'D' channel Grant is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382375:10]
    stop(clock, and(_GEN_203, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382376:10]
    node _GEN_213 = and(io_in_d_valid, _T_929) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382394:10]
    printf(clock, and(_GEN_213, _T_884), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382394:10]
    stop(clock, and(_GEN_213, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382395:10]
    printf(clock, and(_GEN_213, _T_888), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382409:10]
    stop(clock, and(_GEN_213, _T_888), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382410:10]
    printf(clock, and(_GEN_213, _T_915), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382417:10]
    stop(clock, and(_GEN_213, _T_915), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382418:10]
    printf(clock, and(_GEN_213, _T_919), "Assertion failed: 'D' channel GrantData carries toN param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382425:10]
    stop(clock, and(_GEN_213, _T_919), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382426:10]
    printf(clock, and(_GEN_213, _T_952), "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382434:10]
    stop(clock, and(_GEN_213, _T_952), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382435:10]
    node _GEN_223 = and(io_in_d_valid, _T_958) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382453:10]
    printf(clock, and(_GEN_223, _T_884), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382453:10]
    stop(clock, and(_GEN_223, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382454:10]
    printf(clock, and(_GEN_223, _T_892), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382461:10]
    stop(clock, and(_GEN_223, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382462:10]
    printf(clock, and(_GEN_223, _T_896), "Assertion failed: 'D' channel AccessAck is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382469:10]
    stop(clock, and(_GEN_223, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382470:10]
    node _GEN_229 = and(io_in_d_valid, _T_975) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382488:10]
    printf(clock, and(_GEN_229, _T_884), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382488:10]
    stop(clock, and(_GEN_229, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382489:10]
    printf(clock, and(_GEN_229, _T_892), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382496:10]
    stop(clock, and(_GEN_229, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382497:10]
    printf(clock, and(_GEN_229, _T_952), "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382505:10]
    stop(clock, and(_GEN_229, _T_952), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382506:10]
    node _GEN_235 = and(io_in_d_valid, _T_993) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382524:10]
    printf(clock, and(_GEN_235, _T_884), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382524:10]
    stop(clock, and(_GEN_235, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382525:10]
    printf(clock, and(_GEN_235, _T_892), "Assertion failed: 'D' channel HintAck carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382532:10]
    stop(clock, and(_GEN_235, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382533:10]
    printf(clock, and(_GEN_235, _T_896), "Assertion failed: 'D' channel HintAck is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382540:10]
    stop(clock, and(_GEN_235, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382541:10]
    printf(clock, and(_T_1023, _T_1027), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382620:8]
    stop(clock, and(_T_1023, _T_1027), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382621:8]
    printf(clock, and(_T_1023, _T_1031), "Assertion failed: 'A' channel param changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382628:8]
    stop(clock, and(_T_1023, _T_1031), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382629:8]
    printf(clock, and(_T_1023, _T_1035), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382636:8]
    stop(clock, and(_T_1023, _T_1035), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382637:8]
    printf(clock, and(_T_1023, _T_1039), "Assertion failed: 'A' channel source changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382644:8]
    stop(clock, and(_T_1023, _T_1039), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382645:8]
    printf(clock, and(_T_1023, _T_1043), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382652:8]
    stop(clock, and(_T_1023, _T_1043), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382653:8]
    printf(clock, and(_T_1047, _T_1051), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382701:8]
    stop(clock, and(_T_1047, _T_1051), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382702:8]
    printf(clock, and(_T_1047, _T_1055), "Assertion failed: 'D' channel param changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382709:8]
    stop(clock, and(_T_1047, _T_1055), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382710:8]
    printf(clock, and(_T_1047, _T_1059), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382717:8]
    stop(clock, and(_T_1047, _T_1059), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382718:8]
    printf(clock, and(_T_1047, _T_1063), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382725:8]
    stop(clock, and(_T_1047, _T_1063), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382726:8]
    printf(clock, and(_T_1047, _T_1067), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382733:8]
    stop(clock, and(_T_1047, _T_1067), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382734:8]
    printf(clock, and(_T_1047, _T_1071), "Assertion failed: 'D' channel denied changed with multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382741:8]
    stop(clock, and(_T_1047, _T_1071), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382742:8]
    printf(clock, and(_T_1077, _T_1084), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382886:8]
    stop(clock, and(_T_1077, _T_1084), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 382887:8]
    printf(clock, and(_T_1088, _T_1103), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382946:8]
    stop(clock, and(_T_1088, _T_1103), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382947:8]
    node _GEN_241 = and(_T_1088, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382957:10]
    printf(clock, and(_GEN_241, _T_1109), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382957:10]
    stop(clock, and(_GEN_241, _T_1109), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382958:10]
    printf(clock, and(_GEN_241, _T_1113), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382965:10]
    stop(clock, and(_GEN_241, _T_1113), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382966:10]
    node _GEN_245 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382979:10]
    node _GEN_246 = and(_T_1088, _GEN_245) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382979:10]
    printf(clock, and(_GEN_246, _T_1121), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382979:10]
    stop(clock, and(_GEN_246, _T_1121), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382980:10]
    printf(clock, and(_GEN_246, _T_1125), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382987:10]
    stop(clock, and(_GEN_246, _T_1125), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 382988:10]
    printf(clock, and(_T_1132, _T_1137), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383006:8]
    stop(clock, and(_T_1132, _T_1137), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383007:8]
    printf(clock, _T_1144, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 6 (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383018:6]
    stop(clock, _T_1144, 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383019:6]
    printf(clock, _T_1153, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 383046:6]
    stop(clock, _T_1153, 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 383047:6]
    printf(clock, and(_T_1176, _T_1189), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383268:8]
    stop(clock, and(_T_1176, _T_1189), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383269:8]
    printf(clock, and(_T_1176, _T_1197), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383289:10]
    stop(clock, and(_T_1176, _T_1197), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 383290:10]

  module TLSerdesser_1_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 383561:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 383562:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383563:4]
    output auto_manager_in_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_manager_in_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_manager_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_manager_in_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_manager_in_a_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_manager_in_a_bits_source : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_manager_in_a_bits_address : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_manager_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_manager_in_a_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_manager_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_manager_in_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_manager_in_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_manager_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_manager_in_d_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_manager_in_d_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_manager_in_d_bits_source : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_manager_in_d_bits_sink : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_manager_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_manager_in_d_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_manager_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_client_out_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_client_out_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_client_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_client_out_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_client_out_a_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_client_out_a_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_client_out_a_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_client_out_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_client_out_a_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_client_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output auto_client_out_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_client_out_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_client_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_client_out_d_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_client_out_d_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_client_out_d_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_client_out_d_bits_sink : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_client_out_d_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_client_out_d_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    input auto_client_out_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383564:4]
    output io_ser_in_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383565:4]
    input io_ser_in_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383565:4]
    input io_ser_in_bits : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 383565:4]
    input io_ser_out_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383565:4]
    output io_ser_out_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 383565:4]
    output io_ser_out_bits : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 383565:4]

    inst monitor of TLMonitor_53_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.SmallBoomConfig.fir 383575:4]
    inst outArb of HellaPeekingArbiter_inTestHarness @[Serdes.scala 622:24 chipyard.TestHarness.SmallBoomConfig.fir 383606:4]
    inst outSer of GenericSerializer_inTestHarness @[Serdes.scala 624:24 chipyard.TestHarness.SmallBoomConfig.fir 383609:4]
    inst inDes of GenericDeserializer_inTestHarness @[Serdes.scala 629:23 chipyard.TestHarness.SmallBoomConfig.fir 383865:4]
    node _merged_bits_merged_union_T_1 = cat(auto_client_out_d_bits_sink, auto_client_out_d_bits_denied) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 383664:4]
    node merged_1_ready = outArb.io_in_1_ready @[Serdes.scala 357:22 chipyard.TestHarness.SmallBoomConfig.fir 383653:4 Serdes.scala 625:18 chipyard.TestHarness.SmallBoomConfig.fir 383849:4]
    node _merged_bits_last_T_1 = and(merged_1_ready, auto_client_out_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 383677:4]
    node _merged_bits_last_beats1_decode_T_1 = dshlw(UInt<13>("h3f"), auto_client_out_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.SmallBoomConfig.fir 383679:4]
    node _merged_bits_last_beats1_decode_T_2 = bits(_merged_bits_last_beats1_decode_T_1, 5, 0) @[package.scala 234:82 chipyard.TestHarness.SmallBoomConfig.fir 383680:4]
    node _merged_bits_last_beats1_decode_T_3 = not(_merged_bits_last_beats1_decode_T_2) @[package.scala 234:46 chipyard.TestHarness.SmallBoomConfig.fir 383681:4]
    node merged_bits_last_beats1_decode = shr(_merged_bits_last_beats1_decode_T_3, 3) @[Edges.scala 219:59 chipyard.TestHarness.SmallBoomConfig.fir 383682:4]
    node merged_bits_last_beats1_opdata = bits(auto_client_out_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.SmallBoomConfig.fir 383683:4]
    node merged_bits_last_beats1 = mux(merged_bits_last_beats1_opdata, merged_bits_last_beats1_decode, UInt<3>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.SmallBoomConfig.fir 383684:4]
    reg merged_bits_last_counter_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), merged_bits_last_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 383685:4]
    node _merged_bits_last_counter1_T_1 = sub(merged_bits_last_counter_1, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 383686:4]
    node merged_bits_last_counter1_1 = tail(_merged_bits_last_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 383687:4]
    node merged_bits_last_first_1 = eq(merged_bits_last_counter_1, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 383688:4]
    node _merged_bits_last_last_T_2 = eq(merged_bits_last_counter_1, UInt<3>("h1")) @[Edges.scala 231:25 chipyard.TestHarness.SmallBoomConfig.fir 383689:4]
    node _merged_bits_last_last_T_3 = eq(merged_bits_last_beats1, UInt<3>("h0")) @[Edges.scala 231:47 chipyard.TestHarness.SmallBoomConfig.fir 383690:4]
    node _merged_bits_last_counter_T_1 = mux(merged_bits_last_first_1, merged_bits_last_beats1, merged_bits_last_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 383696:6]
    node _GEN_1 = mux(_merged_bits_last_T_1, _merged_bits_last_counter_T_1, merged_bits_last_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 383695:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 383697:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 383685:4]
    node merged_4_ready = outArb.io_in_4_ready @[Serdes.scala 357:22 chipyard.TestHarness.SmallBoomConfig.fir 383796:4 Serdes.scala 625:18 chipyard.TestHarness.SmallBoomConfig.fir 383858:4]
    node _merged_bits_last_T_4 = and(merged_4_ready, auto_manager_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 383819:4]
    node _merged_bits_last_beats1_decode_T_13 = dshlw(UInt<21>("h3f"), auto_manager_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.SmallBoomConfig.fir 383821:4]
    node _merged_bits_last_beats1_decode_T_14 = bits(_merged_bits_last_beats1_decode_T_13, 5, 0) @[package.scala 234:82 chipyard.TestHarness.SmallBoomConfig.fir 383822:4]
    node _merged_bits_last_beats1_decode_T_15 = not(_merged_bits_last_beats1_decode_T_14) @[package.scala 234:46 chipyard.TestHarness.SmallBoomConfig.fir 383823:4]
    node merged_bits_last_beats1_decode_3 = shr(_merged_bits_last_beats1_decode_T_15, 3) @[Edges.scala 219:59 chipyard.TestHarness.SmallBoomConfig.fir 383824:4]
    node _merged_bits_last_beats1_opdata_T_1 = bits(auto_manager_in_a_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.SmallBoomConfig.fir 383825:4]
    node merged_bits_last_beats1_opdata_3 = not(_merged_bits_last_beats1_opdata_T_1) @[Edges.scala 91:28 chipyard.TestHarness.SmallBoomConfig.fir 383826:4]
    node merged_bits_last_beats1_3 = mux(merged_bits_last_beats1_opdata_3, merged_bits_last_beats1_decode_3, UInt<3>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.SmallBoomConfig.fir 383827:4]
    reg merged_bits_last_counter_4 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), merged_bits_last_counter_4) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 383828:4]
    node _merged_bits_last_counter1_T_4 = sub(merged_bits_last_counter_4, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 383829:4]
    node merged_bits_last_counter1_4 = tail(_merged_bits_last_counter1_T_4, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 383830:4]
    node merged_bits_last_first_4 = eq(merged_bits_last_counter_4, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 383831:4]
    node _merged_bits_last_last_T_8 = eq(merged_bits_last_counter_4, UInt<3>("h1")) @[Edges.scala 231:25 chipyard.TestHarness.SmallBoomConfig.fir 383832:4]
    node _merged_bits_last_last_T_9 = eq(merged_bits_last_beats1_3, UInt<3>("h0")) @[Edges.scala 231:47 chipyard.TestHarness.SmallBoomConfig.fir 383833:4]
    node _merged_bits_last_counter_T_4 = mux(merged_bits_last_first_4, merged_bits_last_beats1_3, merged_bits_last_counter1_4) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 383839:6]
    node _GEN_4 = mux(_merged_bits_last_T_4, _merged_bits_last_counter_T_4, merged_bits_last_counter_4) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 383838:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 383840:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 383828:4]
    node _bundleOut_0_a_valid_T = eq(inDes.io_out_bits_chanId, UInt<3>("h0")) @[Serdes.scala 236:37 chipyard.TestHarness.SmallBoomConfig.fir 383871:4]
    node _bundleIn_0_d_valid_T = eq(inDes.io_out_bits_chanId, UInt<3>("h3")) @[Serdes.scala 239:37 chipyard.TestHarness.SmallBoomConfig.fir 383937:4]
    node _GEN_5 = shr(inDes.io_out_bits_union, 1) @[Serdes.scala 468:31 chipyard.TestHarness.SmallBoomConfig.fir 383947:4]
    node _bundleIn_0_d_bits_d_sink_T = pad(_GEN_5, 8) @[Serdes.scala 468:31 chipyard.TestHarness.SmallBoomConfig.fir 383947:4]
    node _inDes_io_out_ready_T = eq(UInt<3>("h0"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.SmallBoomConfig.fir 383976:4]
    node _inDes_io_out_ready_T_1 = and(_inDes_io_out_ready_T, auto_client_out_a_ready) @[Mux.scala 80:57 chipyard.TestHarness.SmallBoomConfig.fir 383977:4]
    node _inDes_io_out_ready_T_2 = eq(UInt<3>("h1"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.SmallBoomConfig.fir 383978:4]
    node _inDes_io_out_ready_T_3 = mux(_inDes_io_out_ready_T_2, UInt<1>("h0"), _inDes_io_out_ready_T_1) @[Mux.scala 80:57 chipyard.TestHarness.SmallBoomConfig.fir 383979:4]
    node _inDes_io_out_ready_T_4 = eq(UInt<3>("h2"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.SmallBoomConfig.fir 383980:4]
    node _inDes_io_out_ready_T_5 = mux(_inDes_io_out_ready_T_4, UInt<1>("h0"), _inDes_io_out_ready_T_3) @[Mux.scala 80:57 chipyard.TestHarness.SmallBoomConfig.fir 383981:4]
    node _inDes_io_out_ready_T_6 = eq(UInt<3>("h3"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.SmallBoomConfig.fir 383982:4]
    node _inDes_io_out_ready_T_7 = mux(_inDes_io_out_ready_T_6, auto_manager_in_d_ready, _inDes_io_out_ready_T_5) @[Mux.scala 80:57 chipyard.TestHarness.SmallBoomConfig.fir 383983:4]
    node _inDes_io_out_ready_T_8 = eq(UInt<3>("h4"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.SmallBoomConfig.fir 383984:4]
    auto_manager_in_a_ready <= outArb.io_in_4_ready @[Serdes.scala 357:22 chipyard.TestHarness.SmallBoomConfig.fir 383796:4 Serdes.scala 625:18 chipyard.TestHarness.SmallBoomConfig.fir 383858:4]
    auto_manager_in_d_valid <= and(inDes.io_out_valid, _bundleIn_0_d_valid_T) @[Serdes.scala 637:46 chipyard.TestHarness.SmallBoomConfig.fir 383938:4]
    auto_manager_in_d_bits_opcode <= inDes.io_out_bits_opcode @[Serdes.scala 460:17 chipyard.TestHarness.SmallBoomConfig.fir 383940:4 Serdes.scala 461:15 chipyard.TestHarness.SmallBoomConfig.fir 383941:4]
    auto_manager_in_d_bits_param <= bits(inDes.io_out_bits_param, 1, 0) @[Serdes.scala 460:17 chipyard.TestHarness.SmallBoomConfig.fir 383940:4 Serdes.scala 462:15 chipyard.TestHarness.SmallBoomConfig.fir 383942:4]
    auto_manager_in_d_bits_size <= inDes.io_out_bits_size @[Serdes.scala 460:17 chipyard.TestHarness.SmallBoomConfig.fir 383940:4 Serdes.scala 463:15 chipyard.TestHarness.SmallBoomConfig.fir 383943:4]
    auto_manager_in_d_bits_source <= bits(inDes.io_out_bits_source, 0, 0) @[Serdes.scala 460:17 chipyard.TestHarness.SmallBoomConfig.fir 383940:4 Serdes.scala 464:15 chipyard.TestHarness.SmallBoomConfig.fir 383944:4]
    auto_manager_in_d_bits_sink <= bits(_bundleIn_0_d_bits_d_sink_T, 2, 0) @[Serdes.scala 460:17 chipyard.TestHarness.SmallBoomConfig.fir 383940:4 Serdes.scala 468:17 chipyard.TestHarness.SmallBoomConfig.fir 383948:4]
    auto_manager_in_d_bits_denied <= bits(inDes.io_out_bits_union, 0, 0) @[Serdes.scala 469:30 chipyard.TestHarness.SmallBoomConfig.fir 383949:4]
    auto_manager_in_d_bits_data <= inDes.io_out_bits_data @[Serdes.scala 460:17 chipyard.TestHarness.SmallBoomConfig.fir 383940:4 Serdes.scala 465:15 chipyard.TestHarness.SmallBoomConfig.fir 383945:4]
    auto_manager_in_d_bits_corrupt <= inDes.io_out_bits_corrupt @[Serdes.scala 460:17 chipyard.TestHarness.SmallBoomConfig.fir 383940:4 Serdes.scala 467:17 chipyard.TestHarness.SmallBoomConfig.fir 383946:4]
    auto_client_out_a_valid <= and(inDes.io_out_valid, _bundleOut_0_a_valid_T) @[Serdes.scala 631:45 chipyard.TestHarness.SmallBoomConfig.fir 383872:4]
    auto_client_out_a_bits_opcode <= inDes.io_out_bits_opcode @[Serdes.scala 374:17 chipyard.TestHarness.SmallBoomConfig.fir 383874:4 Serdes.scala 375:15 chipyard.TestHarness.SmallBoomConfig.fir 383875:4]
    auto_client_out_a_bits_param <= inDes.io_out_bits_param @[Serdes.scala 374:17 chipyard.TestHarness.SmallBoomConfig.fir 383874:4 Serdes.scala 376:15 chipyard.TestHarness.SmallBoomConfig.fir 383876:4]
    auto_client_out_a_bits_size <= bits(inDes.io_out_bits_size, 2, 0) @[Serdes.scala 374:17 chipyard.TestHarness.SmallBoomConfig.fir 383874:4 Serdes.scala 377:15 chipyard.TestHarness.SmallBoomConfig.fir 383877:4]
    auto_client_out_a_bits_source <= inDes.io_out_bits_source @[Serdes.scala 374:17 chipyard.TestHarness.SmallBoomConfig.fir 383874:4 Serdes.scala 378:15 chipyard.TestHarness.SmallBoomConfig.fir 383878:4]
    auto_client_out_a_bits_address <= bits(inDes.io_out_bits_address, 28, 0) @[Serdes.scala 374:17 chipyard.TestHarness.SmallBoomConfig.fir 383874:4 Serdes.scala 379:15 chipyard.TestHarness.SmallBoomConfig.fir 383879:4]
    auto_client_out_a_bits_mask <= inDes.io_out_bits_union @[Serdes.scala 374:17 chipyard.TestHarness.SmallBoomConfig.fir 383874:4 Serdes.scala 385:15 chipyard.TestHarness.SmallBoomConfig.fir 383882:4]
    auto_client_out_a_bits_data <= inDes.io_out_bits_data @[Serdes.scala 374:17 chipyard.TestHarness.SmallBoomConfig.fir 383874:4 Serdes.scala 380:15 chipyard.TestHarness.SmallBoomConfig.fir 383880:4]
    auto_client_out_a_bits_corrupt <= inDes.io_out_bits_corrupt @[Serdes.scala 374:17 chipyard.TestHarness.SmallBoomConfig.fir 383874:4 Serdes.scala 382:17 chipyard.TestHarness.SmallBoomConfig.fir 383881:4]
    auto_client_out_d_ready <= outArb.io_in_1_ready @[Serdes.scala 357:22 chipyard.TestHarness.SmallBoomConfig.fir 383653:4 Serdes.scala 625:18 chipyard.TestHarness.SmallBoomConfig.fir 383849:4]
    io_ser_in_ready <= inDes.io_in_ready @[Serdes.scala 630:17 chipyard.TestHarness.SmallBoomConfig.fir 383870:4]
    io_ser_out_valid <= outSer.io_out_valid @[Serdes.scala 627:16 chipyard.TestHarness.SmallBoomConfig.fir 383863:4]
    io_ser_out_bits <= outSer.io_out_bits @[Serdes.scala 627:16 chipyard.TestHarness.SmallBoomConfig.fir 383862:4]
    monitor.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 383576:4]
    monitor.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 383577:4]
    monitor.io_in_a_ready <= outArb.io_in_4_ready @[Serdes.scala 357:22 chipyard.TestHarness.SmallBoomConfig.fir 383796:4 Serdes.scala 625:18 chipyard.TestHarness.SmallBoomConfig.fir 383858:4]
    monitor.io_in_a_valid <= auto_manager_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    monitor.io_in_a_bits_opcode <= auto_manager_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    monitor.io_in_a_bits_param <= auto_manager_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    monitor.io_in_a_bits_size <= auto_manager_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    monitor.io_in_a_bits_source <= auto_manager_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    monitor.io_in_a_bits_address <= auto_manager_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    monitor.io_in_a_bits_mask <= auto_manager_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    monitor.io_in_a_bits_corrupt <= auto_manager_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    monitor.io_in_d_ready <= auto_manager_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    monitor.io_in_d_valid <= and(inDes.io_out_valid, _bundleIn_0_d_valid_T) @[Serdes.scala 637:46 chipyard.TestHarness.SmallBoomConfig.fir 383938:4]
    monitor.io_in_d_bits_opcode <= inDes.io_out_bits_opcode @[Serdes.scala 460:17 chipyard.TestHarness.SmallBoomConfig.fir 383940:4 Serdes.scala 461:15 chipyard.TestHarness.SmallBoomConfig.fir 383941:4]
    monitor.io_in_d_bits_param <= bits(inDes.io_out_bits_param, 1, 0) @[Serdes.scala 460:17 chipyard.TestHarness.SmallBoomConfig.fir 383940:4 Serdes.scala 462:15 chipyard.TestHarness.SmallBoomConfig.fir 383942:4]
    monitor.io_in_d_bits_size <= inDes.io_out_bits_size @[Serdes.scala 460:17 chipyard.TestHarness.SmallBoomConfig.fir 383940:4 Serdes.scala 463:15 chipyard.TestHarness.SmallBoomConfig.fir 383943:4]
    monitor.io_in_d_bits_source <= bits(inDes.io_out_bits_source, 0, 0) @[Serdes.scala 460:17 chipyard.TestHarness.SmallBoomConfig.fir 383940:4 Serdes.scala 464:15 chipyard.TestHarness.SmallBoomConfig.fir 383944:4]
    monitor.io_in_d_bits_sink <= bits(_bundleIn_0_d_bits_d_sink_T, 2, 0) @[Serdes.scala 460:17 chipyard.TestHarness.SmallBoomConfig.fir 383940:4 Serdes.scala 468:17 chipyard.TestHarness.SmallBoomConfig.fir 383948:4]
    monitor.io_in_d_bits_denied <= bits(inDes.io_out_bits_union, 0, 0) @[Serdes.scala 469:30 chipyard.TestHarness.SmallBoomConfig.fir 383949:4]
    monitor.io_in_d_bits_corrupt <= inDes.io_out_bits_corrupt @[Serdes.scala 460:17 chipyard.TestHarness.SmallBoomConfig.fir 383940:4 Serdes.scala 467:17 chipyard.TestHarness.SmallBoomConfig.fir 383946:4]
    outArb.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 383607:4]
    outArb.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 383608:4]
    outArb.io_in_1_valid <= auto_client_out_d_valid @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 383571:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 383598:4]
    outArb.io_in_1_bits_opcode <= auto_client_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 383571:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 383598:4]
    outArb.io_in_1_bits_param <= pad(auto_client_out_d_bits_param, 3) @[Serdes.scala 312:22 chipyard.TestHarness.SmallBoomConfig.fir 383655:4 Serdes.scala 315:20 chipyard.TestHarness.SmallBoomConfig.fir 383658:4]
    outArb.io_in_1_bits_size <= pad(auto_client_out_d_bits_size, 4) @[Serdes.scala 312:22 chipyard.TestHarness.SmallBoomConfig.fir 383655:4 Serdes.scala 316:20 chipyard.TestHarness.SmallBoomConfig.fir 383659:4]
    outArb.io_in_1_bits_source <= auto_client_out_d_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 383571:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 383598:4]
    outArb.io_in_1_bits_data <= auto_client_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 383571:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 383598:4]
    outArb.io_in_1_bits_corrupt <= auto_client_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 383571:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 383598:4]
    outArb.io_in_1_bits_union <= pad(_merged_bits_merged_union_T_1, 8) @[Serdes.scala 312:22 chipyard.TestHarness.SmallBoomConfig.fir 383655:4 Serdes.scala 322:22 chipyard.TestHarness.SmallBoomConfig.fir 383665:4]
    outArb.io_in_1_bits_last <= or(_merged_bits_last_last_T_2, _merged_bits_last_last_T_3) @[Edges.scala 231:37 chipyard.TestHarness.SmallBoomConfig.fir 383691:4]
    outArb.io_in_4_valid <= auto_manager_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    outArb.io_in_4_bits_opcode <= auto_manager_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    outArb.io_in_4_bits_param <= auto_manager_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    outArb.io_in_4_bits_size <= auto_manager_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    outArb.io_in_4_bits_source <= pad(auto_manager_in_a_bits_source, 4) @[Serdes.scala 255:22 chipyard.TestHarness.SmallBoomConfig.fir 383798:4 Serdes.scala 260:20 chipyard.TestHarness.SmallBoomConfig.fir 383803:4]
    outArb.io_in_4_bits_address <= auto_manager_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    outArb.io_in_4_bits_data <= auto_manager_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    outArb.io_in_4_bits_corrupt <= auto_manager_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    outArb.io_in_4_bits_union <= auto_manager_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 383573:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 383599:4]
    outArb.io_in_4_bits_last <= or(_merged_bits_last_last_T_8, _merged_bits_last_last_T_9) @[Edges.scala 231:37 chipyard.TestHarness.SmallBoomConfig.fir 383834:4]
    outArb.io_out_ready <= outSer.io_in_ready @[Serdes.scala 626:18 chipyard.TestHarness.SmallBoomConfig.fir 383861:4]
    outSer.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 383610:4]
    outSer.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 383611:4]
    outSer.io_in_valid <= outArb.io_out_valid @[Serdes.scala 626:18 chipyard.TestHarness.SmallBoomConfig.fir 383860:4]
    outSer.io_in_bits_chanId <= outArb.io_out_bits_chanId @[Serdes.scala 626:18 chipyard.TestHarness.SmallBoomConfig.fir 383859:4]
    outSer.io_in_bits_opcode <= outArb.io_out_bits_opcode @[Serdes.scala 626:18 chipyard.TestHarness.SmallBoomConfig.fir 383859:4]
    outSer.io_in_bits_param <= outArb.io_out_bits_param @[Serdes.scala 626:18 chipyard.TestHarness.SmallBoomConfig.fir 383859:4]
    outSer.io_in_bits_size <= outArb.io_out_bits_size @[Serdes.scala 626:18 chipyard.TestHarness.SmallBoomConfig.fir 383859:4]
    outSer.io_in_bits_source <= outArb.io_out_bits_source @[Serdes.scala 626:18 chipyard.TestHarness.SmallBoomConfig.fir 383859:4]
    outSer.io_in_bits_address <= outArb.io_out_bits_address @[Serdes.scala 626:18 chipyard.TestHarness.SmallBoomConfig.fir 383859:4]
    outSer.io_in_bits_data <= outArb.io_out_bits_data @[Serdes.scala 626:18 chipyard.TestHarness.SmallBoomConfig.fir 383859:4]
    outSer.io_in_bits_corrupt <= outArb.io_out_bits_corrupt @[Serdes.scala 626:18 chipyard.TestHarness.SmallBoomConfig.fir 383859:4]
    outSer.io_in_bits_union <= outArb.io_out_bits_union @[Serdes.scala 626:18 chipyard.TestHarness.SmallBoomConfig.fir 383859:4]
    outSer.io_in_bits_last <= outArb.io_out_bits_last @[Serdes.scala 626:18 chipyard.TestHarness.SmallBoomConfig.fir 383859:4]
    outSer.io_out_ready <= io_ser_out_ready @[Serdes.scala 627:16 chipyard.TestHarness.SmallBoomConfig.fir 383864:4]
    merged_bits_last_counter_1 <= mux(reset, UInt<3>("h0"), _GEN_1) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 383685:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 383685:4]
    merged_bits_last_counter_4 <= mux(reset, UInt<3>("h0"), _GEN_4) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 383828:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 383828:4]
    inDes.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 383866:4]
    inDes.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 383867:4]
    inDes.io_in_valid <= io_ser_in_valid @[Serdes.scala 630:17 chipyard.TestHarness.SmallBoomConfig.fir 383869:4]
    inDes.io_in_bits <= io_ser_in_bits @[Serdes.scala 630:17 chipyard.TestHarness.SmallBoomConfig.fir 383868:4]
    inDes.io_out_ready <= mux(_inDes_io_out_ready_T_8, UInt<1>("h0"), _inDes_io_out_ready_T_7) @[Mux.scala 80:57 chipyard.TestHarness.SmallBoomConfig.fir 383985:4]

  module TLMonitor_54_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 384004:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 384005:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 384006:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]
    input io_in_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]
    input io_in_a_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]
    input io_in_a_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]
    input io_in_a_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]
    input io_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]
    input io_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]
    input io_in_d_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]
    input io_in_d_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 384007:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.SmallBoomConfig.fir 385498:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.SmallBoomConfig.fir 385805:4]
    node _source_ok_T_4 = leq(io_in_a_bits_source, UInt<8>("h9f")) @[Parameters.scala 57:20 chipyard.TestHarness.SmallBoomConfig.fir 384024:6]
    node _is_aligned_mask_T_1 = dshlw(UInt<6>("h7"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.SmallBoomConfig.fir 384030:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 2, 0) @[package.scala 234:82 chipyard.TestHarness.SmallBoomConfig.fir 384031:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.SmallBoomConfig.fir 384032:6]
    node _GEN_71 = pad(is_aligned_mask, 29) @[Edges.scala 20:16 chipyard.TestHarness.SmallBoomConfig.fir 384033:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.SmallBoomConfig.fir 384033:6]
    node is_aligned = eq(_is_aligned_T, UInt<29>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.SmallBoomConfig.fir 384034:6]
    node _mask_sizeOH_T = pad(io_in_a_bits_size, 3) @[Misc.scala 201:34 chipyard.TestHarness.SmallBoomConfig.fir 384035:6]
    node mask_sizeOH_shiftAmount = bits(_mask_sizeOH_T, 1, 0) @[OneHot.scala 64:49 chipyard.TestHarness.SmallBoomConfig.fir 384036:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<4>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.SmallBoomConfig.fir 384037:6]
    node _mask_sizeOH_T_2 = bits(_mask_sizeOH_T_1, 2, 0) @[OneHot.scala 65:27 chipyard.TestHarness.SmallBoomConfig.fir 384038:6]
    node mask_sizeOH = or(_mask_sizeOH_T_2, UInt<3>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.SmallBoomConfig.fir 384039:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<2>("h3")) @[Misc.scala 205:21 chipyard.TestHarness.SmallBoomConfig.fir 384040:6]
    node mask_size = bits(mask_sizeOH, 2, 2) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 384041:6]
    node mask_bit = bits(io_in_a_bits_address, 2, 2) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 384042:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 384043:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384045:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384046:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384048:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384049:6]
    node mask_size_1 = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 384050:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 384051:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 384052:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 384053:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384054:6]
    node mask_acc_2 = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384055:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 384056:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384057:6]
    node mask_acc_3 = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384058:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 384059:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384060:6]
    node mask_acc_4 = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384061:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 384062:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384063:6]
    node mask_acc_5 = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384064:6]
    node mask_size_2 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 384065:6]
    node mask_bit_2 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 384066:6]
    node mask_nbit_2 = not(mask_bit_2) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 384067:6]
    node mask_eq_6 = and(mask_eq_2, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 384068:6]
    node _mask_acc_T_6 = and(mask_size_2, mask_eq_6) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384069:6]
    node mask_lo_lo_lo = or(mask_acc_2, _mask_acc_T_6) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384070:6]
    node mask_eq_7 = and(mask_eq_2, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 384071:6]
    node _mask_acc_T_7 = and(mask_size_2, mask_eq_7) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384072:6]
    node mask_lo_lo_hi = or(mask_acc_2, _mask_acc_T_7) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384073:6]
    node mask_eq_8 = and(mask_eq_3, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 384074:6]
    node _mask_acc_T_8 = and(mask_size_2, mask_eq_8) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384075:6]
    node mask_lo_hi_lo = or(mask_acc_3, _mask_acc_T_8) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384076:6]
    node mask_eq_9 = and(mask_eq_3, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 384077:6]
    node _mask_acc_T_9 = and(mask_size_2, mask_eq_9) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384078:6]
    node mask_lo_hi_hi = or(mask_acc_3, _mask_acc_T_9) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384079:6]
    node mask_eq_10 = and(mask_eq_4, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 384080:6]
    node _mask_acc_T_10 = and(mask_size_2, mask_eq_10) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384081:6]
    node mask_hi_lo_lo = or(mask_acc_4, _mask_acc_T_10) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384082:6]
    node mask_eq_11 = and(mask_eq_4, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 384083:6]
    node _mask_acc_T_11 = and(mask_size_2, mask_eq_11) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384084:6]
    node mask_hi_lo_hi = or(mask_acc_4, _mask_acc_T_11) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384085:6]
    node mask_eq_12 = and(mask_eq_5, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 384086:6]
    node _mask_acc_T_12 = and(mask_size_2, mask_eq_12) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384087:6]
    node mask_hi_hi_lo = or(mask_acc_5, _mask_acc_T_12) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384088:6]
    node mask_eq_13 = and(mask_eq_5, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 384089:6]
    node _mask_acc_T_13 = and(mask_size_2, mask_eq_13) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 384090:6]
    node mask_hi_hi_hi = or(mask_acc_5, _mask_acc_T_13) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 384091:6]
    node mask = cat(cat(cat(mask_hi_hi_hi, mask_hi_hi_lo), cat(mask_hi_lo_hi, mask_hi_lo_lo)), cat(cat(mask_lo_hi_hi, mask_lo_hi_lo), cat(mask_lo_lo_hi, mask_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 384098:6]
    node _T_20 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.SmallBoomConfig.fir 384121:6]
    node _T_33 = xor(io_in_a_bits_address, UInt<29>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 384137:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 384138:8]
    node _T_35 = and(_T_34, SInt<30>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 384139:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 384140:8]
    node _T_37 = eq(_T_36, SInt<30>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 384141:8]
    node _T_43 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384147:8]
    node _T_60 = or(_source_ok_T_4, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384172:8]
    node _T_61 = not(_T_60) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384173:8]
    node _T_64 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384180:8]
    node _T_65 = not(_T_64) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384181:8]
    node _T_67 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384187:8]
    node _T_68 = not(_T_67) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384188:8]
    node _T_69 = leq(io_in_a_bits_param, UInt<3>("h2")) @[Bundles.scala 108:27 chipyard.TestHarness.SmallBoomConfig.fir 384193:8]
    node _T_71 = or(_T_69, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384195:8]
    node _T_72 = not(_T_71) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384196:8]
    node _T_73 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.SmallBoomConfig.fir 384201:8]
    node _T_74 = eq(_T_73, UInt<8>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.SmallBoomConfig.fir 384202:8]
    node _T_76 = or(_T_74, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384204:8]
    node _T_77 = not(_T_76) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384205:8]
    node _T_78 = not(io_in_a_bits_corrupt) @[Monitor.scala 89:18 chipyard.TestHarness.SmallBoomConfig.fir 384210:8]
    node _T_80 = or(_T_78, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384212:8]
    node _T_81 = not(_T_80) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384213:8]
    node _T_82 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.SmallBoomConfig.fir 384219:6]
    node _T_135 = neq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 99:31 chipyard.TestHarness.SmallBoomConfig.fir 384299:8]
    node _T_137 = or(_T_135, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384301:8]
    node _T_138 = not(_T_137) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384302:8]
    node _T_148 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.SmallBoomConfig.fir 384325:6]
    node _T_175 = or(_T_37, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384359:8]
    node _T_176 = not(_T_175) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384360:8]
    node _T_183 = eq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 109:31 chipyard.TestHarness.SmallBoomConfig.fir 384379:8]
    node _T_185 = or(_T_183, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384381:8]
    node _T_186 = not(_T_185) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384382:8]
    node _T_187 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.SmallBoomConfig.fir 384387:8]
    node _T_189 = or(_T_187, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384389:8]
    node _T_190 = not(_T_189) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384390:8]
    node _T_195 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.SmallBoomConfig.fir 384404:6]
    node _T_218 = and(_source_ok_T_4, _T_37) @[Monitor.scala 115:71 chipyard.TestHarness.SmallBoomConfig.fir 384430:8]
    node _T_220 = or(_T_218, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384432:8]
    node _T_221 = not(_T_220) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384433:8]
    node _T_236 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.SmallBoomConfig.fir 384469:6]
    node _T_273 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.SmallBoomConfig.fir 384525:8]
    node _T_274 = and(io_in_a_bits_mask, _T_273) @[Monitor.scala 127:31 chipyard.TestHarness.SmallBoomConfig.fir 384526:8]
    node _T_275 = eq(_T_274, UInt<8>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.SmallBoomConfig.fir 384527:8]
    node _T_277 = or(_T_275, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384529:8]
    node _T_278 = not(_T_277) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384530:8]
    node _T_279 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.SmallBoomConfig.fir 384536:6]
    node _T_309 = leq(io_in_a_bits_param, UInt<3>("h4")) @[Bundles.scala 138:33 chipyard.TestHarness.SmallBoomConfig.fir 384581:8]
    node _T_311 = or(_T_309, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384583:8]
    node _T_312 = not(_T_311) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384584:8]
    node _T_317 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.SmallBoomConfig.fir 384598:6]
    node _T_347 = leq(io_in_a_bits_param, UInt<3>("h3")) @[Bundles.scala 145:30 chipyard.TestHarness.SmallBoomConfig.fir 384643:8]
    node _T_349 = or(_T_347, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384645:8]
    node _T_350 = not(_T_349) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384646:8]
    node _T_355 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.SmallBoomConfig.fir 384660:6]
    node _T_385 = leq(io_in_a_bits_param, UInt<3>("h1")) @[Bundles.scala 158:28 chipyard.TestHarness.SmallBoomConfig.fir 384705:8]
    node _T_387 = or(_T_385, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384707:8]
    node _T_388 = not(_T_387) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384708:8]
    node _T_397 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.SmallBoomConfig.fir 384732:6]
    node _T_399 = or(_T_397, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384734:6]
    node _T_400 = not(_T_399) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384735:6]
    node _source_ok_T_10 = leq(io_in_d_bits_source, UInt<8>("h9f")) @[Parameters.scala 57:20 chipyard.TestHarness.SmallBoomConfig.fir 384746:6]
    node _T_401 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.SmallBoomConfig.fir 384752:6]
    node _T_403 = or(_source_ok_T_10, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384755:8]
    node _T_404 = not(_T_403) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384756:8]
    node _T_405 = geq(io_in_d_bits_size, UInt<2>("h3")) @[Monitor.scala 312:27 chipyard.TestHarness.SmallBoomConfig.fir 384761:8]
    node _T_407 = or(_T_405, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384763:8]
    node _T_408 = not(_T_407) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384764:8]
    node _T_421 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.SmallBoomConfig.fir 384794:6]
    node _T_449 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.SmallBoomConfig.fir 384852:6]
    node _T_478 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.SmallBoomConfig.fir 384911:6]
    node _T_495 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.SmallBoomConfig.fir 384946:6]
    node _T_513 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.SmallBoomConfig.fir 384982:6]
    node a_first_done = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 385048:4]
    reg a_first_counter : UInt<1>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385057:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 385058:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 385059:4]
    node a_first = not(a_first_counter) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 385060:4]
    node _a_first_counter_T = mux(a_first, UInt<1>("h0"), a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 385068:6]
    node _GEN_0 = mux(a_first_done, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 385067:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 385069:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385057:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.SmallBoomConfig.fir 385071:4]
    reg param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), param) @[Monitor.scala 385:22 chipyard.TestHarness.SmallBoomConfig.fir 385072:4]
    reg size : UInt<2>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.SmallBoomConfig.fir 385073:4]
    reg source : UInt<8>, clock with :
      reset => (UInt<1>("h0"), source) @[Monitor.scala 387:22 chipyard.TestHarness.SmallBoomConfig.fir 385074:4]
    reg address : UInt<29>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.SmallBoomConfig.fir 385075:4]
    node _T_542 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.SmallBoomConfig.fir 385076:4]
    node _T_543 = and(io_in_a_valid, _T_542) @[Monitor.scala 389:19 chipyard.TestHarness.SmallBoomConfig.fir 385077:4]
    node _T_544 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.SmallBoomConfig.fir 385079:6]
    node _T_546 = or(_T_544, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385081:6]
    node _T_547 = not(_T_546) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385082:6]
    node _T_548 = eq(io_in_a_bits_param, param) @[Monitor.scala 391:32 chipyard.TestHarness.SmallBoomConfig.fir 385087:6]
    node _T_550 = or(_T_548, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385089:6]
    node _T_551 = not(_T_550) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385090:6]
    node _T_552 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.SmallBoomConfig.fir 385095:6]
    node _T_554 = or(_T_552, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385097:6]
    node _T_555 = not(_T_554) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385098:6]
    node _T_556 = eq(io_in_a_bits_source, source) @[Monitor.scala 393:32 chipyard.TestHarness.SmallBoomConfig.fir 385103:6]
    node _T_558 = or(_T_556, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385105:6]
    node _T_559 = not(_T_558) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385106:6]
    node _T_560 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.SmallBoomConfig.fir 385111:6]
    node _T_562 = or(_T_560, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385113:6]
    node _T_563 = not(_T_562) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385114:6]
    node _T_565 = and(a_first_done, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.SmallBoomConfig.fir 385121:4]
    node d_first_done = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 385129:4]
    reg d_first_counter : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385137:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 385138:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 385139:4]
    node d_first = not(d_first_counter) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 385140:4]
    node _d_first_counter_T = mux(d_first, UInt<1>("h0"), d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 385148:6]
    node _GEN_6 = mux(d_first_done, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 385147:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 385149:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385137:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.SmallBoomConfig.fir 385151:4]
    reg size_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.SmallBoomConfig.fir 385153:4]
    reg source_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.SmallBoomConfig.fir 385154:4]
    node _T_566 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.SmallBoomConfig.fir 385157:4]
    node _T_567 = and(io_in_d_valid, _T_566) @[Monitor.scala 541:19 chipyard.TestHarness.SmallBoomConfig.fir 385158:4]
    node _T_568 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.SmallBoomConfig.fir 385160:6]
    node _T_570 = or(_T_568, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385162:6]
    node _T_571 = not(_T_570) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385163:6]
    node _T_576 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.SmallBoomConfig.fir 385176:6]
    node _T_578 = or(_T_576, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385178:6]
    node _T_579 = not(_T_578) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385179:6]
    node _T_580 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.SmallBoomConfig.fir 385184:6]
    node _T_582 = or(_T_580, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385186:6]
    node _T_583 = not(_T_582) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385187:6]
    node _T_593 = and(d_first_done, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.SmallBoomConfig.fir 385210:4]
    reg inflight : UInt<160>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 385219:4]
    reg inflight_opcodes : UInt<640>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 385220:4]
    reg inflight_sizes : UInt<640>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 385221:4]
    reg a_first_counter_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385231:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 385232:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 385233:4]
    node a_first_1 = not(a_first_counter_1) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 385234:4]
    node _a_first_counter_T_1 = mux(a_first_1, UInt<1>("h0"), a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 385242:6]
    node _GEN_13 = mux(a_first_done, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 385241:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 385243:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385231:4]
    reg d_first_counter_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385253:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 385254:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 385255:4]
    node d_first_1 = not(d_first_counter_1) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 385256:4]
    node _d_first_counter_T_1 = mux(d_first_1, UInt<1>("h0"), d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 385264:6]
    node _GEN_14 = mux(d_first_done, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 385263:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 385265:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385253:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.SmallBoomConfig.fir 385277:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 11) @[Monitor.scala 634:69 chipyard.TestHarness.SmallBoomConfig.fir 385277:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.SmallBoomConfig.fir 385278:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 385281:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 385282:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_5, 640) @[Monitor.scala 634:97 chipyard.TestHarness.SmallBoomConfig.fir 385283:4]
    node _a_opcode_lookup_T_6 = and(_a_opcode_lookup_T_1, _GEN_73) @[Monitor.scala 634:97 chipyard.TestHarness.SmallBoomConfig.fir 385283:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.SmallBoomConfig.fir 385284:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 640) @[Monitor.scala 634:152 chipyard.TestHarness.SmallBoomConfig.fir 385284:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_opcode_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.SmallBoomConfig.fir 385289:4]
    node _a_size_lookup_T_6 = and(_a_size_lookup_T_1, _GEN_73) @[Monitor.scala 638:91 chipyard.TestHarness.SmallBoomConfig.fir 385294:4]
    node _GEN_77 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.SmallBoomConfig.fir 385295:4]
    node _a_size_lookup_T_7 = pad(_GEN_77, 640) @[Monitor.scala 638:144 chipyard.TestHarness.SmallBoomConfig.fir 385295:4]
    node _T_594 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.SmallBoomConfig.fir 385319:4]
    node _a_set_wo_ready_T = dshlw(UInt<256>("h1"), io_in_a_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.SmallBoomConfig.fir 385322:6]
    node _GEN_15 = mux(_T_594, _a_set_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.SmallBoomConfig.fir 385321:4 Monitor.scala 649:22 chipyard.TestHarness.SmallBoomConfig.fir 385323:6 chipyard.TestHarness.SmallBoomConfig.fir 385270:4]
    node _T_597 = and(a_first_done, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.SmallBoomConfig.fir 385326:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.SmallBoomConfig.fir 385331:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.SmallBoomConfig.fir 385332:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.SmallBoomConfig.fir 385334:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<3>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.SmallBoomConfig.fir 385335:6]
    node _GEN_78 = shl(io_in_a_bits_source, 2) @[Monitor.scala 656:79 chipyard.TestHarness.SmallBoomConfig.fir 385337:6]
    node _a_opcodes_set_T = pad(_GEN_78, 11) @[Monitor.scala 656:79 chipyard.TestHarness.SmallBoomConfig.fir 385337:6]
    node a_opcodes_set_interm = mux(_T_597, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 385328:4 Monitor.scala 654:28 chipyard.TestHarness.SmallBoomConfig.fir 385333:6 chipyard.TestHarness.SmallBoomConfig.fir 385316:4]
    node _GEN_79 = pad(a_opcodes_set_interm, 2051) @[Monitor.scala 656:54 chipyard.TestHarness.SmallBoomConfig.fir 385338:6]
    node _a_opcodes_set_T_1 = dshlw(_GEN_79, _a_opcodes_set_T) @[Monitor.scala 656:54 chipyard.TestHarness.SmallBoomConfig.fir 385338:6]
    node a_sizes_set_interm = mux(_T_597, _a_sizes_set_interm_T_1, UInt<3>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 385328:4 Monitor.scala 655:28 chipyard.TestHarness.SmallBoomConfig.fir 385336:6 chipyard.TestHarness.SmallBoomConfig.fir 385318:4]
    node _GEN_81 = pad(a_sizes_set_interm, 2050) @[Monitor.scala 657:52 chipyard.TestHarness.SmallBoomConfig.fir 385341:6]
    node _a_sizes_set_T_1 = dshlw(_GEN_81, _a_opcodes_set_T) @[Monitor.scala 657:52 chipyard.TestHarness.SmallBoomConfig.fir 385341:6]
    node _T_599 = dshr(inflight, io_in_a_bits_source) @[Monitor.scala 658:26 chipyard.TestHarness.SmallBoomConfig.fir 385343:6]
    node _T_600 = bits(_T_599, 0, 0) @[Monitor.scala 658:26 chipyard.TestHarness.SmallBoomConfig.fir 385344:6]
    node _T_601 = not(_T_600) @[Monitor.scala 658:17 chipyard.TestHarness.SmallBoomConfig.fir 385345:6]
    node _T_603 = or(_T_601, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385347:6]
    node _T_604 = not(_T_603) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385348:6]
    node _GEN_16 = mux(_T_597, _a_set_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 385328:4 Monitor.scala 653:28 chipyard.TestHarness.SmallBoomConfig.fir 385330:6 chipyard.TestHarness.SmallBoomConfig.fir 385268:4]
    node _GEN_19 = mux(_T_597, _a_opcodes_set_T_1, UInt<2051>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 385328:4 Monitor.scala 656:28 chipyard.TestHarness.SmallBoomConfig.fir 385339:6 chipyard.TestHarness.SmallBoomConfig.fir 385272:4]
    node _GEN_20 = mux(_T_597, _a_sizes_set_T_1, UInt<2050>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 385328:4 Monitor.scala 657:28 chipyard.TestHarness.SmallBoomConfig.fir 385342:6 chipyard.TestHarness.SmallBoomConfig.fir 385274:4]
    node _T_605 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.SmallBoomConfig.fir 385363:4]
    node _T_607 = not(_T_401) @[Monitor.scala 671:74 chipyard.TestHarness.SmallBoomConfig.fir 385365:4]
    node _T_608 = and(_T_605, _T_607) @[Monitor.scala 671:71 chipyard.TestHarness.SmallBoomConfig.fir 385366:4]
    node _d_clr_wo_ready_T = dshlw(UInt<256>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.SmallBoomConfig.fir 385368:6]
    node _GEN_21 = mux(_T_608, _d_clr_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.SmallBoomConfig.fir 385367:4 Monitor.scala 672:22 chipyard.TestHarness.SmallBoomConfig.fir 385369:6 chipyard.TestHarness.SmallBoomConfig.fir 385357:4]
    node _T_610 = and(d_first_done, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.SmallBoomConfig.fir 385372:4]
    node _T_613 = and(_T_610, _T_607) @[Monitor.scala 675:72 chipyard.TestHarness.SmallBoomConfig.fir 385375:4]
    node _GEN_83 = pad(_a_opcode_lookup_T_5, 2063) @[Monitor.scala 677:76 chipyard.TestHarness.SmallBoomConfig.fir 385384:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_83, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.SmallBoomConfig.fir 385384:6]
    node _GEN_22 = mux(_T_613, _d_clr_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.SmallBoomConfig.fir 385376:4 Monitor.scala 676:21 chipyard.TestHarness.SmallBoomConfig.fir 385378:6 chipyard.TestHarness.SmallBoomConfig.fir 385355:4]
    node _GEN_23 = mux(_T_613, _d_opcodes_clr_T_5, UInt<2063>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.SmallBoomConfig.fir 385376:4 Monitor.scala 677:21 chipyard.TestHarness.SmallBoomConfig.fir 385385:6 chipyard.TestHarness.SmallBoomConfig.fir 385359:4]
    node _same_cycle_resp_T_2 = eq(io_in_a_bits_source, io_in_d_bits_source) @[Monitor.scala 681:113 chipyard.TestHarness.SmallBoomConfig.fir 385401:6]
    node same_cycle_resp = and(_T_594, _same_cycle_resp_T_2) @[Monitor.scala 681:88 chipyard.TestHarness.SmallBoomConfig.fir 385402:6]
    node _T_618 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.SmallBoomConfig.fir 385403:6]
    node _T_619 = bits(_T_618, 0, 0) @[Monitor.scala 682:25 chipyard.TestHarness.SmallBoomConfig.fir 385404:6]
    node _T_620 = or(_T_619, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.SmallBoomConfig.fir 385405:6]
    node _T_622 = or(_T_620, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385407:6]
    node _T_623 = not(_T_622) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385408:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 385414:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 385414:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 385414:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 385414:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 385414:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 385414:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 385414:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 385414:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 385414:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 385414:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 385414:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 385414:8]
    node _T_624 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 385414:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 385415:8 Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 385415:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 385415:8 Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 385415:8]
    node _T_625 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 385415:8]
    node _T_626 = or(_T_624, _T_625) @[Monitor.scala 685:77 chipyard.TestHarness.SmallBoomConfig.fir 385416:8]
    node _T_628 = or(_T_626, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385418:8]
    node _T_629 = not(_T_628) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385419:8]
    node _T_630 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.SmallBoomConfig.fir 385424:8]
    node _T_632 = or(_T_630, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385426:8]
    node _T_633 = not(_T_632) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385427:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 385275:4 Monitor.scala 634:21 chipyard.TestHarness.SmallBoomConfig.fir 385285:4]
    node _T_634 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 385434:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_634), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 385435:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 385435:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_634), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 385435:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 385435:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_634), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 385435:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 385435:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_634), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 385435:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 385435:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 385435:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 385435:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 385435:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 385435:8]
    node _T_635 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 385435:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 385437:8 Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 385437:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 385437:8 Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 385437:8]
    node _T_637 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 385437:8]
    node _T_638 = or(_T_635, _T_637) @[Monitor.scala 689:72 chipyard.TestHarness.SmallBoomConfig.fir 385438:8]
    node _T_640 = or(_T_638, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385440:8]
    node _T_641 = not(_T_640) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385441:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 385286:4 Monitor.scala 638:19 chipyard.TestHarness.SmallBoomConfig.fir 385296:4]
    node _GEN_86 = pad(io_in_d_bits_size, 4) @[Monitor.scala 691:36 chipyard.TestHarness.SmallBoomConfig.fir 385446:8]
    node _T_642 = eq(_GEN_86, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.SmallBoomConfig.fir 385446:8]
    node _T_644 = or(_T_642, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385448:8]
    node _T_645 = not(_T_644) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385449:8]
    node _T_647 = and(_T_605, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.SmallBoomConfig.fir 385457:4]
    node _T_648 = and(_T_647, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.SmallBoomConfig.fir 385458:4]
    node _T_650 = and(_T_648, _same_cycle_resp_T_2) @[Monitor.scala 694:65 chipyard.TestHarness.SmallBoomConfig.fir 385460:4]
    node _T_652 = and(_T_650, _T_607) @[Monitor.scala 694:116 chipyard.TestHarness.SmallBoomConfig.fir 385462:4]
    node _T_653 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.SmallBoomConfig.fir 385464:6]
    node _T_654 = or(_T_653, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.SmallBoomConfig.fir 385465:6]
    node _T_656 = or(_T_654, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385467:6]
    node _T_657 = not(_T_656) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385468:6]
    node a_set_wo_ready = bits(_GEN_15, 159, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 385269:4]
    node d_clr_wo_ready = bits(_GEN_21, 159, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 385356:4]
    node _T_658 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.SmallBoomConfig.fir 385474:4]
    node _T_659 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.SmallBoomConfig.fir 385475:4]
    node _T_660 = not(_T_659) @[Monitor.scala 699:51 chipyard.TestHarness.SmallBoomConfig.fir 385476:4]
    node _T_661 = or(_T_658, _T_660) @[Monitor.scala 699:48 chipyard.TestHarness.SmallBoomConfig.fir 385477:4]
    node _T_663 = or(_T_661, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385479:4]
    node _T_664 = not(_T_663) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385480:4]
    node a_set = bits(_GEN_16, 159, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 385267:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.SmallBoomConfig.fir 385485:4]
    node d_clr = bits(_GEN_22, 159, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 385354:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.SmallBoomConfig.fir 385486:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.SmallBoomConfig.fir 385487:4]
    node a_opcodes_set = bits(_GEN_19, 639, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 385271:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.SmallBoomConfig.fir 385489:4]
    node d_opcodes_clr = bits(_GEN_23, 639, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 385358:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.SmallBoomConfig.fir 385490:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.SmallBoomConfig.fir 385491:4]
    node a_sizes_set = bits(_GEN_20, 639, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 385273:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.SmallBoomConfig.fir 385493:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_opcodes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.SmallBoomConfig.fir 385495:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 385497:4]
    node _T_665 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.SmallBoomConfig.fir 385500:4]
    node _T_666 = not(_T_665) @[Monitor.scala 709:16 chipyard.TestHarness.SmallBoomConfig.fir 385501:4]
    node _T_667 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.SmallBoomConfig.fir 385502:4]
    node _T_668 = or(_T_666, _T_667) @[Monitor.scala 709:30 chipyard.TestHarness.SmallBoomConfig.fir 385503:4]
    node _T_669 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.SmallBoomConfig.fir 385504:4]
    node _T_670 = or(_T_668, _T_669) @[Monitor.scala 709:47 chipyard.TestHarness.SmallBoomConfig.fir 385505:4]
    node _T_672 = or(_T_670, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385507:4]
    node _T_673 = not(_T_672) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385508:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.SmallBoomConfig.fir 385513:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.SmallBoomConfig.fir 385514:4]
    node _T_676 = or(a_first_done, d_first_done) @[Monitor.scala 712:27 chipyard.TestHarness.SmallBoomConfig.fir 385518:4]
    node _GEN_57 = mux(_T_676, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.SmallBoomConfig.fir 385519:4 Monitor.scala 712:58 chipyard.TestHarness.SmallBoomConfig.fir 385520:6 Monitor.scala 711:14 chipyard.TestHarness.SmallBoomConfig.fir 385515:4]
    reg inflight_1 : UInt<160>, clock with :
      reset => (UInt<1>("h0"), inflight_1) @[Monitor.scala 723:35 chipyard.TestHarness.SmallBoomConfig.fir 385522:4]
    reg inflight_sizes_1 : UInt<640>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 385524:4]
    reg d_first_counter_2 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385559:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 385560:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 385561:4]
    node d_first_2 = not(d_first_counter_2) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 385562:4]
    node _d_first_counter_T_2 = mux(d_first_2, UInt<1>("h0"), d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 385570:6]
    node _GEN_59 = mux(d_first_done, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 385569:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 385571:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385559:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_opcode_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.SmallBoomConfig.fir 385595:4]
    node _c_size_lookup_T_6 = and(_c_size_lookup_T_1, _GEN_73) @[Monitor.scala 747:93 chipyard.TestHarness.SmallBoomConfig.fir 385600:4]
    node _GEN_92 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.SmallBoomConfig.fir 385601:4]
    node _c_size_lookup_T_7 = pad(_GEN_92, 640) @[Monitor.scala 747:146 chipyard.TestHarness.SmallBoomConfig.fir 385601:4]
    node _T_694 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.SmallBoomConfig.fir 385679:4]
    node _T_696 = and(_T_694, _T_401) @[Monitor.scala 779:71 chipyard.TestHarness.SmallBoomConfig.fir 385681:4]
    node _T_698 = and(d_first_done, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.SmallBoomConfig.fir 385687:4]
    node _T_700 = and(_T_698, _T_401) @[Monitor.scala 783:72 chipyard.TestHarness.SmallBoomConfig.fir 385689:4]
    node _GEN_67 = mux(_T_700, _d_clr_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.SmallBoomConfig.fir 385690:4 Monitor.scala 784:21 chipyard.TestHarness.SmallBoomConfig.fir 385692:6 chipyard.TestHarness.SmallBoomConfig.fir 385671:4]
    node _GEN_68 = mux(_T_700, _d_opcodes_clr_T_5, UInt<2063>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.SmallBoomConfig.fir 385690:4 Monitor.scala 785:21 chipyard.TestHarness.SmallBoomConfig.fir 385699:6 chipyard.TestHarness.SmallBoomConfig.fir 385675:4]
    node _T_704 = dshr(inflight_1, io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.SmallBoomConfig.fir 385725:6]
    node _T_705 = bits(_T_704, 0, 0) @[Monitor.scala 791:25 chipyard.TestHarness.SmallBoomConfig.fir 385726:6]
    node _T_708 = or(_T_705, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385729:6]
    node _T_709 = not(_T_708) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385730:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 385583:4 Monitor.scala 747:21 chipyard.TestHarness.SmallBoomConfig.fir 385602:4]
    node _T_714 = eq(_GEN_86, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.SmallBoomConfig.fir 385748:8]
    node _T_716 = or(_T_714, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385750:8]
    node _T_717 = not(_T_716) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385751:8]
    node d_clr_1 = bits(_GEN_67, 159, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 385670:4]
    node _inflight_T_4 = not(d_clr_1) @[Monitor.scala 809:46 chipyard.TestHarness.SmallBoomConfig.fir 385793:4]
    node _inflight_T_5 = and(inflight_1, _inflight_T_4) @[Monitor.scala 809:44 chipyard.TestHarness.SmallBoomConfig.fir 385794:4]
    node d_opcodes_clr_1 = bits(_GEN_68, 639, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 385674:4]
    node _inflight_opcodes_T_4 = not(d_opcodes_clr_1) @[Monitor.scala 810:62 chipyard.TestHarness.SmallBoomConfig.fir 385797:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_opcodes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.SmallBoomConfig.fir 385802:4]
    reg watchdog_1 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog_1) @[Monitor.scala 813:27 chipyard.TestHarness.SmallBoomConfig.fir 385804:4]
    node _T_734 = orr(inflight_1) @[Monitor.scala 816:26 chipyard.TestHarness.SmallBoomConfig.fir 385807:4]
    node _T_735 = not(_T_734) @[Monitor.scala 816:16 chipyard.TestHarness.SmallBoomConfig.fir 385808:4]
    node _T_736 = eq(plusarg_reader_1.out, UInt<32>("h0")) @[Monitor.scala 816:39 chipyard.TestHarness.SmallBoomConfig.fir 385809:4]
    node _T_737 = or(_T_735, _T_736) @[Monitor.scala 816:30 chipyard.TestHarness.SmallBoomConfig.fir 385810:4]
    node _T_738 = lt(watchdog_1, plusarg_reader_1.out) @[Monitor.scala 816:59 chipyard.TestHarness.SmallBoomConfig.fir 385811:4]
    node _T_739 = or(_T_737, _T_738) @[Monitor.scala 816:47 chipyard.TestHarness.SmallBoomConfig.fir 385812:4]
    node _T_741 = or(_T_739, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385814:4]
    node _T_742 = not(_T_741) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385815:4]
    node _watchdog_T_2 = add(watchdog_1, UInt<32>("h1")) @[Monitor.scala 818:26 chipyard.TestHarness.SmallBoomConfig.fir 385820:4]
    node _watchdog_T_3 = tail(_watchdog_T_2, 1) @[Monitor.scala 818:26 chipyard.TestHarness.SmallBoomConfig.fir 385821:4]
    node _GEN_70 = mux(d_first_done, UInt<32>("h0"), _watchdog_T_3) @[Monitor.scala 819:47 chipyard.TestHarness.SmallBoomConfig.fir 385828:4 Monitor.scala 819:58 chipyard.TestHarness.SmallBoomConfig.fir 385829:6 Monitor.scala 818:14 chipyard.TestHarness.SmallBoomConfig.fir 385822:4]
    a_first_counter <= mux(reset, UInt<1>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385057:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385057:4]
    opcode <= mux(_T_565, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 385122:4 Monitor.scala 397:15 chipyard.TestHarness.SmallBoomConfig.fir 385123:6 Monitor.scala 384:22 chipyard.TestHarness.SmallBoomConfig.fir 385071:4]
    param <= mux(_T_565, io_in_a_bits_param, param) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 385122:4 Monitor.scala 398:15 chipyard.TestHarness.SmallBoomConfig.fir 385124:6 Monitor.scala 385:22 chipyard.TestHarness.SmallBoomConfig.fir 385072:4]
    size <= mux(_T_565, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 385122:4 Monitor.scala 399:15 chipyard.TestHarness.SmallBoomConfig.fir 385125:6 Monitor.scala 386:22 chipyard.TestHarness.SmallBoomConfig.fir 385073:4]
    source <= mux(_T_565, io_in_a_bits_source, source) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 385122:4 Monitor.scala 400:15 chipyard.TestHarness.SmallBoomConfig.fir 385126:6 Monitor.scala 387:22 chipyard.TestHarness.SmallBoomConfig.fir 385074:4]
    address <= mux(_T_565, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 385122:4 Monitor.scala 401:15 chipyard.TestHarness.SmallBoomConfig.fir 385127:6 Monitor.scala 388:22 chipyard.TestHarness.SmallBoomConfig.fir 385075:4]
    d_first_counter <= mux(reset, UInt<1>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385137:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385137:4]
    opcode_1 <= mux(_T_593, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 385211:4 Monitor.scala 550:15 chipyard.TestHarness.SmallBoomConfig.fir 385212:6 Monitor.scala 535:22 chipyard.TestHarness.SmallBoomConfig.fir 385151:4]
    size_1 <= mux(_T_593, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 385211:4 Monitor.scala 552:15 chipyard.TestHarness.SmallBoomConfig.fir 385214:6 Monitor.scala 537:22 chipyard.TestHarness.SmallBoomConfig.fir 385153:4]
    source_1 <= mux(_T_593, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 385211:4 Monitor.scala 553:15 chipyard.TestHarness.SmallBoomConfig.fir 385215:6 Monitor.scala 538:22 chipyard.TestHarness.SmallBoomConfig.fir 385154:4]
    inflight <= mux(reset, UInt<160>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 385219:4 Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 385219:4 Monitor.scala 702:14 chipyard.TestHarness.SmallBoomConfig.fir 385488:4]
    inflight_opcodes <= mux(reset, UInt<640>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 385220:4 Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 385220:4 Monitor.scala 703:22 chipyard.TestHarness.SmallBoomConfig.fir 385492:4]
    inflight_sizes <= mux(reset, UInt<640>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 385221:4 Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 385221:4 Monitor.scala 704:20 chipyard.TestHarness.SmallBoomConfig.fir 385496:4]
    a_first_counter_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385231:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385231:4]
    d_first_counter_1 <= mux(reset, UInt<1>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385253:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385253:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 385497:4 Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 385497:4]
    inflight_1 <= mux(reset, UInt<160>("h0"), _inflight_T_5) @[Monitor.scala 723:35 chipyard.TestHarness.SmallBoomConfig.fir 385522:4 Monitor.scala 723:35 chipyard.TestHarness.SmallBoomConfig.fir 385522:4 Monitor.scala 809:22 chipyard.TestHarness.SmallBoomConfig.fir 385795:4]
    inflight_sizes_1 <= mux(reset, UInt<640>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 385524:4 Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 385524:4 Monitor.scala 811:22 chipyard.TestHarness.SmallBoomConfig.fir 385803:4]
    d_first_counter_2 <= mux(reset, UInt<1>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385559:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 385559:4]
    watchdog_1 <= mux(reset, UInt<32>("h0"), _GEN_70) @[Monitor.scala 813:27 chipyard.TestHarness.SmallBoomConfig.fir 385804:4 Monitor.scala 813:27 chipyard.TestHarness.SmallBoomConfig.fir 385804:4]
    node _GEN_98 = and(io_in_a_valid, _T_20) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384149:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384149:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384150:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384168:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384169:10]
    printf(clock, and(_GEN_98, _T_61), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384175:10]
    stop(clock, and(_GEN_98, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384176:10]
    printf(clock, and(_GEN_98, _T_65), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384183:10]
    stop(clock, and(_GEN_98, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384184:10]
    printf(clock, and(_GEN_98, _T_68), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384190:10]
    stop(clock, and(_GEN_98, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384191:10]
    printf(clock, and(_GEN_98, _T_72), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384198:10]
    stop(clock, and(_GEN_98, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384199:10]
    printf(clock, and(_GEN_98, _T_77), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384207:10]
    stop(clock, and(_GEN_98, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384208:10]
    printf(clock, and(_GEN_98, _T_81), "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384215:10]
    stop(clock, and(_GEN_98, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384216:10]
    node _GEN_114 = and(io_in_a_valid, _T_82) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384247:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384247:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384248:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384266:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384267:10]
    printf(clock, and(_GEN_114, _T_61), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384273:10]
    stop(clock, and(_GEN_114, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384274:10]
    printf(clock, and(_GEN_114, _T_65), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384281:10]
    stop(clock, and(_GEN_114, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384282:10]
    printf(clock, and(_GEN_114, _T_68), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384288:10]
    stop(clock, and(_GEN_114, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384289:10]
    printf(clock, and(_GEN_114, _T_72), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384296:10]
    stop(clock, and(_GEN_114, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384297:10]
    printf(clock, and(_GEN_114, _T_138), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384304:10]
    stop(clock, and(_GEN_114, _T_138), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384305:10]
    printf(clock, and(_GEN_114, _T_77), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384313:10]
    stop(clock, and(_GEN_114, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384314:10]
    printf(clock, and(_GEN_114, _T_81), "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384321:10]
    stop(clock, and(_GEN_114, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384322:10]
    node _GEN_132 = and(io_in_a_valid, _T_148) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384344:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384344:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384345:10]
    printf(clock, and(_GEN_132, _T_176), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384362:10]
    stop(clock, and(_GEN_132, _T_176), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384363:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel Get carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384369:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384370:10]
    printf(clock, and(_GEN_132, _T_68), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384376:10]
    stop(clock, and(_GEN_132, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384377:10]
    printf(clock, and(_GEN_132, _T_186), "Assertion failed: 'A' channel Get carries invalid param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384384:10]
    stop(clock, and(_GEN_132, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384385:10]
    printf(clock, and(_GEN_132, _T_190), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384392:10]
    stop(clock, and(_GEN_132, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384393:10]
    printf(clock, and(_GEN_132, _T_81), "Assertion failed: 'A' channel Get is corrupt (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384400:10]
    stop(clock, and(_GEN_132, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384401:10]
    node _GEN_146 = and(io_in_a_valid, _T_195) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384435:10]
    printf(clock, and(_GEN_146, _T_221), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384435:10]
    stop(clock, and(_GEN_146, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384436:10]
    printf(clock, and(_GEN_146, _T_61), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384442:10]
    stop(clock, and(_GEN_146, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384443:10]
    printf(clock, and(_GEN_146, _T_68), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384449:10]
    stop(clock, and(_GEN_146, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384450:10]
    printf(clock, and(_GEN_146, _T_186), "Assertion failed: 'A' channel PutFull carries invalid param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384457:10]
    stop(clock, and(_GEN_146, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384458:10]
    printf(clock, and(_GEN_146, _T_190), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384465:10]
    stop(clock, and(_GEN_146, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384466:10]
    node _GEN_156 = and(io_in_a_valid, _T_236) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384500:10]
    printf(clock, and(_GEN_156, _T_221), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384500:10]
    stop(clock, and(_GEN_156, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384501:10]
    printf(clock, and(_GEN_156, _T_61), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384507:10]
    stop(clock, and(_GEN_156, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384508:10]
    printf(clock, and(_GEN_156, _T_68), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384514:10]
    stop(clock, and(_GEN_156, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384515:10]
    printf(clock, and(_GEN_156, _T_186), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384522:10]
    stop(clock, and(_GEN_156, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384523:10]
    printf(clock, and(_GEN_156, _T_278), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384532:10]
    stop(clock, and(_GEN_156, _T_278), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384533:10]
    node _GEN_166 = and(io_in_a_valid, _T_279) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384564:10]
    printf(clock, and(_GEN_166, _T_43), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384564:10]
    stop(clock, and(_GEN_166, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384565:10]
    printf(clock, and(_GEN_166, _T_61), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384571:10]
    stop(clock, and(_GEN_166, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384572:10]
    printf(clock, and(_GEN_166, _T_68), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384578:10]
    stop(clock, and(_GEN_166, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384579:10]
    printf(clock, and(_GEN_166, _T_312), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384586:10]
    stop(clock, and(_GEN_166, _T_312), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384587:10]
    printf(clock, and(_GEN_166, _T_190), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384594:10]
    stop(clock, and(_GEN_166, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384595:10]
    node _GEN_176 = and(io_in_a_valid, _T_317) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384626:10]
    printf(clock, and(_GEN_176, _T_43), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384626:10]
    stop(clock, and(_GEN_176, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384627:10]
    printf(clock, and(_GEN_176, _T_61), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384633:10]
    stop(clock, and(_GEN_176, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384634:10]
    printf(clock, and(_GEN_176, _T_68), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384640:10]
    stop(clock, and(_GEN_176, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384641:10]
    printf(clock, and(_GEN_176, _T_350), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384648:10]
    stop(clock, and(_GEN_176, _T_350), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384649:10]
    printf(clock, and(_GEN_176, _T_190), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384656:10]
    stop(clock, and(_GEN_176, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384657:10]
    node _GEN_186 = and(io_in_a_valid, _T_355) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384688:10]
    printf(clock, and(_GEN_186, _T_43), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384688:10]
    stop(clock, and(_GEN_186, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384689:10]
    printf(clock, and(_GEN_186, _T_61), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384695:10]
    stop(clock, and(_GEN_186, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384696:10]
    printf(clock, and(_GEN_186, _T_68), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384702:10]
    stop(clock, and(_GEN_186, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384703:10]
    printf(clock, and(_GEN_186, _T_388), "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384710:10]
    stop(clock, and(_GEN_186, _T_388), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384711:10]
    printf(clock, and(_GEN_186, _T_190), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384718:10]
    stop(clock, and(_GEN_186, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384719:10]
    printf(clock, and(_GEN_186, _T_81), "Assertion failed: 'A' channel Hint is corrupt (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384726:10]
    stop(clock, and(_GEN_186, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 384727:10]
    printf(clock, and(io_in_d_valid, _T_400), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384737:8]
    stop(clock, and(io_in_d_valid, _T_400), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384738:8]
    node _GEN_198 = and(io_in_d_valid, _T_401) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384758:10]
    printf(clock, and(_GEN_198, _T_404), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384758:10]
    stop(clock, and(_GEN_198, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384759:10]
    printf(clock, and(_GEN_198, _T_408), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384766:10]
    stop(clock, and(_GEN_198, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384767:10]
    node _GEN_202 = and(io_in_d_valid, _T_421) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384800:10]
    printf(clock, and(_GEN_202, _T_404), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384800:10]
    stop(clock, and(_GEN_202, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384801:10]
    printf(clock, and(_GEN_202, _T_43), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384807:10]
    stop(clock, and(_GEN_202, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384808:10]
    printf(clock, and(_GEN_202, _T_408), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384815:10]
    stop(clock, and(_GEN_202, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384816:10]
    node _GEN_208 = and(io_in_d_valid, _T_449) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384858:10]
    printf(clock, and(_GEN_208, _T_404), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384858:10]
    stop(clock, and(_GEN_208, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384859:10]
    printf(clock, and(_GEN_208, _T_43), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384865:10]
    stop(clock, and(_GEN_208, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384866:10]
    printf(clock, and(_GEN_208, _T_408), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384873:10]
    stop(clock, and(_GEN_208, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384874:10]
    node _GEN_214 = and(io_in_d_valid, _T_478) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384917:10]
    printf(clock, and(_GEN_214, _T_404), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384917:10]
    stop(clock, and(_GEN_214, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384918:10]
    node _GEN_216 = and(io_in_d_valid, _T_495) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384952:10]
    printf(clock, and(_GEN_216, _T_404), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384952:10]
    stop(clock, and(_GEN_216, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384953:10]
    node _GEN_218 = and(io_in_d_valid, _T_513) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384988:10]
    printf(clock, and(_GEN_218, _T_404), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384988:10]
    stop(clock, and(_GEN_218, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 384989:10]
    printf(clock, and(_T_543, _T_547), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385084:8]
    stop(clock, and(_T_543, _T_547), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385085:8]
    printf(clock, and(_T_543, _T_551), "Assertion failed: 'A' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385092:8]
    stop(clock, and(_T_543, _T_551), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385093:8]
    printf(clock, and(_T_543, _T_555), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385100:8]
    stop(clock, and(_T_543, _T_555), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385101:8]
    printf(clock, and(_T_543, _T_559), "Assertion failed: 'A' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385108:8]
    stop(clock, and(_T_543, _T_559), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385109:8]
    printf(clock, and(_T_543, _T_563), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385116:8]
    stop(clock, and(_T_543, _T_563), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385117:8]
    printf(clock, and(_T_567, _T_571), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385165:8]
    stop(clock, and(_T_567, _T_571), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385166:8]
    printf(clock, and(_T_567, _T_579), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385181:8]
    stop(clock, and(_T_567, _T_579), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385182:8]
    printf(clock, and(_T_567, _T_583), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385189:8]
    stop(clock, and(_T_567, _T_583), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385190:8]
    printf(clock, and(_T_597, _T_604), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385350:8]
    stop(clock, and(_T_597, _T_604), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385351:8]
    printf(clock, and(_T_608, _T_623), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385410:8]
    stop(clock, and(_T_608, _T_623), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385411:8]
    node _GEN_220 = and(_T_608, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385421:10]
    printf(clock, and(_GEN_220, _T_629), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385421:10]
    stop(clock, and(_GEN_220, _T_629), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385422:10]
    printf(clock, and(_GEN_220, _T_633), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385429:10]
    stop(clock, and(_GEN_220, _T_633), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385430:10]
    node _GEN_224 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385443:10]
    node _GEN_225 = and(_T_608, _GEN_224) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385443:10]
    printf(clock, and(_GEN_225, _T_641), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385443:10]
    stop(clock, and(_GEN_225, _T_641), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385444:10]
    printf(clock, and(_GEN_225, _T_645), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385451:10]
    stop(clock, and(_GEN_225, _T_645), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385452:10]
    printf(clock, and(_T_652, _T_657), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385470:8]
    stop(clock, and(_T_652, _T_657), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385471:8]
    printf(clock, _T_664, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385482:6]
    stop(clock, _T_664, 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385483:6]
    printf(clock, _T_673, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385510:6]
    stop(clock, _T_673, 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385511:6]
    printf(clock, and(_T_696, _T_709), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385732:8]
    stop(clock, and(_T_696, _T_709), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385733:8]
    printf(clock, and(_T_696, _T_717), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385753:10]
    stop(clock, and(_T_696, _T_717), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 385754:10]
    printf(clock, _T_742, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385817:6]
    stop(clock, _T_742, 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 385818:6]

  module TLRAM_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 385832:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 385833:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 385834:4]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    input auto_in_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    input auto_in_a_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    input auto_in_a_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    input auto_in_a_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    input auto_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    input auto_in_a_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    input auto_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    output auto_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    output auto_in_d_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    output auto_in_d_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]
    output auto_in_d_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 385835:4]

    inst monitor of TLMonitor_54_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.SmallBoomConfig.fir 385842:4]
    inst mem of mem_inTestHarness @[DescribedSRAM.scala 19:26 chipyard.TestHarness.SmallBoomConfig.fir 385866:4]
    reg r_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_full) @[SRAM.scala 134:30 chipyard.TestHarness.SmallBoomConfig.fir 385881:4]
    reg r_size : UInt<2>, clock with :
      reset => (UInt<1>("h0"), r_size) @[SRAM.scala 137:26 chipyard.TestHarness.SmallBoomConfig.fir 385884:4]
    reg r_source : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_source) @[SRAM.scala 138:26 chipyard.TestHarness.SmallBoomConfig.fir 385885:4]
    reg r_read : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_read) @[SRAM.scala 139:26 chipyard.TestHarness.SmallBoomConfig.fir 385886:4]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[SRAM.scala 321:58 chipyard.TestHarness.SmallBoomConfig.fir 386406:4]
    reg r_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_1) @[Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    node r_raw_data_1 = mux(REG, mem.RW0_rdata_1, r_1) @[package.scala 79:42 chipyard.TestHarness.SmallBoomConfig.fir 386419:4]
    reg r_0 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_0) @[Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    node r_raw_data_0 = mux(REG, mem.RW0_rdata_0, r_0) @[package.scala 79:42 chipyard.TestHarness.SmallBoomConfig.fir 386419:4]
    reg r_3 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_3) @[Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    node r_raw_data_3 = mux(REG, mem.RW0_rdata_3, r_3) @[package.scala 79:42 chipyard.TestHarness.SmallBoomConfig.fir 386419:4]
    reg r_2 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_2) @[Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    node r_raw_data_2 = mux(REG, mem.RW0_rdata_2, r_2) @[package.scala 79:42 chipyard.TestHarness.SmallBoomConfig.fir 386419:4]
    node r_corrected_lo = cat(cat(r_raw_data_3, r_raw_data_2), cat(r_raw_data_1, r_raw_data_0)) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 385949:4]
    reg r_5 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_5) @[Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    node r_raw_data_5 = mux(REG, mem.RW0_rdata_5, r_5) @[package.scala 79:42 chipyard.TestHarness.SmallBoomConfig.fir 386419:4]
    reg r_4 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_4) @[Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    node r_raw_data_4 = mux(REG, mem.RW0_rdata_4, r_4) @[package.scala 79:42 chipyard.TestHarness.SmallBoomConfig.fir 386419:4]
    reg r_7 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_7) @[Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    node r_raw_data_7 = mux(REG, mem.RW0_rdata_7, r_7) @[package.scala 79:42 chipyard.TestHarness.SmallBoomConfig.fir 386419:4]
    reg r_6 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_6) @[Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    node r_raw_data_6 = mux(REG, mem.RW0_rdata_6, r_6) @[package.scala 79:42 chipyard.TestHarness.SmallBoomConfig.fir 386419:4]
    node r_corrected_hi = cat(cat(r_raw_data_7, r_raw_data_6), cat(r_raw_data_5, r_raw_data_4)) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 385952:4]
    node _bundleIn_0_a_ready_T_2 = not(r_full) @[SRAM.scala 243:41 chipyard.TestHarness.SmallBoomConfig.fir 386132:4]
    node in_a_ready = or(_bundleIn_0_a_ready_T_2, auto_in_d_ready) @[SRAM.scala 243:49 chipyard.TestHarness.SmallBoomConfig.fir 386133:4]
    node a_read = eq(auto_in_a_bits_opcode, UInt<3>("h4")) @[SRAM.scala 251:35 chipyard.TestHarness.SmallBoomConfig.fir 386141:4]
    node _GEN_22 = mux(auto_in_d_ready, UInt<1>("h0"), r_full) @[SRAM.scala 273:20 chipyard.TestHarness.SmallBoomConfig.fir 386170:4 SRAM.scala 273:29 chipyard.TestHarness.SmallBoomConfig.fir 386171:6 SRAM.scala 134:30 chipyard.TestHarness.SmallBoomConfig.fir 385881:4]
    node _T_18 = and(in_a_ready, auto_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 386173:4]
    node _T_19 = not(a_read) @[SRAM.scala 287:13 chipyard.TestHarness.SmallBoomConfig.fir 386187:6]
    node _GEN_24 = or(_T_18, _GEN_22) @[SRAM.scala 274:24 chipyard.TestHarness.SmallBoomConfig.fir 386174:4 SRAM.scala 275:18 chipyard.TestHarness.SmallBoomConfig.fir 386175:6]
    node _a_lanes_T = bits(auto_in_a_bits_mask, 0, 0) @[SRAM.scala 303:64 chipyard.TestHarness.SmallBoomConfig.fir 386310:4]
    node a_lanes_lo_lo_lo = orr(_a_lanes_T) @[SRAM.scala 303:95 chipyard.TestHarness.SmallBoomConfig.fir 386311:4]
    node _a_lanes_T_1 = bits(auto_in_a_bits_mask, 1, 1) @[SRAM.scala 303:64 chipyard.TestHarness.SmallBoomConfig.fir 386312:4]
    node a_lanes_lo_lo_hi = orr(_a_lanes_T_1) @[SRAM.scala 303:95 chipyard.TestHarness.SmallBoomConfig.fir 386313:4]
    node _a_lanes_T_2 = bits(auto_in_a_bits_mask, 2, 2) @[SRAM.scala 303:64 chipyard.TestHarness.SmallBoomConfig.fir 386314:4]
    node a_lanes_lo_hi_lo = orr(_a_lanes_T_2) @[SRAM.scala 303:95 chipyard.TestHarness.SmallBoomConfig.fir 386315:4]
    node _a_lanes_T_3 = bits(auto_in_a_bits_mask, 3, 3) @[SRAM.scala 303:64 chipyard.TestHarness.SmallBoomConfig.fir 386316:4]
    node a_lanes_lo_hi_hi = orr(_a_lanes_T_3) @[SRAM.scala 303:95 chipyard.TestHarness.SmallBoomConfig.fir 386317:4]
    node _a_lanes_T_4 = bits(auto_in_a_bits_mask, 4, 4) @[SRAM.scala 303:64 chipyard.TestHarness.SmallBoomConfig.fir 386318:4]
    node a_lanes_hi_lo_lo = orr(_a_lanes_T_4) @[SRAM.scala 303:95 chipyard.TestHarness.SmallBoomConfig.fir 386319:4]
    node _a_lanes_T_5 = bits(auto_in_a_bits_mask, 5, 5) @[SRAM.scala 303:64 chipyard.TestHarness.SmallBoomConfig.fir 386320:4]
    node a_lanes_hi_lo_hi = orr(_a_lanes_T_5) @[SRAM.scala 303:95 chipyard.TestHarness.SmallBoomConfig.fir 386321:4]
    node _a_lanes_T_6 = bits(auto_in_a_bits_mask, 6, 6) @[SRAM.scala 303:64 chipyard.TestHarness.SmallBoomConfig.fir 386322:4]
    node a_lanes_hi_hi_lo = orr(_a_lanes_T_6) @[SRAM.scala 303:95 chipyard.TestHarness.SmallBoomConfig.fir 386323:4]
    node _a_lanes_T_7 = bits(auto_in_a_bits_mask, 7, 7) @[SRAM.scala 303:64 chipyard.TestHarness.SmallBoomConfig.fir 386324:4]
    node a_lanes_hi_hi_hi = orr(_a_lanes_T_7) @[SRAM.scala 303:95 chipyard.TestHarness.SmallBoomConfig.fir 386325:4]
    node a_lanes = cat(cat(cat(a_lanes_hi_hi_hi, a_lanes_hi_hi_lo), cat(a_lanes_hi_lo_hi, a_lanes_hi_lo_lo)), cat(cat(a_lanes_lo_hi_hi, a_lanes_lo_hi_lo), cat(a_lanes_lo_lo_hi, a_lanes_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 386332:4]
    node wen = and(_T_18, _T_19) @[SRAM.scala 309:52 chipyard.TestHarness.SmallBoomConfig.fir 386340:4]
    node _ren_T = not(wen) @[SRAM.scala 310:15 chipyard.TestHarness.SmallBoomConfig.fir 386343:4]
    node ren = and(_ren_T, _T_18) @[SRAM.scala 310:20 chipyard.TestHarness.SmallBoomConfig.fir 386345:4]
    node _index_T = shr(auto_in_a_bits_address, 3) @[SRAM.scala 320:36 chipyard.TestHarness.SmallBoomConfig.fir 386363:4]
    node index_lo_lo_lo = bits(_index_T, 0, 0) @[SRAM.scala 320:60 chipyard.TestHarness.SmallBoomConfig.fir 386364:4]
    node index_lo_lo_hi = bits(_index_T, 1, 1) @[SRAM.scala 320:60 chipyard.TestHarness.SmallBoomConfig.fir 386365:4]
    node index_lo_hi_lo = bits(_index_T, 2, 2) @[SRAM.scala 320:60 chipyard.TestHarness.SmallBoomConfig.fir 386366:4]
    node index_lo_hi_hi = bits(_index_T, 3, 3) @[SRAM.scala 320:60 chipyard.TestHarness.SmallBoomConfig.fir 386367:4]
    node index_hi_lo_lo = bits(_index_T, 4, 4) @[SRAM.scala 320:60 chipyard.TestHarness.SmallBoomConfig.fir 386368:4]
    node index_hi_lo_hi = bits(_index_T, 5, 5) @[SRAM.scala 320:60 chipyard.TestHarness.SmallBoomConfig.fir 386369:4]
    node index_hi_hi_lo = bits(_index_T, 6, 6) @[SRAM.scala 320:60 chipyard.TestHarness.SmallBoomConfig.fir 386370:4]
    node index_hi_hi_hi_lo = bits(_index_T, 7, 7) @[SRAM.scala 320:60 chipyard.TestHarness.SmallBoomConfig.fir 386371:4]
    node index_hi_hi_hi_hi = bits(_index_T, 8, 8) @[SRAM.scala 320:60 chipyard.TestHarness.SmallBoomConfig.fir 386372:4]
    node index_lo = cat(cat(index_lo_hi_hi, index_lo_hi_lo), cat(index_lo_lo_hi, index_lo_lo_lo)) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 386392:4]
    node index_hi = cat(cat(cat(index_hi_hi_hi_hi, index_hi_hi_hi_lo), index_hi_hi_lo), cat(index_hi_lo_hi, index_hi_lo_lo)) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 386396:4]
    auto_in_a_ready <= or(_bundleIn_0_a_ready_T_2, auto_in_d_ready) @[SRAM.scala 243:49 chipyard.TestHarness.SmallBoomConfig.fir 386133:4]
    auto_in_d_valid <= r_full @[SRAM.scala 240:65 chipyard.TestHarness.SmallBoomConfig.fir 386112:4]
    auto_in_d_bits_opcode <= pad(r_read, 3) @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 385840:4 SRAM.scala 209:23 chipyard.TestHarness.SmallBoomConfig.fir 386060:4]
    auto_in_d_bits_size <= r_size @[SRAM.scala 211:29 chipyard.TestHarness.SmallBoomConfig.fir 386062:4]
    auto_in_d_bits_source <= r_source @[SRAM.scala 212:29 chipyard.TestHarness.SmallBoomConfig.fir 386064:4]
    auto_in_d_bits_data <= cat(r_corrected_hi, r_corrected_lo) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 385960:4]
    monitor.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 385843:4]
    monitor.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 385844:4]
    monitor.io_in_a_ready <= or(_bundleIn_0_a_ready_T_2, auto_in_d_ready) @[SRAM.scala 243:49 chipyard.TestHarness.SmallBoomConfig.fir 386133:4]
    monitor.io_in_a_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 385840:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 385865:4]
    monitor.io_in_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 385840:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 385865:4]
    monitor.io_in_a_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 385840:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 385865:4]
    monitor.io_in_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 385840:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 385865:4]
    monitor.io_in_a_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 385840:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 385865:4]
    monitor.io_in_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 385840:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 385865:4]
    monitor.io_in_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 385840:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 385865:4]
    monitor.io_in_a_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 385840:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 385865:4]
    monitor.io_in_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 385840:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 385865:4]
    monitor.io_in_d_valid <= r_full @[SRAM.scala 240:65 chipyard.TestHarness.SmallBoomConfig.fir 386112:4]
    monitor.io_in_d_bits_opcode <= pad(r_read, 3) @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 385840:4 SRAM.scala 209:23 chipyard.TestHarness.SmallBoomConfig.fir 386060:4]
    monitor.io_in_d_bits_size <= r_size @[SRAM.scala 211:29 chipyard.TestHarness.SmallBoomConfig.fir 386062:4]
    monitor.io_in_d_bits_source <= r_source @[SRAM.scala 212:29 chipyard.TestHarness.SmallBoomConfig.fir 386064:4]
    mem.RW0_wdata_0 <= bits(auto_in_a_bits_data, 7, 0) @[SRAM.scala 291:67 chipyard.TestHarness.SmallBoomConfig.fir 386192:4]
    mem.RW0_wdata_1 <= bits(auto_in_a_bits_data, 15, 8) @[SRAM.scala 291:67 chipyard.TestHarness.SmallBoomConfig.fir 386193:4]
    mem.RW0_wdata_2 <= bits(auto_in_a_bits_data, 23, 16) @[SRAM.scala 291:67 chipyard.TestHarness.SmallBoomConfig.fir 386194:4]
    mem.RW0_wdata_3 <= bits(auto_in_a_bits_data, 31, 24) @[SRAM.scala 291:67 chipyard.TestHarness.SmallBoomConfig.fir 386195:4]
    mem.RW0_wdata_4 <= bits(auto_in_a_bits_data, 39, 32) @[SRAM.scala 291:67 chipyard.TestHarness.SmallBoomConfig.fir 386196:4]
    mem.RW0_wdata_5 <= bits(auto_in_a_bits_data, 47, 40) @[SRAM.scala 291:67 chipyard.TestHarness.SmallBoomConfig.fir 386197:4]
    mem.RW0_wdata_6 <= bits(auto_in_a_bits_data, 55, 48) @[SRAM.scala 291:67 chipyard.TestHarness.SmallBoomConfig.fir 386198:4]
    mem.RW0_wdata_7 <= bits(auto_in_a_bits_data, 63, 56) @[SRAM.scala 291:67 chipyard.TestHarness.SmallBoomConfig.fir 386199:4]
    mem.RW0_wmask_0 <= bits(a_lanes, 0, 0) @[SRAM.scala 322:46 chipyard.TestHarness.SmallBoomConfig.fir 386429:6]
    mem.RW0_wmask_1 <= bits(a_lanes, 1, 1) @[SRAM.scala 322:46 chipyard.TestHarness.SmallBoomConfig.fir 386430:6]
    mem.RW0_wmask_2 <= bits(a_lanes, 2, 2) @[SRAM.scala 322:46 chipyard.TestHarness.SmallBoomConfig.fir 386431:6]
    mem.RW0_wmask_3 <= bits(a_lanes, 3, 3) @[SRAM.scala 322:46 chipyard.TestHarness.SmallBoomConfig.fir 386432:6]
    mem.RW0_wmask_4 <= bits(a_lanes, 4, 4) @[SRAM.scala 322:46 chipyard.TestHarness.SmallBoomConfig.fir 386433:6]
    mem.RW0_wmask_5 <= bits(a_lanes, 5, 5) @[SRAM.scala 322:46 chipyard.TestHarness.SmallBoomConfig.fir 386434:6]
    mem.RW0_wmask_6 <= bits(a_lanes, 6, 6) @[SRAM.scala 322:46 chipyard.TestHarness.SmallBoomConfig.fir 386435:6]
    mem.RW0_wmask_7 <= bits(a_lanes, 7, 7) @[SRAM.scala 322:46 chipyard.TestHarness.SmallBoomConfig.fir 386436:6]
    r_full <= mux(reset, UInt<1>("h0"), _GEN_24) @[SRAM.scala 134:30 chipyard.TestHarness.SmallBoomConfig.fir 385881:4 SRAM.scala 134:30 chipyard.TestHarness.SmallBoomConfig.fir 385881:4]
    r_size <= mux(_T_18, auto_in_a_bits_size, r_size) @[SRAM.scala 274:24 chipyard.TestHarness.SmallBoomConfig.fir 386174:4 SRAM.scala 279:18 chipyard.TestHarness.SmallBoomConfig.fir 386179:6 SRAM.scala 137:26 chipyard.TestHarness.SmallBoomConfig.fir 385884:4]
    r_source <= mux(_T_18, auto_in_a_bits_source, r_source) @[SRAM.scala 274:24 chipyard.TestHarness.SmallBoomConfig.fir 386174:4 SRAM.scala 280:18 chipyard.TestHarness.SmallBoomConfig.fir 386180:6 SRAM.scala 138:26 chipyard.TestHarness.SmallBoomConfig.fir 385885:4]
    r_read <= mux(_T_18, a_read, r_read) @[SRAM.scala 274:24 chipyard.TestHarness.SmallBoomConfig.fir 386174:4 SRAM.scala 281:18 chipyard.TestHarness.SmallBoomConfig.fir 386181:6 SRAM.scala 139:26 chipyard.TestHarness.SmallBoomConfig.fir 385886:4]
    REG <= and(_ren_T, _T_18) @[SRAM.scala 310:20 chipyard.TestHarness.SmallBoomConfig.fir 386345:4]
    r_0 <= mux(REG, mem.RW0_rdata_0, r_0) @[Reg.scala 16:19 chipyard.TestHarness.SmallBoomConfig.fir 386409:4 Reg.scala 16:23 chipyard.TestHarness.SmallBoomConfig.fir 386410:6 Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    r_1 <= mux(REG, mem.RW0_rdata_1, r_1) @[Reg.scala 16:19 chipyard.TestHarness.SmallBoomConfig.fir 386409:4 Reg.scala 16:23 chipyard.TestHarness.SmallBoomConfig.fir 386411:6 Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    r_2 <= mux(REG, mem.RW0_rdata_2, r_2) @[Reg.scala 16:19 chipyard.TestHarness.SmallBoomConfig.fir 386409:4 Reg.scala 16:23 chipyard.TestHarness.SmallBoomConfig.fir 386412:6 Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    r_3 <= mux(REG, mem.RW0_rdata_3, r_3) @[Reg.scala 16:19 chipyard.TestHarness.SmallBoomConfig.fir 386409:4 Reg.scala 16:23 chipyard.TestHarness.SmallBoomConfig.fir 386413:6 Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    r_4 <= mux(REG, mem.RW0_rdata_4, r_4) @[Reg.scala 16:19 chipyard.TestHarness.SmallBoomConfig.fir 386409:4 Reg.scala 16:23 chipyard.TestHarness.SmallBoomConfig.fir 386414:6 Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    r_5 <= mux(REG, mem.RW0_rdata_5, r_5) @[Reg.scala 16:19 chipyard.TestHarness.SmallBoomConfig.fir 386409:4 Reg.scala 16:23 chipyard.TestHarness.SmallBoomConfig.fir 386415:6 Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    r_6 <= mux(REG, mem.RW0_rdata_6, r_6) @[Reg.scala 16:19 chipyard.TestHarness.SmallBoomConfig.fir 386409:4 Reg.scala 16:23 chipyard.TestHarness.SmallBoomConfig.fir 386416:6 Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    r_7 <= mux(REG, mem.RW0_rdata_7, r_7) @[Reg.scala 16:19 chipyard.TestHarness.SmallBoomConfig.fir 386409:4 Reg.scala 16:23 chipyard.TestHarness.SmallBoomConfig.fir 386417:6 Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 386408:4]
    mem.RW0_wmode <= and(_T_18, _T_19) @[SRAM.scala 309:52 chipyard.TestHarness.SmallBoomConfig.fir 386340:4]
    mem.RW0_clk <= clock
    mem.RW0_en <= or(ren, wen)
    mem.RW0_addr <= cat(index_hi, index_lo) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 386397:4]

  module TLXbar_10_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 386473:2]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_in_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_in_a_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_in_a_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_in_a_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_in_a_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_in_d_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_in_d_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_in_d_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_in_d_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_out_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_out_a_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_out_a_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_out_a_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_out_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_out_a_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_out_d_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_out_d_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_out_d_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_out_d_bits_sink : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_out_d_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_out_d_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]
    input auto_out_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 386476:4]

    auto_in_a_ready <= auto_out_a_ready @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 386481:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 386485:4]
    auto_in_d_valid <= auto_out_d_valid @[ReadyValidCancel.scala 21:38 chipyard.TestHarness.SmallBoomConfig.fir 386897:4]
    auto_in_d_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 386481:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 386485:4]
    auto_in_d_bits_param <= auto_out_d_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 386481:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 386485:4]
    auto_in_d_bits_size <= auto_out_d_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 386481:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 386485:4]
    auto_in_d_bits_source <= auto_out_d_bits_source @[Xbar.scala 228:69 chipyard.TestHarness.SmallBoomConfig.fir 386596:4]
    auto_in_d_bits_sink <= auto_out_d_bits_sink @[Xbar.scala 323:53 chipyard.TestHarness.SmallBoomConfig.fir 386658:4]
    auto_in_d_bits_denied <= auto_out_d_bits_denied @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 386481:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 386485:4]
    auto_in_d_bits_data <= auto_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 386481:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 386485:4]
    auto_in_d_bits_corrupt <= auto_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 386481:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 386485:4]
    auto_out_a_valid <= auto_in_a_valid @[ReadyValidCancel.scala 21:38 chipyard.TestHarness.SmallBoomConfig.fir 386922:4]
    auto_out_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 386483:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 386486:4]
    auto_out_a_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 386483:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 386486:4]
    auto_out_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 386483:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 386486:4]
    auto_out_a_bits_source <= auto_in_a_bits_source @[Xbar.scala 237:55 chipyard.TestHarness.SmallBoomConfig.fir 386550:4]
    auto_out_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 386483:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 386486:4]
    auto_out_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 386483:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 386486:4]
    auto_out_a_bits_data <= auto_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 386483:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 386486:4]
    auto_out_a_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 386483:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 386486:4]
    auto_out_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 386483:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 386486:4]

  module TLMonitor_55_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 386999:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 387000:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 387001:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_a_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_a_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_a_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_d_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_d_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_d_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]
    input io_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 387002:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.SmallBoomConfig.fir 388493:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.SmallBoomConfig.fir 388800:4]
    node _source_ok_T_4 = leq(io_in_a_bits_source, UInt<8>("h9f")) @[Parameters.scala 57:20 chipyard.TestHarness.SmallBoomConfig.fir 387019:6]
    node _is_aligned_mask_T_1 = dshlw(UInt<6>("h7"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.SmallBoomConfig.fir 387025:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 2, 0) @[package.scala 234:82 chipyard.TestHarness.SmallBoomConfig.fir 387026:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.SmallBoomConfig.fir 387027:6]
    node _GEN_71 = pad(is_aligned_mask, 29) @[Edges.scala 20:16 chipyard.TestHarness.SmallBoomConfig.fir 387028:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.SmallBoomConfig.fir 387028:6]
    node is_aligned = eq(_is_aligned_T, UInt<29>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.SmallBoomConfig.fir 387029:6]
    node _mask_sizeOH_T = pad(io_in_a_bits_size, 3) @[Misc.scala 201:34 chipyard.TestHarness.SmallBoomConfig.fir 387030:6]
    node mask_sizeOH_shiftAmount = bits(_mask_sizeOH_T, 1, 0) @[OneHot.scala 64:49 chipyard.TestHarness.SmallBoomConfig.fir 387031:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<4>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.SmallBoomConfig.fir 387032:6]
    node _mask_sizeOH_T_2 = bits(_mask_sizeOH_T_1, 2, 0) @[OneHot.scala 65:27 chipyard.TestHarness.SmallBoomConfig.fir 387033:6]
    node mask_sizeOH = or(_mask_sizeOH_T_2, UInt<3>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.SmallBoomConfig.fir 387034:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<2>("h3")) @[Misc.scala 205:21 chipyard.TestHarness.SmallBoomConfig.fir 387035:6]
    node mask_size = bits(mask_sizeOH, 2, 2) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 387036:6]
    node mask_bit = bits(io_in_a_bits_address, 2, 2) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 387037:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 387038:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387040:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387041:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387043:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387044:6]
    node mask_size_1 = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 387045:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 387046:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 387047:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 387048:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387049:6]
    node mask_acc_2 = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387050:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 387051:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387052:6]
    node mask_acc_3 = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387053:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 387054:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387055:6]
    node mask_acc_4 = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387056:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 387057:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387058:6]
    node mask_acc_5 = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387059:6]
    node mask_size_2 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 387060:6]
    node mask_bit_2 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 387061:6]
    node mask_nbit_2 = not(mask_bit_2) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 387062:6]
    node mask_eq_6 = and(mask_eq_2, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 387063:6]
    node _mask_acc_T_6 = and(mask_size_2, mask_eq_6) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387064:6]
    node mask_lo_lo_lo = or(mask_acc_2, _mask_acc_T_6) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387065:6]
    node mask_eq_7 = and(mask_eq_2, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 387066:6]
    node _mask_acc_T_7 = and(mask_size_2, mask_eq_7) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387067:6]
    node mask_lo_lo_hi = or(mask_acc_2, _mask_acc_T_7) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387068:6]
    node mask_eq_8 = and(mask_eq_3, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 387069:6]
    node _mask_acc_T_8 = and(mask_size_2, mask_eq_8) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387070:6]
    node mask_lo_hi_lo = or(mask_acc_3, _mask_acc_T_8) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387071:6]
    node mask_eq_9 = and(mask_eq_3, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 387072:6]
    node _mask_acc_T_9 = and(mask_size_2, mask_eq_9) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387073:6]
    node mask_lo_hi_hi = or(mask_acc_3, _mask_acc_T_9) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387074:6]
    node mask_eq_10 = and(mask_eq_4, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 387075:6]
    node _mask_acc_T_10 = and(mask_size_2, mask_eq_10) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387076:6]
    node mask_hi_lo_lo = or(mask_acc_4, _mask_acc_T_10) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387077:6]
    node mask_eq_11 = and(mask_eq_4, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 387078:6]
    node _mask_acc_T_11 = and(mask_size_2, mask_eq_11) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387079:6]
    node mask_hi_lo_hi = or(mask_acc_4, _mask_acc_T_11) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387080:6]
    node mask_eq_12 = and(mask_eq_5, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 387081:6]
    node _mask_acc_T_12 = and(mask_size_2, mask_eq_12) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387082:6]
    node mask_hi_hi_lo = or(mask_acc_5, _mask_acc_T_12) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387083:6]
    node mask_eq_13 = and(mask_eq_5, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 387084:6]
    node _mask_acc_T_13 = and(mask_size_2, mask_eq_13) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 387085:6]
    node mask_hi_hi_hi = or(mask_acc_5, _mask_acc_T_13) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 387086:6]
    node mask = cat(cat(cat(mask_hi_hi_hi, mask_hi_hi_lo), cat(mask_hi_lo_hi, mask_hi_lo_lo)), cat(cat(mask_lo_hi_hi, mask_lo_hi_lo), cat(mask_lo_lo_hi, mask_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 387093:6]
    node _T_20 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.SmallBoomConfig.fir 387116:6]
    node _T_33 = xor(io_in_a_bits_address, UInt<29>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 387132:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 387133:8]
    node _T_35 = and(_T_34, SInt<30>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 387134:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 387135:8]
    node _T_37 = eq(_T_36, SInt<30>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 387136:8]
    node _T_43 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387142:8]
    node _T_60 = or(_source_ok_T_4, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387167:8]
    node _T_61 = not(_T_60) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387168:8]
    node _T_64 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387175:8]
    node _T_65 = not(_T_64) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387176:8]
    node _T_67 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387182:8]
    node _T_68 = not(_T_67) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387183:8]
    node _T_69 = leq(io_in_a_bits_param, UInt<3>("h2")) @[Bundles.scala 108:27 chipyard.TestHarness.SmallBoomConfig.fir 387188:8]
    node _T_71 = or(_T_69, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387190:8]
    node _T_72 = not(_T_71) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387191:8]
    node _T_73 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.SmallBoomConfig.fir 387196:8]
    node _T_74 = eq(_T_73, UInt<8>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.SmallBoomConfig.fir 387197:8]
    node _T_76 = or(_T_74, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387199:8]
    node _T_77 = not(_T_76) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387200:8]
    node _T_78 = not(io_in_a_bits_corrupt) @[Monitor.scala 89:18 chipyard.TestHarness.SmallBoomConfig.fir 387205:8]
    node _T_80 = or(_T_78, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387207:8]
    node _T_81 = not(_T_80) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387208:8]
    node _T_82 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.SmallBoomConfig.fir 387214:6]
    node _T_135 = neq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 99:31 chipyard.TestHarness.SmallBoomConfig.fir 387294:8]
    node _T_137 = or(_T_135, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387296:8]
    node _T_138 = not(_T_137) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387297:8]
    node _T_148 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.SmallBoomConfig.fir 387320:6]
    node _T_175 = or(_T_37, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387354:8]
    node _T_176 = not(_T_175) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387355:8]
    node _T_183 = eq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 109:31 chipyard.TestHarness.SmallBoomConfig.fir 387374:8]
    node _T_185 = or(_T_183, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387376:8]
    node _T_186 = not(_T_185) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387377:8]
    node _T_187 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.SmallBoomConfig.fir 387382:8]
    node _T_189 = or(_T_187, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387384:8]
    node _T_190 = not(_T_189) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387385:8]
    node _T_195 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.SmallBoomConfig.fir 387399:6]
    node _T_218 = and(_source_ok_T_4, _T_37) @[Monitor.scala 115:71 chipyard.TestHarness.SmallBoomConfig.fir 387425:8]
    node _T_220 = or(_T_218, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387427:8]
    node _T_221 = not(_T_220) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387428:8]
    node _T_236 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.SmallBoomConfig.fir 387464:6]
    node _T_273 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.SmallBoomConfig.fir 387520:8]
    node _T_274 = and(io_in_a_bits_mask, _T_273) @[Monitor.scala 127:31 chipyard.TestHarness.SmallBoomConfig.fir 387521:8]
    node _T_275 = eq(_T_274, UInt<8>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.SmallBoomConfig.fir 387522:8]
    node _T_277 = or(_T_275, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387524:8]
    node _T_278 = not(_T_277) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387525:8]
    node _T_279 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.SmallBoomConfig.fir 387531:6]
    node _T_309 = leq(io_in_a_bits_param, UInt<3>("h4")) @[Bundles.scala 138:33 chipyard.TestHarness.SmallBoomConfig.fir 387576:8]
    node _T_311 = or(_T_309, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387578:8]
    node _T_312 = not(_T_311) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387579:8]
    node _T_317 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.SmallBoomConfig.fir 387593:6]
    node _T_347 = leq(io_in_a_bits_param, UInt<3>("h3")) @[Bundles.scala 145:30 chipyard.TestHarness.SmallBoomConfig.fir 387638:8]
    node _T_349 = or(_T_347, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387640:8]
    node _T_350 = not(_T_349) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387641:8]
    node _T_355 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.SmallBoomConfig.fir 387655:6]
    node _T_385 = leq(io_in_a_bits_param, UInt<3>("h1")) @[Bundles.scala 158:28 chipyard.TestHarness.SmallBoomConfig.fir 387700:8]
    node _T_387 = or(_T_385, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387702:8]
    node _T_388 = not(_T_387) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387703:8]
    node _T_397 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.SmallBoomConfig.fir 387727:6]
    node _T_399 = or(_T_397, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387729:6]
    node _T_400 = not(_T_399) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387730:6]
    node _source_ok_T_10 = leq(io_in_d_bits_source, UInt<8>("h9f")) @[Parameters.scala 57:20 chipyard.TestHarness.SmallBoomConfig.fir 387741:6]
    node _T_401 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.SmallBoomConfig.fir 387747:6]
    node _T_403 = or(_source_ok_T_10, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387750:8]
    node _T_404 = not(_T_403) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387751:8]
    node _T_405 = geq(io_in_d_bits_size, UInt<2>("h3")) @[Monitor.scala 312:27 chipyard.TestHarness.SmallBoomConfig.fir 387756:8]
    node _T_407 = or(_T_405, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387758:8]
    node _T_408 = not(_T_407) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387759:8]
    node _T_409 = eq(io_in_d_bits_param, UInt<2>("h0")) @[Monitor.scala 313:28 chipyard.TestHarness.SmallBoomConfig.fir 387764:8]
    node _T_411 = or(_T_409, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387766:8]
    node _T_412 = not(_T_411) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387767:8]
    node _T_413 = not(io_in_d_bits_corrupt) @[Monitor.scala 314:15 chipyard.TestHarness.SmallBoomConfig.fir 387772:8]
    node _T_415 = or(_T_413, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387774:8]
    node _T_416 = not(_T_415) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387775:8]
    node _T_417 = not(io_in_d_bits_denied) @[Monitor.scala 315:15 chipyard.TestHarness.SmallBoomConfig.fir 387780:8]
    node _T_419 = or(_T_417, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387782:8]
    node _T_420 = not(_T_419) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387783:8]
    node _T_421 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.SmallBoomConfig.fir 387789:6]
    node _T_432 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 102:26 chipyard.TestHarness.SmallBoomConfig.fir 387813:8]
    node _T_434 = or(_T_432, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387815:8]
    node _T_435 = not(_T_434) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387816:8]
    node _T_436 = neq(io_in_d_bits_param, UInt<2>("h2")) @[Monitor.scala 323:28 chipyard.TestHarness.SmallBoomConfig.fir 387821:8]
    node _T_438 = or(_T_436, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387823:8]
    node _T_439 = not(_T_438) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387824:8]
    node _T_449 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.SmallBoomConfig.fir 387847:6]
    node _T_469 = or(_T_417, io_in_d_bits_corrupt) @[Monitor.scala 334:30 chipyard.TestHarness.SmallBoomConfig.fir 387888:8]
    node _T_471 = or(_T_469, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387890:8]
    node _T_472 = not(_T_471) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387891:8]
    node _T_478 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.SmallBoomConfig.fir 387906:6]
    node _T_495 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.SmallBoomConfig.fir 387941:6]
    node _T_513 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.SmallBoomConfig.fir 387977:6]
    node a_first_done = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 388043:4]
    reg a_first_counter : UInt<1>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388052:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 388053:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 388054:4]
    node a_first = not(a_first_counter) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 388055:4]
    node _a_first_counter_T = mux(a_first, UInt<1>("h0"), a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 388063:6]
    node _GEN_0 = mux(a_first_done, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 388062:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 388064:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388052:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.SmallBoomConfig.fir 388066:4]
    reg param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), param) @[Monitor.scala 385:22 chipyard.TestHarness.SmallBoomConfig.fir 388067:4]
    reg size : UInt<2>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.SmallBoomConfig.fir 388068:4]
    reg source : UInt<8>, clock with :
      reset => (UInt<1>("h0"), source) @[Monitor.scala 387:22 chipyard.TestHarness.SmallBoomConfig.fir 388069:4]
    reg address : UInt<29>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.SmallBoomConfig.fir 388070:4]
    node _T_542 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.SmallBoomConfig.fir 388071:4]
    node _T_543 = and(io_in_a_valid, _T_542) @[Monitor.scala 389:19 chipyard.TestHarness.SmallBoomConfig.fir 388072:4]
    node _T_544 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.SmallBoomConfig.fir 388074:6]
    node _T_546 = or(_T_544, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388076:6]
    node _T_547 = not(_T_546) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388077:6]
    node _T_548 = eq(io_in_a_bits_param, param) @[Monitor.scala 391:32 chipyard.TestHarness.SmallBoomConfig.fir 388082:6]
    node _T_550 = or(_T_548, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388084:6]
    node _T_551 = not(_T_550) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388085:6]
    node _T_552 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.SmallBoomConfig.fir 388090:6]
    node _T_554 = or(_T_552, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388092:6]
    node _T_555 = not(_T_554) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388093:6]
    node _T_556 = eq(io_in_a_bits_source, source) @[Monitor.scala 393:32 chipyard.TestHarness.SmallBoomConfig.fir 388098:6]
    node _T_558 = or(_T_556, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388100:6]
    node _T_559 = not(_T_558) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388101:6]
    node _T_560 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.SmallBoomConfig.fir 388106:6]
    node _T_562 = or(_T_560, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388108:6]
    node _T_563 = not(_T_562) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388109:6]
    node _T_565 = and(a_first_done, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.SmallBoomConfig.fir 388116:4]
    node d_first_done = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 388124:4]
    reg d_first_counter : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388132:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 388133:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 388134:4]
    node d_first = not(d_first_counter) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 388135:4]
    node _d_first_counter_T = mux(d_first, UInt<1>("h0"), d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 388143:6]
    node _GEN_6 = mux(d_first_done, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 388142:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 388144:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388132:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.SmallBoomConfig.fir 388146:4]
    reg param_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), param_1) @[Monitor.scala 536:22 chipyard.TestHarness.SmallBoomConfig.fir 388147:4]
    reg size_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.SmallBoomConfig.fir 388148:4]
    reg source_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.SmallBoomConfig.fir 388149:4]
    reg sink : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sink) @[Monitor.scala 539:22 chipyard.TestHarness.SmallBoomConfig.fir 388150:4]
    reg denied : UInt<1>, clock with :
      reset => (UInt<1>("h0"), denied) @[Monitor.scala 540:22 chipyard.TestHarness.SmallBoomConfig.fir 388151:4]
    node _T_566 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.SmallBoomConfig.fir 388152:4]
    node _T_567 = and(io_in_d_valid, _T_566) @[Monitor.scala 541:19 chipyard.TestHarness.SmallBoomConfig.fir 388153:4]
    node _T_568 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.SmallBoomConfig.fir 388155:6]
    node _T_570 = or(_T_568, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388157:6]
    node _T_571 = not(_T_570) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388158:6]
    node _T_572 = eq(io_in_d_bits_param, param_1) @[Monitor.scala 543:29 chipyard.TestHarness.SmallBoomConfig.fir 388163:6]
    node _T_574 = or(_T_572, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388165:6]
    node _T_575 = not(_T_574) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388166:6]
    node _T_576 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.SmallBoomConfig.fir 388171:6]
    node _T_578 = or(_T_576, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388173:6]
    node _T_579 = not(_T_578) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388174:6]
    node _T_580 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.SmallBoomConfig.fir 388179:6]
    node _T_582 = or(_T_580, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388181:6]
    node _T_583 = not(_T_582) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388182:6]
    node _T_584 = eq(io_in_d_bits_sink, sink) @[Monitor.scala 546:29 chipyard.TestHarness.SmallBoomConfig.fir 388187:6]
    node _T_586 = or(_T_584, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388189:6]
    node _T_587 = not(_T_586) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388190:6]
    node _T_588 = eq(io_in_d_bits_denied, denied) @[Monitor.scala 547:29 chipyard.TestHarness.SmallBoomConfig.fir 388195:6]
    node _T_590 = or(_T_588, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388197:6]
    node _T_591 = not(_T_590) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388198:6]
    node _T_593 = and(d_first_done, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.SmallBoomConfig.fir 388205:4]
    reg inflight : UInt<160>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 388214:4]
    reg inflight_opcodes : UInt<640>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 388215:4]
    reg inflight_sizes : UInt<640>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 388216:4]
    reg a_first_counter_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388226:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 388227:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 388228:4]
    node a_first_1 = not(a_first_counter_1) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 388229:4]
    node _a_first_counter_T_1 = mux(a_first_1, UInt<1>("h0"), a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 388237:6]
    node _GEN_13 = mux(a_first_done, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 388236:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 388238:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388226:4]
    reg d_first_counter_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388248:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 388249:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 388250:4]
    node d_first_1 = not(d_first_counter_1) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 388251:4]
    node _d_first_counter_T_1 = mux(d_first_1, UInt<1>("h0"), d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 388259:6]
    node _GEN_14 = mux(d_first_done, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 388258:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 388260:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388248:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.SmallBoomConfig.fir 388272:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 11) @[Monitor.scala 634:69 chipyard.TestHarness.SmallBoomConfig.fir 388272:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.SmallBoomConfig.fir 388273:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 388276:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 388277:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_5, 640) @[Monitor.scala 634:97 chipyard.TestHarness.SmallBoomConfig.fir 388278:4]
    node _a_opcode_lookup_T_6 = and(_a_opcode_lookup_T_1, _GEN_73) @[Monitor.scala 634:97 chipyard.TestHarness.SmallBoomConfig.fir 388278:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.SmallBoomConfig.fir 388279:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 640) @[Monitor.scala 634:152 chipyard.TestHarness.SmallBoomConfig.fir 388279:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_opcode_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.SmallBoomConfig.fir 388284:4]
    node _a_size_lookup_T_6 = and(_a_size_lookup_T_1, _GEN_73) @[Monitor.scala 638:91 chipyard.TestHarness.SmallBoomConfig.fir 388289:4]
    node _GEN_77 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.SmallBoomConfig.fir 388290:4]
    node _a_size_lookup_T_7 = pad(_GEN_77, 640) @[Monitor.scala 638:144 chipyard.TestHarness.SmallBoomConfig.fir 388290:4]
    node _T_594 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.SmallBoomConfig.fir 388314:4]
    node _a_set_wo_ready_T = dshlw(UInt<256>("h1"), io_in_a_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.SmallBoomConfig.fir 388317:6]
    node _GEN_15 = mux(_T_594, _a_set_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.SmallBoomConfig.fir 388316:4 Monitor.scala 649:22 chipyard.TestHarness.SmallBoomConfig.fir 388318:6 chipyard.TestHarness.SmallBoomConfig.fir 388265:4]
    node _T_597 = and(a_first_done, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.SmallBoomConfig.fir 388321:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.SmallBoomConfig.fir 388326:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.SmallBoomConfig.fir 388327:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.SmallBoomConfig.fir 388329:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<3>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.SmallBoomConfig.fir 388330:6]
    node _GEN_78 = shl(io_in_a_bits_source, 2) @[Monitor.scala 656:79 chipyard.TestHarness.SmallBoomConfig.fir 388332:6]
    node _a_opcodes_set_T = pad(_GEN_78, 11) @[Monitor.scala 656:79 chipyard.TestHarness.SmallBoomConfig.fir 388332:6]
    node a_opcodes_set_interm = mux(_T_597, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 388323:4 Monitor.scala 654:28 chipyard.TestHarness.SmallBoomConfig.fir 388328:6 chipyard.TestHarness.SmallBoomConfig.fir 388311:4]
    node _GEN_79 = pad(a_opcodes_set_interm, 2051) @[Monitor.scala 656:54 chipyard.TestHarness.SmallBoomConfig.fir 388333:6]
    node _a_opcodes_set_T_1 = dshlw(_GEN_79, _a_opcodes_set_T) @[Monitor.scala 656:54 chipyard.TestHarness.SmallBoomConfig.fir 388333:6]
    node a_sizes_set_interm = mux(_T_597, _a_sizes_set_interm_T_1, UInt<3>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 388323:4 Monitor.scala 655:28 chipyard.TestHarness.SmallBoomConfig.fir 388331:6 chipyard.TestHarness.SmallBoomConfig.fir 388313:4]
    node _GEN_81 = pad(a_sizes_set_interm, 2050) @[Monitor.scala 657:52 chipyard.TestHarness.SmallBoomConfig.fir 388336:6]
    node _a_sizes_set_T_1 = dshlw(_GEN_81, _a_opcodes_set_T) @[Monitor.scala 657:52 chipyard.TestHarness.SmallBoomConfig.fir 388336:6]
    node _T_599 = dshr(inflight, io_in_a_bits_source) @[Monitor.scala 658:26 chipyard.TestHarness.SmallBoomConfig.fir 388338:6]
    node _T_600 = bits(_T_599, 0, 0) @[Monitor.scala 658:26 chipyard.TestHarness.SmallBoomConfig.fir 388339:6]
    node _T_601 = not(_T_600) @[Monitor.scala 658:17 chipyard.TestHarness.SmallBoomConfig.fir 388340:6]
    node _T_603 = or(_T_601, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388342:6]
    node _T_604 = not(_T_603) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388343:6]
    node _GEN_16 = mux(_T_597, _a_set_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 388323:4 Monitor.scala 653:28 chipyard.TestHarness.SmallBoomConfig.fir 388325:6 chipyard.TestHarness.SmallBoomConfig.fir 388263:4]
    node _GEN_19 = mux(_T_597, _a_opcodes_set_T_1, UInt<2051>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 388323:4 Monitor.scala 656:28 chipyard.TestHarness.SmallBoomConfig.fir 388334:6 chipyard.TestHarness.SmallBoomConfig.fir 388267:4]
    node _GEN_20 = mux(_T_597, _a_sizes_set_T_1, UInt<2050>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 388323:4 Monitor.scala 657:28 chipyard.TestHarness.SmallBoomConfig.fir 388337:6 chipyard.TestHarness.SmallBoomConfig.fir 388269:4]
    node _T_605 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.SmallBoomConfig.fir 388358:4]
    node _T_607 = not(_T_401) @[Monitor.scala 671:74 chipyard.TestHarness.SmallBoomConfig.fir 388360:4]
    node _T_608 = and(_T_605, _T_607) @[Monitor.scala 671:71 chipyard.TestHarness.SmallBoomConfig.fir 388361:4]
    node _d_clr_wo_ready_T = dshlw(UInt<256>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.SmallBoomConfig.fir 388363:6]
    node _GEN_21 = mux(_T_608, _d_clr_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.SmallBoomConfig.fir 388362:4 Monitor.scala 672:22 chipyard.TestHarness.SmallBoomConfig.fir 388364:6 chipyard.TestHarness.SmallBoomConfig.fir 388352:4]
    node _T_610 = and(d_first_done, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.SmallBoomConfig.fir 388367:4]
    node _T_613 = and(_T_610, _T_607) @[Monitor.scala 675:72 chipyard.TestHarness.SmallBoomConfig.fir 388370:4]
    node _GEN_83 = pad(_a_opcode_lookup_T_5, 2063) @[Monitor.scala 677:76 chipyard.TestHarness.SmallBoomConfig.fir 388379:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_83, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.SmallBoomConfig.fir 388379:6]
    node _GEN_22 = mux(_T_613, _d_clr_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.SmallBoomConfig.fir 388371:4 Monitor.scala 676:21 chipyard.TestHarness.SmallBoomConfig.fir 388373:6 chipyard.TestHarness.SmallBoomConfig.fir 388350:4]
    node _GEN_23 = mux(_T_613, _d_opcodes_clr_T_5, UInt<2063>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.SmallBoomConfig.fir 388371:4 Monitor.scala 677:21 chipyard.TestHarness.SmallBoomConfig.fir 388380:6 chipyard.TestHarness.SmallBoomConfig.fir 388354:4]
    node _same_cycle_resp_T_2 = eq(io_in_a_bits_source, io_in_d_bits_source) @[Monitor.scala 681:113 chipyard.TestHarness.SmallBoomConfig.fir 388396:6]
    node same_cycle_resp = and(_T_594, _same_cycle_resp_T_2) @[Monitor.scala 681:88 chipyard.TestHarness.SmallBoomConfig.fir 388397:6]
    node _T_618 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.SmallBoomConfig.fir 388398:6]
    node _T_619 = bits(_T_618, 0, 0) @[Monitor.scala 682:25 chipyard.TestHarness.SmallBoomConfig.fir 388399:6]
    node _T_620 = or(_T_619, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.SmallBoomConfig.fir 388400:6]
    node _T_622 = or(_T_620, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388402:6]
    node _T_623 = not(_T_622) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388403:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 388409:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 388409:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 388409:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 388409:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 388409:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 388409:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 388409:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 388409:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 388409:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 388409:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 388409:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 388409:8]
    node _T_624 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 388409:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 388410:8 Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 388410:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 388410:8 Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 388410:8]
    node _T_625 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 388410:8]
    node _T_626 = or(_T_624, _T_625) @[Monitor.scala 685:77 chipyard.TestHarness.SmallBoomConfig.fir 388411:8]
    node _T_628 = or(_T_626, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388413:8]
    node _T_629 = not(_T_628) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388414:8]
    node _T_630 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.SmallBoomConfig.fir 388419:8]
    node _T_632 = or(_T_630, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388421:8]
    node _T_633 = not(_T_632) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388422:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 388270:4 Monitor.scala 634:21 chipyard.TestHarness.SmallBoomConfig.fir 388280:4]
    node _T_634 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 388429:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_634), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 388430:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 388430:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_634), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 388430:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 388430:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_634), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 388430:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 388430:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_634), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 388430:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 388430:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 388430:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 388430:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 388430:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 388430:8]
    node _T_635 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 388430:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 388432:8 Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 388432:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 388432:8 Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 388432:8]
    node _T_637 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 388432:8]
    node _T_638 = or(_T_635, _T_637) @[Monitor.scala 689:72 chipyard.TestHarness.SmallBoomConfig.fir 388433:8]
    node _T_640 = or(_T_638, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388435:8]
    node _T_641 = not(_T_640) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388436:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 388281:4 Monitor.scala 638:19 chipyard.TestHarness.SmallBoomConfig.fir 388291:4]
    node _GEN_86 = pad(io_in_d_bits_size, 4) @[Monitor.scala 691:36 chipyard.TestHarness.SmallBoomConfig.fir 388441:8]
    node _T_642 = eq(_GEN_86, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.SmallBoomConfig.fir 388441:8]
    node _T_644 = or(_T_642, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388443:8]
    node _T_645 = not(_T_644) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388444:8]
    node _T_647 = and(_T_605, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.SmallBoomConfig.fir 388452:4]
    node _T_648 = and(_T_647, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.SmallBoomConfig.fir 388453:4]
    node _T_650 = and(_T_648, _same_cycle_resp_T_2) @[Monitor.scala 694:65 chipyard.TestHarness.SmallBoomConfig.fir 388455:4]
    node _T_652 = and(_T_650, _T_607) @[Monitor.scala 694:116 chipyard.TestHarness.SmallBoomConfig.fir 388457:4]
    node _T_653 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.SmallBoomConfig.fir 388459:6]
    node _T_654 = or(_T_653, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.SmallBoomConfig.fir 388460:6]
    node _T_656 = or(_T_654, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388462:6]
    node _T_657 = not(_T_656) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388463:6]
    node a_set_wo_ready = bits(_GEN_15, 159, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 388264:4]
    node d_clr_wo_ready = bits(_GEN_21, 159, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 388351:4]
    node _T_658 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.SmallBoomConfig.fir 388469:4]
    node _T_659 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.SmallBoomConfig.fir 388470:4]
    node _T_660 = not(_T_659) @[Monitor.scala 699:51 chipyard.TestHarness.SmallBoomConfig.fir 388471:4]
    node _T_661 = or(_T_658, _T_660) @[Monitor.scala 699:48 chipyard.TestHarness.SmallBoomConfig.fir 388472:4]
    node _T_663 = or(_T_661, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388474:4]
    node _T_664 = not(_T_663) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388475:4]
    node a_set = bits(_GEN_16, 159, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 388262:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.SmallBoomConfig.fir 388480:4]
    node d_clr = bits(_GEN_22, 159, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 388349:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.SmallBoomConfig.fir 388481:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.SmallBoomConfig.fir 388482:4]
    node a_opcodes_set = bits(_GEN_19, 639, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 388266:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.SmallBoomConfig.fir 388484:4]
    node d_opcodes_clr = bits(_GEN_23, 639, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 388353:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.SmallBoomConfig.fir 388485:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.SmallBoomConfig.fir 388486:4]
    node a_sizes_set = bits(_GEN_20, 639, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 388268:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.SmallBoomConfig.fir 388488:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_opcodes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.SmallBoomConfig.fir 388490:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 388492:4]
    node _T_665 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.SmallBoomConfig.fir 388495:4]
    node _T_666 = not(_T_665) @[Monitor.scala 709:16 chipyard.TestHarness.SmallBoomConfig.fir 388496:4]
    node _T_667 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.SmallBoomConfig.fir 388497:4]
    node _T_668 = or(_T_666, _T_667) @[Monitor.scala 709:30 chipyard.TestHarness.SmallBoomConfig.fir 388498:4]
    node _T_669 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.SmallBoomConfig.fir 388499:4]
    node _T_670 = or(_T_668, _T_669) @[Monitor.scala 709:47 chipyard.TestHarness.SmallBoomConfig.fir 388500:4]
    node _T_672 = or(_T_670, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388502:4]
    node _T_673 = not(_T_672) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388503:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.SmallBoomConfig.fir 388508:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.SmallBoomConfig.fir 388509:4]
    node _T_676 = or(a_first_done, d_first_done) @[Monitor.scala 712:27 chipyard.TestHarness.SmallBoomConfig.fir 388513:4]
    node _GEN_57 = mux(_T_676, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.SmallBoomConfig.fir 388514:4 Monitor.scala 712:58 chipyard.TestHarness.SmallBoomConfig.fir 388515:6 Monitor.scala 711:14 chipyard.TestHarness.SmallBoomConfig.fir 388510:4]
    reg inflight_1 : UInt<160>, clock with :
      reset => (UInt<1>("h0"), inflight_1) @[Monitor.scala 723:35 chipyard.TestHarness.SmallBoomConfig.fir 388517:4]
    reg inflight_sizes_1 : UInt<640>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 388519:4]
    reg d_first_counter_2 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388554:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 388555:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 388556:4]
    node d_first_2 = not(d_first_counter_2) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 388557:4]
    node _d_first_counter_T_2 = mux(d_first_2, UInt<1>("h0"), d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 388565:6]
    node _GEN_59 = mux(d_first_done, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 388564:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 388566:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388554:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_opcode_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.SmallBoomConfig.fir 388590:4]
    node _c_size_lookup_T_6 = and(_c_size_lookup_T_1, _GEN_73) @[Monitor.scala 747:93 chipyard.TestHarness.SmallBoomConfig.fir 388595:4]
    node _GEN_92 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.SmallBoomConfig.fir 388596:4]
    node _c_size_lookup_T_7 = pad(_GEN_92, 640) @[Monitor.scala 747:146 chipyard.TestHarness.SmallBoomConfig.fir 388596:4]
    node _T_694 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.SmallBoomConfig.fir 388674:4]
    node _T_696 = and(_T_694, _T_401) @[Monitor.scala 779:71 chipyard.TestHarness.SmallBoomConfig.fir 388676:4]
    node _T_698 = and(d_first_done, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.SmallBoomConfig.fir 388682:4]
    node _T_700 = and(_T_698, _T_401) @[Monitor.scala 783:72 chipyard.TestHarness.SmallBoomConfig.fir 388684:4]
    node _GEN_67 = mux(_T_700, _d_clr_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.SmallBoomConfig.fir 388685:4 Monitor.scala 784:21 chipyard.TestHarness.SmallBoomConfig.fir 388687:6 chipyard.TestHarness.SmallBoomConfig.fir 388666:4]
    node _GEN_68 = mux(_T_700, _d_opcodes_clr_T_5, UInt<2063>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.SmallBoomConfig.fir 388685:4 Monitor.scala 785:21 chipyard.TestHarness.SmallBoomConfig.fir 388694:6 chipyard.TestHarness.SmallBoomConfig.fir 388670:4]
    node _T_704 = dshr(inflight_1, io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.SmallBoomConfig.fir 388720:6]
    node _T_705 = bits(_T_704, 0, 0) @[Monitor.scala 791:25 chipyard.TestHarness.SmallBoomConfig.fir 388721:6]
    node _T_708 = or(_T_705, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388724:6]
    node _T_709 = not(_T_708) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388725:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 388578:4 Monitor.scala 747:21 chipyard.TestHarness.SmallBoomConfig.fir 388597:4]
    node _T_714 = eq(_GEN_86, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.SmallBoomConfig.fir 388743:8]
    node _T_716 = or(_T_714, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388745:8]
    node _T_717 = not(_T_716) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388746:8]
    node d_clr_1 = bits(_GEN_67, 159, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 388665:4]
    node _inflight_T_4 = not(d_clr_1) @[Monitor.scala 809:46 chipyard.TestHarness.SmallBoomConfig.fir 388788:4]
    node _inflight_T_5 = and(inflight_1, _inflight_T_4) @[Monitor.scala 809:44 chipyard.TestHarness.SmallBoomConfig.fir 388789:4]
    node d_opcodes_clr_1 = bits(_GEN_68, 639, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 388669:4]
    node _inflight_opcodes_T_4 = not(d_opcodes_clr_1) @[Monitor.scala 810:62 chipyard.TestHarness.SmallBoomConfig.fir 388792:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_opcodes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.SmallBoomConfig.fir 388797:4]
    reg watchdog_1 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog_1) @[Monitor.scala 813:27 chipyard.TestHarness.SmallBoomConfig.fir 388799:4]
    node _T_734 = orr(inflight_1) @[Monitor.scala 816:26 chipyard.TestHarness.SmallBoomConfig.fir 388802:4]
    node _T_735 = not(_T_734) @[Monitor.scala 816:16 chipyard.TestHarness.SmallBoomConfig.fir 388803:4]
    node _T_736 = eq(plusarg_reader_1.out, UInt<32>("h0")) @[Monitor.scala 816:39 chipyard.TestHarness.SmallBoomConfig.fir 388804:4]
    node _T_737 = or(_T_735, _T_736) @[Monitor.scala 816:30 chipyard.TestHarness.SmallBoomConfig.fir 388805:4]
    node _T_738 = lt(watchdog_1, plusarg_reader_1.out) @[Monitor.scala 816:59 chipyard.TestHarness.SmallBoomConfig.fir 388806:4]
    node _T_739 = or(_T_737, _T_738) @[Monitor.scala 816:47 chipyard.TestHarness.SmallBoomConfig.fir 388807:4]
    node _T_741 = or(_T_739, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388809:4]
    node _T_742 = not(_T_741) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388810:4]
    node _watchdog_T_2 = add(watchdog_1, UInt<32>("h1")) @[Monitor.scala 818:26 chipyard.TestHarness.SmallBoomConfig.fir 388815:4]
    node _watchdog_T_3 = tail(_watchdog_T_2, 1) @[Monitor.scala 818:26 chipyard.TestHarness.SmallBoomConfig.fir 388816:4]
    node _GEN_70 = mux(d_first_done, UInt<32>("h0"), _watchdog_T_3) @[Monitor.scala 819:47 chipyard.TestHarness.SmallBoomConfig.fir 388823:4 Monitor.scala 819:58 chipyard.TestHarness.SmallBoomConfig.fir 388824:6 Monitor.scala 818:14 chipyard.TestHarness.SmallBoomConfig.fir 388817:4]
    a_first_counter <= mux(reset, UInt<1>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388052:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388052:4]
    opcode <= mux(_T_565, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 388117:4 Monitor.scala 397:15 chipyard.TestHarness.SmallBoomConfig.fir 388118:6 Monitor.scala 384:22 chipyard.TestHarness.SmallBoomConfig.fir 388066:4]
    param <= mux(_T_565, io_in_a_bits_param, param) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 388117:4 Monitor.scala 398:15 chipyard.TestHarness.SmallBoomConfig.fir 388119:6 Monitor.scala 385:22 chipyard.TestHarness.SmallBoomConfig.fir 388067:4]
    size <= mux(_T_565, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 388117:4 Monitor.scala 399:15 chipyard.TestHarness.SmallBoomConfig.fir 388120:6 Monitor.scala 386:22 chipyard.TestHarness.SmallBoomConfig.fir 388068:4]
    source <= mux(_T_565, io_in_a_bits_source, source) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 388117:4 Monitor.scala 400:15 chipyard.TestHarness.SmallBoomConfig.fir 388121:6 Monitor.scala 387:22 chipyard.TestHarness.SmallBoomConfig.fir 388069:4]
    address <= mux(_T_565, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 388117:4 Monitor.scala 401:15 chipyard.TestHarness.SmallBoomConfig.fir 388122:6 Monitor.scala 388:22 chipyard.TestHarness.SmallBoomConfig.fir 388070:4]
    d_first_counter <= mux(reset, UInt<1>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388132:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388132:4]
    opcode_1 <= mux(_T_593, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 388206:4 Monitor.scala 550:15 chipyard.TestHarness.SmallBoomConfig.fir 388207:6 Monitor.scala 535:22 chipyard.TestHarness.SmallBoomConfig.fir 388146:4]
    param_1 <= mux(_T_593, io_in_d_bits_param, param_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 388206:4 Monitor.scala 551:15 chipyard.TestHarness.SmallBoomConfig.fir 388208:6 Monitor.scala 536:22 chipyard.TestHarness.SmallBoomConfig.fir 388147:4]
    size_1 <= mux(_T_593, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 388206:4 Monitor.scala 552:15 chipyard.TestHarness.SmallBoomConfig.fir 388209:6 Monitor.scala 537:22 chipyard.TestHarness.SmallBoomConfig.fir 388148:4]
    source_1 <= mux(_T_593, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 388206:4 Monitor.scala 553:15 chipyard.TestHarness.SmallBoomConfig.fir 388210:6 Monitor.scala 538:22 chipyard.TestHarness.SmallBoomConfig.fir 388149:4]
    sink <= mux(_T_593, io_in_d_bits_sink, sink) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 388206:4 Monitor.scala 554:15 chipyard.TestHarness.SmallBoomConfig.fir 388211:6 Monitor.scala 539:22 chipyard.TestHarness.SmallBoomConfig.fir 388150:4]
    denied <= mux(_T_593, io_in_d_bits_denied, denied) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 388206:4 Monitor.scala 555:15 chipyard.TestHarness.SmallBoomConfig.fir 388212:6 Monitor.scala 540:22 chipyard.TestHarness.SmallBoomConfig.fir 388151:4]
    inflight <= mux(reset, UInt<160>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 388214:4 Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 388214:4 Monitor.scala 702:14 chipyard.TestHarness.SmallBoomConfig.fir 388483:4]
    inflight_opcodes <= mux(reset, UInt<640>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 388215:4 Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 388215:4 Monitor.scala 703:22 chipyard.TestHarness.SmallBoomConfig.fir 388487:4]
    inflight_sizes <= mux(reset, UInt<640>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 388216:4 Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 388216:4 Monitor.scala 704:20 chipyard.TestHarness.SmallBoomConfig.fir 388491:4]
    a_first_counter_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388226:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388226:4]
    d_first_counter_1 <= mux(reset, UInt<1>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388248:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388248:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 388492:4 Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 388492:4]
    inflight_1 <= mux(reset, UInt<160>("h0"), _inflight_T_5) @[Monitor.scala 723:35 chipyard.TestHarness.SmallBoomConfig.fir 388517:4 Monitor.scala 723:35 chipyard.TestHarness.SmallBoomConfig.fir 388517:4 Monitor.scala 809:22 chipyard.TestHarness.SmallBoomConfig.fir 388790:4]
    inflight_sizes_1 <= mux(reset, UInt<640>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 388519:4 Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 388519:4 Monitor.scala 811:22 chipyard.TestHarness.SmallBoomConfig.fir 388798:4]
    d_first_counter_2 <= mux(reset, UInt<1>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388554:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 388554:4]
    watchdog_1 <= mux(reset, UInt<32>("h0"), _GEN_70) @[Monitor.scala 813:27 chipyard.TestHarness.SmallBoomConfig.fir 388799:4 Monitor.scala 813:27 chipyard.TestHarness.SmallBoomConfig.fir 388799:4]
    node _GEN_98 = and(io_in_a_valid, _T_20) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387144:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387144:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387145:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387163:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387164:10]
    printf(clock, and(_GEN_98, _T_61), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387170:10]
    stop(clock, and(_GEN_98, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387171:10]
    printf(clock, and(_GEN_98, _T_65), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387178:10]
    stop(clock, and(_GEN_98, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387179:10]
    printf(clock, and(_GEN_98, _T_68), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387185:10]
    stop(clock, and(_GEN_98, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387186:10]
    printf(clock, and(_GEN_98, _T_72), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387193:10]
    stop(clock, and(_GEN_98, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387194:10]
    printf(clock, and(_GEN_98, _T_77), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387202:10]
    stop(clock, and(_GEN_98, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387203:10]
    printf(clock, and(_GEN_98, _T_81), "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387210:10]
    stop(clock, and(_GEN_98, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387211:10]
    node _GEN_114 = and(io_in_a_valid, _T_82) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387242:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387242:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387243:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387261:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387262:10]
    printf(clock, and(_GEN_114, _T_61), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387268:10]
    stop(clock, and(_GEN_114, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387269:10]
    printf(clock, and(_GEN_114, _T_65), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387276:10]
    stop(clock, and(_GEN_114, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387277:10]
    printf(clock, and(_GEN_114, _T_68), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387283:10]
    stop(clock, and(_GEN_114, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387284:10]
    printf(clock, and(_GEN_114, _T_72), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387291:10]
    stop(clock, and(_GEN_114, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387292:10]
    printf(clock, and(_GEN_114, _T_138), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387299:10]
    stop(clock, and(_GEN_114, _T_138), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387300:10]
    printf(clock, and(_GEN_114, _T_77), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387308:10]
    stop(clock, and(_GEN_114, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387309:10]
    printf(clock, and(_GEN_114, _T_81), "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387316:10]
    stop(clock, and(_GEN_114, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387317:10]
    node _GEN_132 = and(io_in_a_valid, _T_148) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387339:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387339:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387340:10]
    printf(clock, and(_GEN_132, _T_176), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387357:10]
    stop(clock, and(_GEN_132, _T_176), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387358:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel Get carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387364:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387365:10]
    printf(clock, and(_GEN_132, _T_68), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387371:10]
    stop(clock, and(_GEN_132, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387372:10]
    printf(clock, and(_GEN_132, _T_186), "Assertion failed: 'A' channel Get carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387379:10]
    stop(clock, and(_GEN_132, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387380:10]
    printf(clock, and(_GEN_132, _T_190), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387387:10]
    stop(clock, and(_GEN_132, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387388:10]
    printf(clock, and(_GEN_132, _T_81), "Assertion failed: 'A' channel Get is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387395:10]
    stop(clock, and(_GEN_132, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387396:10]
    node _GEN_146 = and(io_in_a_valid, _T_195) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387430:10]
    printf(clock, and(_GEN_146, _T_221), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387430:10]
    stop(clock, and(_GEN_146, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387431:10]
    printf(clock, and(_GEN_146, _T_61), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387437:10]
    stop(clock, and(_GEN_146, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387438:10]
    printf(clock, and(_GEN_146, _T_68), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387444:10]
    stop(clock, and(_GEN_146, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387445:10]
    printf(clock, and(_GEN_146, _T_186), "Assertion failed: 'A' channel PutFull carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387452:10]
    stop(clock, and(_GEN_146, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387453:10]
    printf(clock, and(_GEN_146, _T_190), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387460:10]
    stop(clock, and(_GEN_146, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387461:10]
    node _GEN_156 = and(io_in_a_valid, _T_236) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387495:10]
    printf(clock, and(_GEN_156, _T_221), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387495:10]
    stop(clock, and(_GEN_156, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387496:10]
    printf(clock, and(_GEN_156, _T_61), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387502:10]
    stop(clock, and(_GEN_156, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387503:10]
    printf(clock, and(_GEN_156, _T_68), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387509:10]
    stop(clock, and(_GEN_156, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387510:10]
    printf(clock, and(_GEN_156, _T_186), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387517:10]
    stop(clock, and(_GEN_156, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387518:10]
    printf(clock, and(_GEN_156, _T_278), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387527:10]
    stop(clock, and(_GEN_156, _T_278), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387528:10]
    node _GEN_166 = and(io_in_a_valid, _T_279) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387559:10]
    printf(clock, and(_GEN_166, _T_43), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387559:10]
    stop(clock, and(_GEN_166, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387560:10]
    printf(clock, and(_GEN_166, _T_61), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387566:10]
    stop(clock, and(_GEN_166, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387567:10]
    printf(clock, and(_GEN_166, _T_68), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387573:10]
    stop(clock, and(_GEN_166, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387574:10]
    printf(clock, and(_GEN_166, _T_312), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387581:10]
    stop(clock, and(_GEN_166, _T_312), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387582:10]
    printf(clock, and(_GEN_166, _T_190), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387589:10]
    stop(clock, and(_GEN_166, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387590:10]
    node _GEN_176 = and(io_in_a_valid, _T_317) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387621:10]
    printf(clock, and(_GEN_176, _T_43), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387621:10]
    stop(clock, and(_GEN_176, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387622:10]
    printf(clock, and(_GEN_176, _T_61), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387628:10]
    stop(clock, and(_GEN_176, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387629:10]
    printf(clock, and(_GEN_176, _T_68), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387635:10]
    stop(clock, and(_GEN_176, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387636:10]
    printf(clock, and(_GEN_176, _T_350), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387643:10]
    stop(clock, and(_GEN_176, _T_350), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387644:10]
    printf(clock, and(_GEN_176, _T_190), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387651:10]
    stop(clock, and(_GEN_176, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387652:10]
    node _GEN_186 = and(io_in_a_valid, _T_355) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387683:10]
    printf(clock, and(_GEN_186, _T_43), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387683:10]
    stop(clock, and(_GEN_186, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387684:10]
    printf(clock, and(_GEN_186, _T_61), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387690:10]
    stop(clock, and(_GEN_186, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387691:10]
    printf(clock, and(_GEN_186, _T_68), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387697:10]
    stop(clock, and(_GEN_186, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387698:10]
    printf(clock, and(_GEN_186, _T_388), "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387705:10]
    stop(clock, and(_GEN_186, _T_388), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387706:10]
    printf(clock, and(_GEN_186, _T_190), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387713:10]
    stop(clock, and(_GEN_186, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387714:10]
    printf(clock, and(_GEN_186, _T_81), "Assertion failed: 'A' channel Hint is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387721:10]
    stop(clock, and(_GEN_186, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 387722:10]
    printf(clock, and(io_in_d_valid, _T_400), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387732:8]
    stop(clock, and(io_in_d_valid, _T_400), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387733:8]
    node _GEN_198 = and(io_in_d_valid, _T_401) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387753:10]
    printf(clock, and(_GEN_198, _T_404), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387753:10]
    stop(clock, and(_GEN_198, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387754:10]
    printf(clock, and(_GEN_198, _T_408), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387761:10]
    stop(clock, and(_GEN_198, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387762:10]
    printf(clock, and(_GEN_198, _T_412), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387769:10]
    stop(clock, and(_GEN_198, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387770:10]
    printf(clock, and(_GEN_198, _T_416), "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387777:10]
    stop(clock, and(_GEN_198, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387778:10]
    printf(clock, and(_GEN_198, _T_420), "Assertion failed: 'D' channel ReleaseAck is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387785:10]
    stop(clock, and(_GEN_198, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387786:10]
    node _GEN_208 = and(io_in_d_valid, _T_421) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387795:10]
    printf(clock, and(_GEN_208, _T_404), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387795:10]
    stop(clock, and(_GEN_208, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387796:10]
    printf(clock, and(_GEN_208, _T_43), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387802:10]
    stop(clock, and(_GEN_208, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387803:10]
    printf(clock, and(_GEN_208, _T_408), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387810:10]
    stop(clock, and(_GEN_208, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387811:10]
    printf(clock, and(_GEN_208, _T_435), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387818:10]
    stop(clock, and(_GEN_208, _T_435), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387819:10]
    printf(clock, and(_GEN_208, _T_439), "Assertion failed: 'D' channel Grant carries toN param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387826:10]
    stop(clock, and(_GEN_208, _T_439), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387827:10]
    printf(clock, and(_GEN_208, _T_416), "Assertion failed: 'D' channel Grant is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387834:10]
    stop(clock, and(_GEN_208, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387835:10]
    printf(clock, and(_GEN_208, _T_420), "Assertion failed: 'D' channel Grant is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387843:10]
    stop(clock, and(_GEN_208, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387844:10]
    node _GEN_222 = and(io_in_d_valid, _T_449) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387853:10]
    printf(clock, and(_GEN_222, _T_404), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387853:10]
    stop(clock, and(_GEN_222, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387854:10]
    printf(clock, and(_GEN_222, _T_43), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387860:10]
    stop(clock, and(_GEN_222, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387861:10]
    printf(clock, and(_GEN_222, _T_408), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387868:10]
    stop(clock, and(_GEN_222, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387869:10]
    printf(clock, and(_GEN_222, _T_435), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387876:10]
    stop(clock, and(_GEN_222, _T_435), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387877:10]
    printf(clock, and(_GEN_222, _T_439), "Assertion failed: 'D' channel GrantData carries toN param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387884:10]
    stop(clock, and(_GEN_222, _T_439), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387885:10]
    printf(clock, and(_GEN_222, _T_472), "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387893:10]
    stop(clock, and(_GEN_222, _T_472), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387894:10]
    printf(clock, and(_GEN_222, _T_420), "Assertion failed: 'D' channel GrantData is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387902:10]
    stop(clock, and(_GEN_222, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387903:10]
    node _GEN_236 = and(io_in_d_valid, _T_478) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387912:10]
    printf(clock, and(_GEN_236, _T_404), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387912:10]
    stop(clock, and(_GEN_236, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387913:10]
    printf(clock, and(_GEN_236, _T_412), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387920:10]
    stop(clock, and(_GEN_236, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387921:10]
    printf(clock, and(_GEN_236, _T_416), "Assertion failed: 'D' channel AccessAck is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387928:10]
    stop(clock, and(_GEN_236, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387929:10]
    printf(clock, and(_GEN_236, _T_420), "Assertion failed: 'D' channel AccessAck is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387937:10]
    stop(clock, and(_GEN_236, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387938:10]
    node _GEN_244 = and(io_in_d_valid, _T_495) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387947:10]
    printf(clock, and(_GEN_244, _T_404), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387947:10]
    stop(clock, and(_GEN_244, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387948:10]
    printf(clock, and(_GEN_244, _T_412), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387955:10]
    stop(clock, and(_GEN_244, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387956:10]
    printf(clock, and(_GEN_244, _T_472), "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387964:10]
    stop(clock, and(_GEN_244, _T_472), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387965:10]
    printf(clock, and(_GEN_244, _T_420), "Assertion failed: 'D' channel AccessAckData is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387973:10]
    stop(clock, and(_GEN_244, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387974:10]
    node _GEN_252 = and(io_in_d_valid, _T_513) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387983:10]
    printf(clock, and(_GEN_252, _T_404), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387983:10]
    stop(clock, and(_GEN_252, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387984:10]
    printf(clock, and(_GEN_252, _T_412), "Assertion failed: 'D' channel HintAck carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387991:10]
    stop(clock, and(_GEN_252, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387992:10]
    printf(clock, and(_GEN_252, _T_416), "Assertion failed: 'D' channel HintAck is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 387999:10]
    stop(clock, and(_GEN_252, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388000:10]
    printf(clock, and(_GEN_252, _T_420), "Assertion failed: 'D' channel HintAck is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388008:10]
    stop(clock, and(_GEN_252, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388009:10]
    printf(clock, and(_T_543, _T_547), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388079:8]
    stop(clock, and(_T_543, _T_547), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388080:8]
    printf(clock, and(_T_543, _T_551), "Assertion failed: 'A' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388087:8]
    stop(clock, and(_T_543, _T_551), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388088:8]
    printf(clock, and(_T_543, _T_555), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388095:8]
    stop(clock, and(_T_543, _T_555), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388096:8]
    printf(clock, and(_T_543, _T_559), "Assertion failed: 'A' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388103:8]
    stop(clock, and(_T_543, _T_559), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388104:8]
    printf(clock, and(_T_543, _T_563), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388111:8]
    stop(clock, and(_T_543, _T_563), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388112:8]
    printf(clock, and(_T_567, _T_571), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388160:8]
    stop(clock, and(_T_567, _T_571), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388161:8]
    printf(clock, and(_T_567, _T_575), "Assertion failed: 'D' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388168:8]
    stop(clock, and(_T_567, _T_575), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388169:8]
    printf(clock, and(_T_567, _T_579), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388176:8]
    stop(clock, and(_T_567, _T_579), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388177:8]
    printf(clock, and(_T_567, _T_583), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388184:8]
    stop(clock, and(_T_567, _T_583), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388185:8]
    printf(clock, and(_T_567, _T_587), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388192:8]
    stop(clock, and(_T_567, _T_587), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388193:8]
    printf(clock, and(_T_567, _T_591), "Assertion failed: 'D' channel denied changed with multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388200:8]
    stop(clock, and(_T_567, _T_591), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388201:8]
    printf(clock, and(_T_597, _T_604), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388345:8]
    stop(clock, and(_T_597, _T_604), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388346:8]
    printf(clock, and(_T_608, _T_623), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388405:8]
    stop(clock, and(_T_608, _T_623), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388406:8]
    node _GEN_260 = and(_T_608, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388416:10]
    printf(clock, and(_GEN_260, _T_629), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388416:10]
    stop(clock, and(_GEN_260, _T_629), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388417:10]
    printf(clock, and(_GEN_260, _T_633), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388424:10]
    stop(clock, and(_GEN_260, _T_633), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388425:10]
    node _GEN_264 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388438:10]
    node _GEN_265 = and(_T_608, _GEN_264) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388438:10]
    printf(clock, and(_GEN_265, _T_641), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388438:10]
    stop(clock, and(_GEN_265, _T_641), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388439:10]
    printf(clock, and(_GEN_265, _T_645), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388446:10]
    stop(clock, and(_GEN_265, _T_645), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388447:10]
    printf(clock, and(_T_652, _T_657), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388465:8]
    stop(clock, and(_T_652, _T_657), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388466:8]
    printf(clock, _T_664, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 3 (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388477:6]
    stop(clock, _T_664, 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388478:6]
    printf(clock, _T_673, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388505:6]
    stop(clock, _T_673, 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388506:6]
    printf(clock, and(_T_696, _T_709), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388727:8]
    stop(clock, and(_T_696, _T_709), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388728:8]
    printf(clock, and(_T_696, _T_717), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388748:10]
    stop(clock, and(_T_696, _T_717), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 388749:10]
    printf(clock, _T_742, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388812:6]
    stop(clock, _T_742, 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 388813:6]

  module Queue_44_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 388827:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 388828:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388829:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    input io_enq_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    input io_enq_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    input io_enq_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    input io_enq_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    input io_enq_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    input io_enq_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    input io_enq_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    output io_deq_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    output io_deq_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    output io_deq_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    output io_deq_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    output io_deq_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    output io_deq_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388830:4]

    mem ram_opcode : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 388832:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_param : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 388832:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_size : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 388832:4]
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_source : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 388832:4]
      data-type => UInt<8>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_address : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 388832:4]
      data-type => UInt<29>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_mask : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 388832:4]
      data-type => UInt<8>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_data : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 388832:4]
      data-type => UInt<64>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_corrupt : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 388832:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg value : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 388833:4]
    reg value_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value_1) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 388834:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 388835:4]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33 chipyard.TestHarness.SmallBoomConfig.fir 388836:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.SmallBoomConfig.fir 388837:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.SmallBoomConfig.fir 388838:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.SmallBoomConfig.fir 388839:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 388840:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 388843:4]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 388857:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 388858:6]
    node _GEN_12 = mux(do_enq, _value_T_1, value) @[Decoupled.scala 229:17 chipyard.TestHarness.SmallBoomConfig.fir 388846:4 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 388859:6 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 388833:4]
    node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 388863:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 388864:6]
    node _GEN_13 = mux(do_deq, _value_T_3, value_1) @[Decoupled.scala 233:17 chipyard.TestHarness.SmallBoomConfig.fir 388861:4 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 388865:6 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 388834:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.SmallBoomConfig.fir 388867:4]
    node _GEN_14 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.SmallBoomConfig.fir 388868:4 Decoupled.scala 237:16 chipyard.TestHarness.SmallBoomConfig.fir 388869:6 Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 388835:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.SmallBoomConfig.fir 388873:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.SmallBoomConfig.fir 388871:4]
    io_deq_bits_opcode <= ram_opcode.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 388883:4]
    io_deq_bits_param <= ram_param.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 388882:4]
    io_deq_bits_size <= ram_size.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 388881:4]
    io_deq_bits_source <= ram_source.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 388880:4]
    io_deq_bits_address <= ram_address.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 388879:4]
    io_deq_bits_mask <= ram_mask.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 388878:4]
    io_deq_bits_data <= ram_data.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 388877:4]
    io_deq_bits_corrupt <= ram_corrupt.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 388876:4]
    value <= mux(reset, UInt<1>("h0"), _GEN_12) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 388833:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 388833:4]
    value_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 388834:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 388834:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_14) @[Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 388835:4 Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 388835:4]
    ram_opcode.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_opcode.io_deq_bits_MPORT.addr <= value_1
    ram_opcode.io_deq_bits_MPORT.clk <= clock
    ram_opcode.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_opcode.MPORT.addr <= value
    ram_opcode.MPORT.mask <= UInt<1>("h1")
    ram_opcode.MPORT.data <= io_enq_bits_opcode
    ram_opcode.MPORT.clk <= clock
    ram_param.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_param.io_deq_bits_MPORT.addr <= value_1
    ram_param.io_deq_bits_MPORT.clk <= clock
    ram_param.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_param.MPORT.addr <= value
    ram_param.MPORT.mask <= UInt<1>("h1")
    ram_param.MPORT.data <= io_enq_bits_param
    ram_param.MPORT.clk <= clock
    ram_size.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_size.io_deq_bits_MPORT.addr <= value_1
    ram_size.io_deq_bits_MPORT.clk <= clock
    ram_size.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_size.MPORT.addr <= value
    ram_size.MPORT.mask <= UInt<1>("h1")
    ram_size.MPORT.data <= io_enq_bits_size
    ram_size.MPORT.clk <= clock
    ram_source.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_source.io_deq_bits_MPORT.addr <= value_1
    ram_source.io_deq_bits_MPORT.clk <= clock
    ram_source.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_source.MPORT.addr <= value
    ram_source.MPORT.mask <= UInt<1>("h1")
    ram_source.MPORT.data <= io_enq_bits_source
    ram_source.MPORT.clk <= clock
    ram_address.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_address.io_deq_bits_MPORT.addr <= value_1
    ram_address.io_deq_bits_MPORT.clk <= clock
    ram_address.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_address.MPORT.addr <= value
    ram_address.MPORT.mask <= UInt<1>("h1")
    ram_address.MPORT.data <= io_enq_bits_address
    ram_address.MPORT.clk <= clock
    ram_mask.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_mask.io_deq_bits_MPORT.addr <= value_1
    ram_mask.io_deq_bits_MPORT.clk <= clock
    ram_mask.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_mask.MPORT.addr <= value
    ram_mask.MPORT.mask <= UInt<1>("h1")
    ram_mask.MPORT.data <= io_enq_bits_mask
    ram_mask.MPORT.clk <= clock
    ram_data.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_data.io_deq_bits_MPORT.addr <= value_1
    ram_data.io_deq_bits_MPORT.clk <= clock
    ram_data.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_data.MPORT.addr <= value
    ram_data.MPORT.mask <= UInt<1>("h1")
    ram_data.MPORT.data <= io_enq_bits_data
    ram_data.MPORT.clk <= clock
    ram_corrupt.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_corrupt.io_deq_bits_MPORT.addr <= value_1
    ram_corrupt.io_deq_bits_MPORT.clk <= clock
    ram_corrupt.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_corrupt.MPORT.addr <= value
    ram_corrupt.MPORT.mask <= UInt<1>("h1")
    ram_corrupt.MPORT.data <= io_enq_bits_corrupt
    ram_corrupt.MPORT.clk <= clock

  module TLBuffer_20_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 388955:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 388956:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388957:4]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_in_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_in_a_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_in_a_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_in_a_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_in_a_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_in_d_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_in_d_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_in_d_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_in_d_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_out_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_out_a_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_out_a_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_out_a_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_out_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_out_a_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_out_d_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_out_d_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]
    input auto_out_d_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 388958:4]

    inst monitor of TLMonitor_55_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.SmallBoomConfig.fir 388965:4]
    inst bundleOut_0_a_q of Queue_44_inTestHarness @[Decoupled.scala 296:21 chipyard.TestHarness.SmallBoomConfig.fir 388992:4]
    inst bundleIn_0_d_q of Queue_5_inTestHarness @[Decoupled.scala 296:21 chipyard.TestHarness.SmallBoomConfig.fir 389006:4]
    auto_in_a_ready <= bundleOut_0_a_q.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Decoupled.scala 299:17 chipyard.TestHarness.SmallBoomConfig.fir 389004:4]
    auto_in_d_valid <= bundleIn_0_d_q.io_deq_valid @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    auto_in_d_bits_opcode <= bundleIn_0_d_q.io_deq_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    auto_in_d_bits_param <= bundleIn_0_d_q.io_deq_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    auto_in_d_bits_size <= bundleIn_0_d_q.io_deq_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    auto_in_d_bits_source <= bundleIn_0_d_q.io_deq_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    auto_in_d_bits_sink <= bundleIn_0_d_q.io_deq_bits_sink @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    auto_in_d_bits_denied <= bundleIn_0_d_q.io_deq_bits_denied @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    auto_in_d_bits_data <= bundleIn_0_d_q.io_deq_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    auto_in_d_bits_corrupt <= bundleIn_0_d_q.io_deq_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    auto_out_a_valid <= bundleOut_0_a_q.io_deq_valid @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 389005:4]
    auto_out_a_bits_opcode <= bundleOut_0_a_q.io_deq_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 389005:4]
    auto_out_a_bits_param <= bundleOut_0_a_q.io_deq_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 389005:4]
    auto_out_a_bits_size <= bundleOut_0_a_q.io_deq_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 389005:4]
    auto_out_a_bits_source <= bundleOut_0_a_q.io_deq_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 389005:4]
    auto_out_a_bits_address <= bundleOut_0_a_q.io_deq_bits_address @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 389005:4]
    auto_out_a_bits_mask <= bundleOut_0_a_q.io_deq_bits_mask @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 389005:4]
    auto_out_a_bits_data <= bundleOut_0_a_q.io_deq_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 389005:4]
    auto_out_a_bits_corrupt <= bundleOut_0_a_q.io_deq_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 389005:4]
    auto_out_d_ready <= bundleIn_0_d_q.io_enq_ready @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 Decoupled.scala 299:17 chipyard.TestHarness.SmallBoomConfig.fir 389018:4]
    monitor.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 388966:4]
    monitor.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 388967:4]
    monitor.io_in_a_ready <= bundleOut_0_a_q.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Decoupled.scala 299:17 chipyard.TestHarness.SmallBoomConfig.fir 389004:4]
    monitor.io_in_a_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    monitor.io_in_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    monitor.io_in_a_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    monitor.io_in_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    monitor.io_in_a_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    monitor.io_in_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    monitor.io_in_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    monitor.io_in_a_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    monitor.io_in_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    monitor.io_in_d_valid <= bundleIn_0_d_q.io_deq_valid @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    monitor.io_in_d_bits_opcode <= bundleIn_0_d_q.io_deq_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    monitor.io_in_d_bits_param <= bundleIn_0_d_q.io_deq_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    monitor.io_in_d_bits_size <= bundleIn_0_d_q.io_deq_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    monitor.io_in_d_bits_source <= bundleIn_0_d_q.io_deq_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    monitor.io_in_d_bits_sink <= bundleIn_0_d_q.io_deq_bits_sink @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    monitor.io_in_d_bits_denied <= bundleIn_0_d_q.io_deq_bits_denied @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    monitor.io_in_d_bits_corrupt <= bundleIn_0_d_q.io_deq_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 389019:4]
    bundleOut_0_a_q.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 388993:4]
    bundleOut_0_a_q.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 388994:4]
    bundleOut_0_a_q.io_enq_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    bundleOut_0_a_q.io_enq_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    bundleOut_0_a_q.io_enq_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    bundleOut_0_a_q.io_enq_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    bundleOut_0_a_q.io_enq_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    bundleOut_0_a_q.io_enq_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    bundleOut_0_a_q.io_enq_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    bundleOut_0_a_q.io_enq_bits_data <= auto_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    bundleOut_0_a_q.io_enq_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]
    bundleOut_0_a_q.io_deq_ready <= auto_out_a_ready @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 388990:4]
    bundleIn_0_d_q.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 389007:4]
    bundleIn_0_d_q.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 389008:4]
    bundleIn_0_d_q.io_enq_valid <= auto_out_d_valid @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 388990:4]
    bundleIn_0_d_q.io_enq_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 388990:4]
    bundleIn_0_d_q.io_enq_bits_size <= auto_out_d_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 388990:4]
    bundleIn_0_d_q.io_enq_bits_source <= auto_out_d_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 388990:4]
    bundleIn_0_d_q.io_enq_bits_data <= auto_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 388988:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 388990:4]
    bundleIn_0_d_q.io_deq_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 388963:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 388991:4]

  module TLMonitor_56_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 389055:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 389056:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 389057:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_a_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_a_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_a_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_d_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_d_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_d_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]
    input io_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 389058:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.SmallBoomConfig.fir 390549:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.SmallBoomConfig.fir 390856:4]
    node _source_ok_T_4 = leq(io_in_a_bits_source, UInt<4>("h9")) @[Parameters.scala 57:20 chipyard.TestHarness.SmallBoomConfig.fir 389075:6]
    node _is_aligned_mask_T_1 = dshlw(UInt<13>("h3f"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.SmallBoomConfig.fir 389081:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 5, 0) @[package.scala 234:82 chipyard.TestHarness.SmallBoomConfig.fir 389082:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.SmallBoomConfig.fir 389083:6]
    node _GEN_71 = pad(is_aligned_mask, 29) @[Edges.scala 20:16 chipyard.TestHarness.SmallBoomConfig.fir 389084:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.SmallBoomConfig.fir 389084:6]
    node is_aligned = eq(_is_aligned_T, UInt<29>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.SmallBoomConfig.fir 389085:6]
    node mask_sizeOH_shiftAmount = bits(io_in_a_bits_size, 1, 0) @[OneHot.scala 64:49 chipyard.TestHarness.SmallBoomConfig.fir 389087:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<4>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.SmallBoomConfig.fir 389088:6]
    node _mask_sizeOH_T_2 = bits(_mask_sizeOH_T_1, 2, 0) @[OneHot.scala 65:27 chipyard.TestHarness.SmallBoomConfig.fir 389089:6]
    node mask_sizeOH = or(_mask_sizeOH_T_2, UInt<3>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.SmallBoomConfig.fir 389090:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<3>("h3")) @[Misc.scala 205:21 chipyard.TestHarness.SmallBoomConfig.fir 389091:6]
    node mask_size = bits(mask_sizeOH, 2, 2) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 389092:6]
    node mask_bit = bits(io_in_a_bits_address, 2, 2) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 389093:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 389094:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389096:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389097:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389099:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389100:6]
    node mask_size_1 = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 389101:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 389102:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 389103:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 389104:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389105:6]
    node mask_acc_2 = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389106:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 389107:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389108:6]
    node mask_acc_3 = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389109:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 389110:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389111:6]
    node mask_acc_4 = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389112:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 389113:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389114:6]
    node mask_acc_5 = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389115:6]
    node mask_size_2 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 389116:6]
    node mask_bit_2 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 389117:6]
    node mask_nbit_2 = not(mask_bit_2) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 389118:6]
    node mask_eq_6 = and(mask_eq_2, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 389119:6]
    node _mask_acc_T_6 = and(mask_size_2, mask_eq_6) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389120:6]
    node mask_lo_lo_lo = or(mask_acc_2, _mask_acc_T_6) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389121:6]
    node mask_eq_7 = and(mask_eq_2, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 389122:6]
    node _mask_acc_T_7 = and(mask_size_2, mask_eq_7) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389123:6]
    node mask_lo_lo_hi = or(mask_acc_2, _mask_acc_T_7) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389124:6]
    node mask_eq_8 = and(mask_eq_3, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 389125:6]
    node _mask_acc_T_8 = and(mask_size_2, mask_eq_8) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389126:6]
    node mask_lo_hi_lo = or(mask_acc_3, _mask_acc_T_8) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389127:6]
    node mask_eq_9 = and(mask_eq_3, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 389128:6]
    node _mask_acc_T_9 = and(mask_size_2, mask_eq_9) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389129:6]
    node mask_lo_hi_hi = or(mask_acc_3, _mask_acc_T_9) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389130:6]
    node mask_eq_10 = and(mask_eq_4, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 389131:6]
    node _mask_acc_T_10 = and(mask_size_2, mask_eq_10) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389132:6]
    node mask_hi_lo_lo = or(mask_acc_4, _mask_acc_T_10) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389133:6]
    node mask_eq_11 = and(mask_eq_4, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 389134:6]
    node _mask_acc_T_11 = and(mask_size_2, mask_eq_11) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389135:6]
    node mask_hi_lo_hi = or(mask_acc_4, _mask_acc_T_11) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389136:6]
    node mask_eq_12 = and(mask_eq_5, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 389137:6]
    node _mask_acc_T_12 = and(mask_size_2, mask_eq_12) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389138:6]
    node mask_hi_hi_lo = or(mask_acc_5, _mask_acc_T_12) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389139:6]
    node mask_eq_13 = and(mask_eq_5, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 389140:6]
    node _mask_acc_T_13 = and(mask_size_2, mask_eq_13) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 389141:6]
    node mask_hi_hi_hi = or(mask_acc_5, _mask_acc_T_13) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 389142:6]
    node mask = cat(cat(cat(mask_hi_hi_hi, mask_hi_hi_lo), cat(mask_hi_lo_hi, mask_hi_lo_lo)), cat(cat(mask_lo_hi_hi, mask_lo_hi_lo), cat(mask_lo_lo_hi, mask_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 389149:6]
    node _T_20 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.SmallBoomConfig.fir 389172:6]
    node _T_33 = xor(io_in_a_bits_address, UInt<29>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 389188:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 389189:8]
    node _T_35 = and(_T_34, SInt<30>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 389190:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 389191:8]
    node _T_37 = eq(_T_36, SInt<30>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 389192:8]
    node _T_43 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389198:8]
    node _T_60 = or(_source_ok_T_4, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389223:8]
    node _T_61 = not(_T_60) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389224:8]
    node _T_64 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389231:8]
    node _T_65 = not(_T_64) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389232:8]
    node _T_67 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389238:8]
    node _T_68 = not(_T_67) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389239:8]
    node _T_69 = leq(io_in_a_bits_param, UInt<3>("h2")) @[Bundles.scala 108:27 chipyard.TestHarness.SmallBoomConfig.fir 389244:8]
    node _T_71 = or(_T_69, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389246:8]
    node _T_72 = not(_T_71) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389247:8]
    node _T_73 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.SmallBoomConfig.fir 389252:8]
    node _T_74 = eq(_T_73, UInt<8>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.SmallBoomConfig.fir 389253:8]
    node _T_76 = or(_T_74, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389255:8]
    node _T_77 = not(_T_76) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389256:8]
    node _T_78 = not(io_in_a_bits_corrupt) @[Monitor.scala 89:18 chipyard.TestHarness.SmallBoomConfig.fir 389261:8]
    node _T_80 = or(_T_78, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389263:8]
    node _T_81 = not(_T_80) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389264:8]
    node _T_82 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.SmallBoomConfig.fir 389270:6]
    node _T_135 = neq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 99:31 chipyard.TestHarness.SmallBoomConfig.fir 389350:8]
    node _T_137 = or(_T_135, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389352:8]
    node _T_138 = not(_T_137) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389353:8]
    node _T_148 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.SmallBoomConfig.fir 389376:6]
    node _T_164 = leq(io_in_a_bits_size, UInt<3>("h6")) @[Parameters.scala 92:42 chipyard.TestHarness.SmallBoomConfig.fir 389399:8]
    node _T_172 = and(_T_164, _T_37) @[Parameters.scala 670:56 chipyard.TestHarness.SmallBoomConfig.fir 389407:8]
    node _T_175 = or(_T_172, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389410:8]
    node _T_176 = not(_T_175) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389411:8]
    node _T_183 = eq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 109:31 chipyard.TestHarness.SmallBoomConfig.fir 389430:8]
    node _T_185 = or(_T_183, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389432:8]
    node _T_186 = not(_T_185) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389433:8]
    node _T_187 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.SmallBoomConfig.fir 389438:8]
    node _T_189 = or(_T_187, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389440:8]
    node _T_190 = not(_T_189) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389441:8]
    node _T_195 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.SmallBoomConfig.fir 389455:6]
    node _T_218 = and(_source_ok_T_4, _T_172) @[Monitor.scala 115:71 chipyard.TestHarness.SmallBoomConfig.fir 389481:8]
    node _T_220 = or(_T_218, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389483:8]
    node _T_221 = not(_T_220) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389484:8]
    node _T_236 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.SmallBoomConfig.fir 389520:6]
    node _T_273 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.SmallBoomConfig.fir 389576:8]
    node _T_274 = and(io_in_a_bits_mask, _T_273) @[Monitor.scala 127:31 chipyard.TestHarness.SmallBoomConfig.fir 389577:8]
    node _T_275 = eq(_T_274, UInt<8>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.SmallBoomConfig.fir 389578:8]
    node _T_277 = or(_T_275, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389580:8]
    node _T_278 = not(_T_277) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389581:8]
    node _T_279 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.SmallBoomConfig.fir 389587:6]
    node _T_309 = leq(io_in_a_bits_param, UInt<3>("h4")) @[Bundles.scala 138:33 chipyard.TestHarness.SmallBoomConfig.fir 389632:8]
    node _T_311 = or(_T_309, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389634:8]
    node _T_312 = not(_T_311) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389635:8]
    node _T_317 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.SmallBoomConfig.fir 389649:6]
    node _T_347 = leq(io_in_a_bits_param, UInt<3>("h3")) @[Bundles.scala 145:30 chipyard.TestHarness.SmallBoomConfig.fir 389694:8]
    node _T_349 = or(_T_347, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389696:8]
    node _T_350 = not(_T_349) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389697:8]
    node _T_355 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.SmallBoomConfig.fir 389711:6]
    node _T_385 = leq(io_in_a_bits_param, UInt<3>("h1")) @[Bundles.scala 158:28 chipyard.TestHarness.SmallBoomConfig.fir 389756:8]
    node _T_387 = or(_T_385, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389758:8]
    node _T_388 = not(_T_387) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389759:8]
    node _T_397 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.SmallBoomConfig.fir 389783:6]
    node _T_399 = or(_T_397, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389785:6]
    node _T_400 = not(_T_399) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389786:6]
    node _source_ok_T_10 = leq(io_in_d_bits_source, UInt<4>("h9")) @[Parameters.scala 57:20 chipyard.TestHarness.SmallBoomConfig.fir 389797:6]
    node _T_401 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.SmallBoomConfig.fir 389803:6]
    node _T_403 = or(_source_ok_T_10, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389806:8]
    node _T_404 = not(_T_403) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389807:8]
    node _T_405 = geq(io_in_d_bits_size, UInt<3>("h3")) @[Monitor.scala 312:27 chipyard.TestHarness.SmallBoomConfig.fir 389812:8]
    node _T_407 = or(_T_405, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389814:8]
    node _T_408 = not(_T_407) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389815:8]
    node _T_409 = eq(io_in_d_bits_param, UInt<2>("h0")) @[Monitor.scala 313:28 chipyard.TestHarness.SmallBoomConfig.fir 389820:8]
    node _T_411 = or(_T_409, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389822:8]
    node _T_412 = not(_T_411) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389823:8]
    node _T_413 = not(io_in_d_bits_corrupt) @[Monitor.scala 314:15 chipyard.TestHarness.SmallBoomConfig.fir 389828:8]
    node _T_415 = or(_T_413, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389830:8]
    node _T_416 = not(_T_415) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389831:8]
    node _T_417 = not(io_in_d_bits_denied) @[Monitor.scala 315:15 chipyard.TestHarness.SmallBoomConfig.fir 389836:8]
    node _T_419 = or(_T_417, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389838:8]
    node _T_420 = not(_T_419) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389839:8]
    node _T_421 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.SmallBoomConfig.fir 389845:6]
    node _T_432 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 102:26 chipyard.TestHarness.SmallBoomConfig.fir 389869:8]
    node _T_434 = or(_T_432, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389871:8]
    node _T_435 = not(_T_434) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389872:8]
    node _T_436 = neq(io_in_d_bits_param, UInt<2>("h2")) @[Monitor.scala 323:28 chipyard.TestHarness.SmallBoomConfig.fir 389877:8]
    node _T_438 = or(_T_436, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389879:8]
    node _T_439 = not(_T_438) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389880:8]
    node _T_449 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.SmallBoomConfig.fir 389903:6]
    node _T_469 = or(_T_417, io_in_d_bits_corrupt) @[Monitor.scala 334:30 chipyard.TestHarness.SmallBoomConfig.fir 389944:8]
    node _T_471 = or(_T_469, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389946:8]
    node _T_472 = not(_T_471) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389947:8]
    node _T_478 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.SmallBoomConfig.fir 389962:6]
    node _T_495 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.SmallBoomConfig.fir 389997:6]
    node _T_513 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.SmallBoomConfig.fir 390033:6]
    node _a_first_T = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 390099:4]
    node a_first_beats1_decode = shr(is_aligned_mask, 3) @[Edges.scala 219:59 chipyard.TestHarness.SmallBoomConfig.fir 390104:4]
    node _a_first_beats1_opdata_T = bits(io_in_a_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.SmallBoomConfig.fir 390105:4]
    node a_first_beats1_opdata = not(_a_first_beats1_opdata_T) @[Edges.scala 91:28 chipyard.TestHarness.SmallBoomConfig.fir 390106:4]
    node a_first_beats1 = mux(a_first_beats1_opdata, a_first_beats1_decode, UInt<3>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.SmallBoomConfig.fir 390107:4]
    reg a_first_counter : UInt<3>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390108:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 390109:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 390110:4]
    node a_first = eq(a_first_counter, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 390111:4]
    node _a_first_counter_T = mux(a_first, a_first_beats1, a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 390119:6]
    node _GEN_0 = mux(_a_first_T, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 390118:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 390120:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390108:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.SmallBoomConfig.fir 390122:4]
    reg param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), param) @[Monitor.scala 385:22 chipyard.TestHarness.SmallBoomConfig.fir 390123:4]
    reg size : UInt<3>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.SmallBoomConfig.fir 390124:4]
    reg source : UInt<4>, clock with :
      reset => (UInt<1>("h0"), source) @[Monitor.scala 387:22 chipyard.TestHarness.SmallBoomConfig.fir 390125:4]
    reg address : UInt<29>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.SmallBoomConfig.fir 390126:4]
    node _T_542 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.SmallBoomConfig.fir 390127:4]
    node _T_543 = and(io_in_a_valid, _T_542) @[Monitor.scala 389:19 chipyard.TestHarness.SmallBoomConfig.fir 390128:4]
    node _T_544 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.SmallBoomConfig.fir 390130:6]
    node _T_546 = or(_T_544, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390132:6]
    node _T_547 = not(_T_546) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390133:6]
    node _T_548 = eq(io_in_a_bits_param, param) @[Monitor.scala 391:32 chipyard.TestHarness.SmallBoomConfig.fir 390138:6]
    node _T_550 = or(_T_548, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390140:6]
    node _T_551 = not(_T_550) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390141:6]
    node _T_552 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.SmallBoomConfig.fir 390146:6]
    node _T_554 = or(_T_552, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390148:6]
    node _T_555 = not(_T_554) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390149:6]
    node _T_556 = eq(io_in_a_bits_source, source) @[Monitor.scala 393:32 chipyard.TestHarness.SmallBoomConfig.fir 390154:6]
    node _T_558 = or(_T_556, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390156:6]
    node _T_559 = not(_T_558) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390157:6]
    node _T_560 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.SmallBoomConfig.fir 390162:6]
    node _T_562 = or(_T_560, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390164:6]
    node _T_563 = not(_T_562) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390165:6]
    node _T_565 = and(_a_first_T, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.SmallBoomConfig.fir 390172:4]
    node _d_first_T = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 390180:4]
    node _d_first_beats1_decode_T_1 = dshlw(UInt<13>("h3f"), io_in_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.SmallBoomConfig.fir 390182:4]
    node _d_first_beats1_decode_T_2 = bits(_d_first_beats1_decode_T_1, 5, 0) @[package.scala 234:82 chipyard.TestHarness.SmallBoomConfig.fir 390183:4]
    node _d_first_beats1_decode_T_3 = not(_d_first_beats1_decode_T_2) @[package.scala 234:46 chipyard.TestHarness.SmallBoomConfig.fir 390184:4]
    node d_first_beats1_decode = shr(_d_first_beats1_decode_T_3, 3) @[Edges.scala 219:59 chipyard.TestHarness.SmallBoomConfig.fir 390185:4]
    node d_first_beats1_opdata = bits(io_in_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.SmallBoomConfig.fir 390186:4]
    node d_first_beats1 = mux(d_first_beats1_opdata, d_first_beats1_decode, UInt<3>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.SmallBoomConfig.fir 390187:4]
    reg d_first_counter : UInt<3>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390188:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 390189:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 390190:4]
    node d_first = eq(d_first_counter, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 390191:4]
    node _d_first_counter_T = mux(d_first, d_first_beats1, d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 390199:6]
    node _GEN_6 = mux(_d_first_T, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 390198:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 390200:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390188:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.SmallBoomConfig.fir 390202:4]
    reg param_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), param_1) @[Monitor.scala 536:22 chipyard.TestHarness.SmallBoomConfig.fir 390203:4]
    reg size_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.SmallBoomConfig.fir 390204:4]
    reg source_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.SmallBoomConfig.fir 390205:4]
    reg sink : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sink) @[Monitor.scala 539:22 chipyard.TestHarness.SmallBoomConfig.fir 390206:4]
    reg denied : UInt<1>, clock with :
      reset => (UInt<1>("h0"), denied) @[Monitor.scala 540:22 chipyard.TestHarness.SmallBoomConfig.fir 390207:4]
    node _T_566 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.SmallBoomConfig.fir 390208:4]
    node _T_567 = and(io_in_d_valid, _T_566) @[Monitor.scala 541:19 chipyard.TestHarness.SmallBoomConfig.fir 390209:4]
    node _T_568 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.SmallBoomConfig.fir 390211:6]
    node _T_570 = or(_T_568, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390213:6]
    node _T_571 = not(_T_570) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390214:6]
    node _T_572 = eq(io_in_d_bits_param, param_1) @[Monitor.scala 543:29 chipyard.TestHarness.SmallBoomConfig.fir 390219:6]
    node _T_574 = or(_T_572, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390221:6]
    node _T_575 = not(_T_574) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390222:6]
    node _T_576 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.SmallBoomConfig.fir 390227:6]
    node _T_578 = or(_T_576, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390229:6]
    node _T_579 = not(_T_578) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390230:6]
    node _T_580 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.SmallBoomConfig.fir 390235:6]
    node _T_582 = or(_T_580, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390237:6]
    node _T_583 = not(_T_582) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390238:6]
    node _T_584 = eq(io_in_d_bits_sink, sink) @[Monitor.scala 546:29 chipyard.TestHarness.SmallBoomConfig.fir 390243:6]
    node _T_586 = or(_T_584, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390245:6]
    node _T_587 = not(_T_586) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390246:6]
    node _T_588 = eq(io_in_d_bits_denied, denied) @[Monitor.scala 547:29 chipyard.TestHarness.SmallBoomConfig.fir 390251:6]
    node _T_590 = or(_T_588, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390253:6]
    node _T_591 = not(_T_590) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390254:6]
    node _T_593 = and(_d_first_T, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.SmallBoomConfig.fir 390261:4]
    reg inflight : UInt<10>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 390270:4]
    reg inflight_opcodes : UInt<40>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 390271:4]
    reg inflight_sizes : UInt<40>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 390272:4]
    reg a_first_counter_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390282:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 390283:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 390284:4]
    node a_first_1 = eq(a_first_counter_1, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 390285:4]
    node _a_first_counter_T_1 = mux(a_first_1, a_first_beats1, a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 390293:6]
    node _GEN_13 = mux(_a_first_T, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 390292:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 390294:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390282:4]
    reg d_first_counter_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390304:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 390305:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 390306:4]
    node d_first_1 = eq(d_first_counter_1, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 390307:4]
    node _d_first_counter_T_1 = mux(d_first_1, d_first_beats1, d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 390315:6]
    node _GEN_14 = mux(_d_first_T, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 390314:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 390316:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390304:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.SmallBoomConfig.fir 390328:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 7) @[Monitor.scala 634:69 chipyard.TestHarness.SmallBoomConfig.fir 390328:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.SmallBoomConfig.fir 390329:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 390332:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 390333:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_5, 40) @[Monitor.scala 634:97 chipyard.TestHarness.SmallBoomConfig.fir 390334:4]
    node _a_opcode_lookup_T_6 = and(_a_opcode_lookup_T_1, _GEN_73) @[Monitor.scala 634:97 chipyard.TestHarness.SmallBoomConfig.fir 390334:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.SmallBoomConfig.fir 390335:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 40) @[Monitor.scala 634:152 chipyard.TestHarness.SmallBoomConfig.fir 390335:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_opcode_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.SmallBoomConfig.fir 390340:4]
    node _a_size_lookup_T_6 = and(_a_size_lookup_T_1, _GEN_73) @[Monitor.scala 638:91 chipyard.TestHarness.SmallBoomConfig.fir 390345:4]
    node _GEN_77 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.SmallBoomConfig.fir 390346:4]
    node _a_size_lookup_T_7 = pad(_GEN_77, 40) @[Monitor.scala 638:144 chipyard.TestHarness.SmallBoomConfig.fir 390346:4]
    node _T_594 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.SmallBoomConfig.fir 390370:4]
    node _a_set_wo_ready_T = dshlw(UInt<16>("h1"), io_in_a_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.SmallBoomConfig.fir 390373:6]
    node _GEN_15 = mux(_T_594, _a_set_wo_ready_T, UInt<16>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.SmallBoomConfig.fir 390372:4 Monitor.scala 649:22 chipyard.TestHarness.SmallBoomConfig.fir 390374:6 chipyard.TestHarness.SmallBoomConfig.fir 390321:4]
    node _T_597 = and(_a_first_T, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.SmallBoomConfig.fir 390377:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.SmallBoomConfig.fir 390382:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.SmallBoomConfig.fir 390383:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.SmallBoomConfig.fir 390385:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.SmallBoomConfig.fir 390386:6]
    node _GEN_78 = shl(io_in_a_bits_source, 2) @[Monitor.scala 656:79 chipyard.TestHarness.SmallBoomConfig.fir 390388:6]
    node _a_opcodes_set_T = pad(_GEN_78, 7) @[Monitor.scala 656:79 chipyard.TestHarness.SmallBoomConfig.fir 390388:6]
    node a_opcodes_set_interm = mux(_T_597, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 390379:4 Monitor.scala 654:28 chipyard.TestHarness.SmallBoomConfig.fir 390384:6 chipyard.TestHarness.SmallBoomConfig.fir 390367:4]
    node _GEN_79 = pad(a_opcodes_set_interm, 131) @[Monitor.scala 656:54 chipyard.TestHarness.SmallBoomConfig.fir 390389:6]
    node _a_opcodes_set_T_1 = dshlw(_GEN_79, _a_opcodes_set_T) @[Monitor.scala 656:54 chipyard.TestHarness.SmallBoomConfig.fir 390389:6]
    node a_sizes_set_interm = mux(_T_597, _a_sizes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 390379:4 Monitor.scala 655:28 chipyard.TestHarness.SmallBoomConfig.fir 390387:6 chipyard.TestHarness.SmallBoomConfig.fir 390369:4]
    node _GEN_81 = pad(a_sizes_set_interm, 131) @[Monitor.scala 657:52 chipyard.TestHarness.SmallBoomConfig.fir 390392:6]
    node _a_sizes_set_T_1 = dshlw(_GEN_81, _a_opcodes_set_T) @[Monitor.scala 657:52 chipyard.TestHarness.SmallBoomConfig.fir 390392:6]
    node _T_599 = dshr(inflight, io_in_a_bits_source) @[Monitor.scala 658:26 chipyard.TestHarness.SmallBoomConfig.fir 390394:6]
    node _T_600 = bits(_T_599, 0, 0) @[Monitor.scala 658:26 chipyard.TestHarness.SmallBoomConfig.fir 390395:6]
    node _T_601 = not(_T_600) @[Monitor.scala 658:17 chipyard.TestHarness.SmallBoomConfig.fir 390396:6]
    node _T_603 = or(_T_601, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390398:6]
    node _T_604 = not(_T_603) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390399:6]
    node _GEN_16 = mux(_T_597, _a_set_wo_ready_T, UInt<16>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 390379:4 Monitor.scala 653:28 chipyard.TestHarness.SmallBoomConfig.fir 390381:6 chipyard.TestHarness.SmallBoomConfig.fir 390319:4]
    node _GEN_19 = mux(_T_597, _a_opcodes_set_T_1, UInt<131>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 390379:4 Monitor.scala 656:28 chipyard.TestHarness.SmallBoomConfig.fir 390390:6 chipyard.TestHarness.SmallBoomConfig.fir 390323:4]
    node _GEN_20 = mux(_T_597, _a_sizes_set_T_1, UInt<131>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 390379:4 Monitor.scala 657:28 chipyard.TestHarness.SmallBoomConfig.fir 390393:6 chipyard.TestHarness.SmallBoomConfig.fir 390325:4]
    node _T_605 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.SmallBoomConfig.fir 390414:4]
    node _T_607 = not(_T_401) @[Monitor.scala 671:74 chipyard.TestHarness.SmallBoomConfig.fir 390416:4]
    node _T_608 = and(_T_605, _T_607) @[Monitor.scala 671:71 chipyard.TestHarness.SmallBoomConfig.fir 390417:4]
    node _d_clr_wo_ready_T = dshlw(UInt<16>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.SmallBoomConfig.fir 390419:6]
    node _GEN_21 = mux(_T_608, _d_clr_wo_ready_T, UInt<16>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.SmallBoomConfig.fir 390418:4 Monitor.scala 672:22 chipyard.TestHarness.SmallBoomConfig.fir 390420:6 chipyard.TestHarness.SmallBoomConfig.fir 390408:4]
    node _T_610 = and(_d_first_T, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.SmallBoomConfig.fir 390423:4]
    node _T_613 = and(_T_610, _T_607) @[Monitor.scala 675:72 chipyard.TestHarness.SmallBoomConfig.fir 390426:4]
    node _GEN_83 = pad(_a_opcode_lookup_T_5, 143) @[Monitor.scala 677:76 chipyard.TestHarness.SmallBoomConfig.fir 390435:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_83, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.SmallBoomConfig.fir 390435:6]
    node _GEN_22 = mux(_T_613, _d_clr_wo_ready_T, UInt<16>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.SmallBoomConfig.fir 390427:4 Monitor.scala 676:21 chipyard.TestHarness.SmallBoomConfig.fir 390429:6 chipyard.TestHarness.SmallBoomConfig.fir 390406:4]
    node _GEN_23 = mux(_T_613, _d_opcodes_clr_T_5, UInt<143>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.SmallBoomConfig.fir 390427:4 Monitor.scala 677:21 chipyard.TestHarness.SmallBoomConfig.fir 390436:6 chipyard.TestHarness.SmallBoomConfig.fir 390410:4]
    node _same_cycle_resp_T_2 = eq(io_in_a_bits_source, io_in_d_bits_source) @[Monitor.scala 681:113 chipyard.TestHarness.SmallBoomConfig.fir 390452:6]
    node same_cycle_resp = and(_T_594, _same_cycle_resp_T_2) @[Monitor.scala 681:88 chipyard.TestHarness.SmallBoomConfig.fir 390453:6]
    node _T_618 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.SmallBoomConfig.fir 390454:6]
    node _T_619 = bits(_T_618, 0, 0) @[Monitor.scala 682:25 chipyard.TestHarness.SmallBoomConfig.fir 390455:6]
    node _T_620 = or(_T_619, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.SmallBoomConfig.fir 390456:6]
    node _T_622 = or(_T_620, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390458:6]
    node _T_623 = not(_T_622) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390459:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 390465:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 390465:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 390465:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 390465:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 390465:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 390465:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 390465:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 390465:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 390465:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 390465:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 390465:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 390465:8]
    node _T_624 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 390465:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 390466:8 Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 390466:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 390466:8 Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 390466:8]
    node _T_625 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 390466:8]
    node _T_626 = or(_T_624, _T_625) @[Monitor.scala 685:77 chipyard.TestHarness.SmallBoomConfig.fir 390467:8]
    node _T_628 = or(_T_626, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390469:8]
    node _T_629 = not(_T_628) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390470:8]
    node _T_630 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.SmallBoomConfig.fir 390475:8]
    node _T_632 = or(_T_630, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390477:8]
    node _T_633 = not(_T_632) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390478:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 390326:4 Monitor.scala 634:21 chipyard.TestHarness.SmallBoomConfig.fir 390336:4]
    node _T_634 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 390485:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_634), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 390486:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 390486:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_634), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 390486:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 390486:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_634), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 390486:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 390486:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_634), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 390486:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 390486:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 390486:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 390486:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 390486:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 390486:8]
    node _T_635 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 390486:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 390488:8 Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 390488:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 390488:8 Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 390488:8]
    node _T_637 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 390488:8]
    node _T_638 = or(_T_635, _T_637) @[Monitor.scala 689:72 chipyard.TestHarness.SmallBoomConfig.fir 390489:8]
    node _T_640 = or(_T_638, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390491:8]
    node _T_641 = not(_T_640) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390492:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 390337:4 Monitor.scala 638:19 chipyard.TestHarness.SmallBoomConfig.fir 390347:4]
    node _GEN_86 = pad(io_in_d_bits_size, 4) @[Monitor.scala 691:36 chipyard.TestHarness.SmallBoomConfig.fir 390497:8]
    node _T_642 = eq(_GEN_86, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.SmallBoomConfig.fir 390497:8]
    node _T_644 = or(_T_642, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390499:8]
    node _T_645 = not(_T_644) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390500:8]
    node _T_647 = and(_T_605, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.SmallBoomConfig.fir 390508:4]
    node _T_648 = and(_T_647, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.SmallBoomConfig.fir 390509:4]
    node _T_650 = and(_T_648, _same_cycle_resp_T_2) @[Monitor.scala 694:65 chipyard.TestHarness.SmallBoomConfig.fir 390511:4]
    node _T_652 = and(_T_650, _T_607) @[Monitor.scala 694:116 chipyard.TestHarness.SmallBoomConfig.fir 390513:4]
    node _T_653 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.SmallBoomConfig.fir 390515:6]
    node _T_654 = or(_T_653, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.SmallBoomConfig.fir 390516:6]
    node _T_656 = or(_T_654, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390518:6]
    node _T_657 = not(_T_656) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390519:6]
    node a_set_wo_ready = bits(_GEN_15, 9, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 390320:4]
    node d_clr_wo_ready = bits(_GEN_21, 9, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 390407:4]
    node _T_658 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.SmallBoomConfig.fir 390525:4]
    node _T_659 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.SmallBoomConfig.fir 390526:4]
    node _T_660 = not(_T_659) @[Monitor.scala 699:51 chipyard.TestHarness.SmallBoomConfig.fir 390527:4]
    node _T_661 = or(_T_658, _T_660) @[Monitor.scala 699:48 chipyard.TestHarness.SmallBoomConfig.fir 390528:4]
    node _T_663 = or(_T_661, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390530:4]
    node _T_664 = not(_T_663) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390531:4]
    node a_set = bits(_GEN_16, 9, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 390318:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.SmallBoomConfig.fir 390536:4]
    node d_clr = bits(_GEN_22, 9, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 390405:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.SmallBoomConfig.fir 390537:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.SmallBoomConfig.fir 390538:4]
    node a_opcodes_set = bits(_GEN_19, 39, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 390322:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.SmallBoomConfig.fir 390540:4]
    node d_opcodes_clr = bits(_GEN_23, 39, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 390409:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.SmallBoomConfig.fir 390541:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.SmallBoomConfig.fir 390542:4]
    node a_sizes_set = bits(_GEN_20, 39, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 390324:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.SmallBoomConfig.fir 390544:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_opcodes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.SmallBoomConfig.fir 390546:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 390548:4]
    node _T_665 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.SmallBoomConfig.fir 390551:4]
    node _T_666 = not(_T_665) @[Monitor.scala 709:16 chipyard.TestHarness.SmallBoomConfig.fir 390552:4]
    node _T_667 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.SmallBoomConfig.fir 390553:4]
    node _T_668 = or(_T_666, _T_667) @[Monitor.scala 709:30 chipyard.TestHarness.SmallBoomConfig.fir 390554:4]
    node _T_669 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.SmallBoomConfig.fir 390555:4]
    node _T_670 = or(_T_668, _T_669) @[Monitor.scala 709:47 chipyard.TestHarness.SmallBoomConfig.fir 390556:4]
    node _T_672 = or(_T_670, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390558:4]
    node _T_673 = not(_T_672) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390559:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.SmallBoomConfig.fir 390564:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.SmallBoomConfig.fir 390565:4]
    node _T_676 = or(_a_first_T, _d_first_T) @[Monitor.scala 712:27 chipyard.TestHarness.SmallBoomConfig.fir 390569:4]
    node _GEN_57 = mux(_T_676, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.SmallBoomConfig.fir 390570:4 Monitor.scala 712:58 chipyard.TestHarness.SmallBoomConfig.fir 390571:6 Monitor.scala 711:14 chipyard.TestHarness.SmallBoomConfig.fir 390566:4]
    reg inflight_1 : UInt<10>, clock with :
      reset => (UInt<1>("h0"), inflight_1) @[Monitor.scala 723:35 chipyard.TestHarness.SmallBoomConfig.fir 390573:4]
    reg inflight_sizes_1 : UInt<40>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 390575:4]
    reg d_first_counter_2 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390610:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 390611:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 390612:4]
    node d_first_2 = eq(d_first_counter_2, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 390613:4]
    node _d_first_counter_T_2 = mux(d_first_2, d_first_beats1, d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 390621:6]
    node _GEN_59 = mux(_d_first_T, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 390620:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 390622:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390610:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_opcode_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.SmallBoomConfig.fir 390646:4]
    node _c_size_lookup_T_6 = and(_c_size_lookup_T_1, _GEN_73) @[Monitor.scala 747:93 chipyard.TestHarness.SmallBoomConfig.fir 390651:4]
    node _GEN_92 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.SmallBoomConfig.fir 390652:4]
    node _c_size_lookup_T_7 = pad(_GEN_92, 40) @[Monitor.scala 747:146 chipyard.TestHarness.SmallBoomConfig.fir 390652:4]
    node _T_694 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.SmallBoomConfig.fir 390730:4]
    node _T_696 = and(_T_694, _T_401) @[Monitor.scala 779:71 chipyard.TestHarness.SmallBoomConfig.fir 390732:4]
    node _T_698 = and(_d_first_T, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.SmallBoomConfig.fir 390738:4]
    node _T_700 = and(_T_698, _T_401) @[Monitor.scala 783:72 chipyard.TestHarness.SmallBoomConfig.fir 390740:4]
    node _GEN_67 = mux(_T_700, _d_clr_wo_ready_T, UInt<16>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.SmallBoomConfig.fir 390741:4 Monitor.scala 784:21 chipyard.TestHarness.SmallBoomConfig.fir 390743:6 chipyard.TestHarness.SmallBoomConfig.fir 390722:4]
    node _GEN_68 = mux(_T_700, _d_opcodes_clr_T_5, UInt<143>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.SmallBoomConfig.fir 390741:4 Monitor.scala 785:21 chipyard.TestHarness.SmallBoomConfig.fir 390750:6 chipyard.TestHarness.SmallBoomConfig.fir 390726:4]
    node _T_704 = dshr(inflight_1, io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.SmallBoomConfig.fir 390776:6]
    node _T_705 = bits(_T_704, 0, 0) @[Monitor.scala 791:25 chipyard.TestHarness.SmallBoomConfig.fir 390777:6]
    node _T_708 = or(_T_705, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390780:6]
    node _T_709 = not(_T_708) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390781:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 390634:4 Monitor.scala 747:21 chipyard.TestHarness.SmallBoomConfig.fir 390653:4]
    node _T_714 = eq(_GEN_86, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.SmallBoomConfig.fir 390799:8]
    node _T_716 = or(_T_714, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390801:8]
    node _T_717 = not(_T_716) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390802:8]
    node d_clr_1 = bits(_GEN_67, 9, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 390721:4]
    node _inflight_T_4 = not(d_clr_1) @[Monitor.scala 809:46 chipyard.TestHarness.SmallBoomConfig.fir 390844:4]
    node _inflight_T_5 = and(inflight_1, _inflight_T_4) @[Monitor.scala 809:44 chipyard.TestHarness.SmallBoomConfig.fir 390845:4]
    node d_opcodes_clr_1 = bits(_GEN_68, 39, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 390725:4]
    node _inflight_opcodes_T_4 = not(d_opcodes_clr_1) @[Monitor.scala 810:62 chipyard.TestHarness.SmallBoomConfig.fir 390848:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_opcodes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.SmallBoomConfig.fir 390853:4]
    reg watchdog_1 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog_1) @[Monitor.scala 813:27 chipyard.TestHarness.SmallBoomConfig.fir 390855:4]
    node _T_734 = orr(inflight_1) @[Monitor.scala 816:26 chipyard.TestHarness.SmallBoomConfig.fir 390858:4]
    node _T_735 = not(_T_734) @[Monitor.scala 816:16 chipyard.TestHarness.SmallBoomConfig.fir 390859:4]
    node _T_736 = eq(plusarg_reader_1.out, UInt<32>("h0")) @[Monitor.scala 816:39 chipyard.TestHarness.SmallBoomConfig.fir 390860:4]
    node _T_737 = or(_T_735, _T_736) @[Monitor.scala 816:30 chipyard.TestHarness.SmallBoomConfig.fir 390861:4]
    node _T_738 = lt(watchdog_1, plusarg_reader_1.out) @[Monitor.scala 816:59 chipyard.TestHarness.SmallBoomConfig.fir 390862:4]
    node _T_739 = or(_T_737, _T_738) @[Monitor.scala 816:47 chipyard.TestHarness.SmallBoomConfig.fir 390863:4]
    node _T_741 = or(_T_739, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390865:4]
    node _T_742 = not(_T_741) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390866:4]
    node _watchdog_T_2 = add(watchdog_1, UInt<32>("h1")) @[Monitor.scala 818:26 chipyard.TestHarness.SmallBoomConfig.fir 390871:4]
    node _watchdog_T_3 = tail(_watchdog_T_2, 1) @[Monitor.scala 818:26 chipyard.TestHarness.SmallBoomConfig.fir 390872:4]
    node _GEN_70 = mux(_d_first_T, UInt<32>("h0"), _watchdog_T_3) @[Monitor.scala 819:47 chipyard.TestHarness.SmallBoomConfig.fir 390879:4 Monitor.scala 819:58 chipyard.TestHarness.SmallBoomConfig.fir 390880:6 Monitor.scala 818:14 chipyard.TestHarness.SmallBoomConfig.fir 390873:4]
    a_first_counter <= mux(reset, UInt<3>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390108:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390108:4]
    opcode <= mux(_T_565, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 390173:4 Monitor.scala 397:15 chipyard.TestHarness.SmallBoomConfig.fir 390174:6 Monitor.scala 384:22 chipyard.TestHarness.SmallBoomConfig.fir 390122:4]
    param <= mux(_T_565, io_in_a_bits_param, param) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 390173:4 Monitor.scala 398:15 chipyard.TestHarness.SmallBoomConfig.fir 390175:6 Monitor.scala 385:22 chipyard.TestHarness.SmallBoomConfig.fir 390123:4]
    size <= mux(_T_565, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 390173:4 Monitor.scala 399:15 chipyard.TestHarness.SmallBoomConfig.fir 390176:6 Monitor.scala 386:22 chipyard.TestHarness.SmallBoomConfig.fir 390124:4]
    source <= mux(_T_565, io_in_a_bits_source, source) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 390173:4 Monitor.scala 400:15 chipyard.TestHarness.SmallBoomConfig.fir 390177:6 Monitor.scala 387:22 chipyard.TestHarness.SmallBoomConfig.fir 390125:4]
    address <= mux(_T_565, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 390173:4 Monitor.scala 401:15 chipyard.TestHarness.SmallBoomConfig.fir 390178:6 Monitor.scala 388:22 chipyard.TestHarness.SmallBoomConfig.fir 390126:4]
    d_first_counter <= mux(reset, UInt<3>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390188:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390188:4]
    opcode_1 <= mux(_T_593, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 390262:4 Monitor.scala 550:15 chipyard.TestHarness.SmallBoomConfig.fir 390263:6 Monitor.scala 535:22 chipyard.TestHarness.SmallBoomConfig.fir 390202:4]
    param_1 <= mux(_T_593, io_in_d_bits_param, param_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 390262:4 Monitor.scala 551:15 chipyard.TestHarness.SmallBoomConfig.fir 390264:6 Monitor.scala 536:22 chipyard.TestHarness.SmallBoomConfig.fir 390203:4]
    size_1 <= mux(_T_593, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 390262:4 Monitor.scala 552:15 chipyard.TestHarness.SmallBoomConfig.fir 390265:6 Monitor.scala 537:22 chipyard.TestHarness.SmallBoomConfig.fir 390204:4]
    source_1 <= mux(_T_593, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 390262:4 Monitor.scala 553:15 chipyard.TestHarness.SmallBoomConfig.fir 390266:6 Monitor.scala 538:22 chipyard.TestHarness.SmallBoomConfig.fir 390205:4]
    sink <= mux(_T_593, io_in_d_bits_sink, sink) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 390262:4 Monitor.scala 554:15 chipyard.TestHarness.SmallBoomConfig.fir 390267:6 Monitor.scala 539:22 chipyard.TestHarness.SmallBoomConfig.fir 390206:4]
    denied <= mux(_T_593, io_in_d_bits_denied, denied) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 390262:4 Monitor.scala 555:15 chipyard.TestHarness.SmallBoomConfig.fir 390268:6 Monitor.scala 540:22 chipyard.TestHarness.SmallBoomConfig.fir 390207:4]
    inflight <= mux(reset, UInt<10>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 390270:4 Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 390270:4 Monitor.scala 702:14 chipyard.TestHarness.SmallBoomConfig.fir 390539:4]
    inflight_opcodes <= mux(reset, UInt<40>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 390271:4 Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 390271:4 Monitor.scala 703:22 chipyard.TestHarness.SmallBoomConfig.fir 390543:4]
    inflight_sizes <= mux(reset, UInt<40>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 390272:4 Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 390272:4 Monitor.scala 704:20 chipyard.TestHarness.SmallBoomConfig.fir 390547:4]
    a_first_counter_1 <= mux(reset, UInt<3>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390282:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390282:4]
    d_first_counter_1 <= mux(reset, UInt<3>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390304:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390304:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 390548:4 Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 390548:4]
    inflight_1 <= mux(reset, UInt<10>("h0"), _inflight_T_5) @[Monitor.scala 723:35 chipyard.TestHarness.SmallBoomConfig.fir 390573:4 Monitor.scala 723:35 chipyard.TestHarness.SmallBoomConfig.fir 390573:4 Monitor.scala 809:22 chipyard.TestHarness.SmallBoomConfig.fir 390846:4]
    inflight_sizes_1 <= mux(reset, UInt<40>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 390575:4 Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 390575:4 Monitor.scala 811:22 chipyard.TestHarness.SmallBoomConfig.fir 390854:4]
    d_first_counter_2 <= mux(reset, UInt<3>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390610:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 390610:4]
    watchdog_1 <= mux(reset, UInt<32>("h0"), _GEN_70) @[Monitor.scala 813:27 chipyard.TestHarness.SmallBoomConfig.fir 390855:4 Monitor.scala 813:27 chipyard.TestHarness.SmallBoomConfig.fir 390855:4]
    node _GEN_98 = and(io_in_a_valid, _T_20) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389200:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389200:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389201:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389219:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389220:10]
    printf(clock, and(_GEN_98, _T_61), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389226:10]
    stop(clock, and(_GEN_98, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389227:10]
    printf(clock, and(_GEN_98, _T_65), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389234:10]
    stop(clock, and(_GEN_98, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389235:10]
    printf(clock, and(_GEN_98, _T_68), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389241:10]
    stop(clock, and(_GEN_98, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389242:10]
    printf(clock, and(_GEN_98, _T_72), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389249:10]
    stop(clock, and(_GEN_98, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389250:10]
    printf(clock, and(_GEN_98, _T_77), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389258:10]
    stop(clock, and(_GEN_98, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389259:10]
    printf(clock, and(_GEN_98, _T_81), "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389266:10]
    stop(clock, and(_GEN_98, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389267:10]
    node _GEN_114 = and(io_in_a_valid, _T_82) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389298:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389298:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389299:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389317:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389318:10]
    printf(clock, and(_GEN_114, _T_61), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389324:10]
    stop(clock, and(_GEN_114, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389325:10]
    printf(clock, and(_GEN_114, _T_65), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389332:10]
    stop(clock, and(_GEN_114, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389333:10]
    printf(clock, and(_GEN_114, _T_68), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389339:10]
    stop(clock, and(_GEN_114, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389340:10]
    printf(clock, and(_GEN_114, _T_72), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389347:10]
    stop(clock, and(_GEN_114, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389348:10]
    printf(clock, and(_GEN_114, _T_138), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389355:10]
    stop(clock, and(_GEN_114, _T_138), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389356:10]
    printf(clock, and(_GEN_114, _T_77), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389364:10]
    stop(clock, and(_GEN_114, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389365:10]
    printf(clock, and(_GEN_114, _T_81), "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389372:10]
    stop(clock, and(_GEN_114, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389373:10]
    node _GEN_132 = and(io_in_a_valid, _T_148) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389395:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389395:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389396:10]
    printf(clock, and(_GEN_132, _T_176), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389413:10]
    stop(clock, and(_GEN_132, _T_176), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389414:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel Get carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389420:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389421:10]
    printf(clock, and(_GEN_132, _T_68), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389427:10]
    stop(clock, and(_GEN_132, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389428:10]
    printf(clock, and(_GEN_132, _T_186), "Assertion failed: 'A' channel Get carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389435:10]
    stop(clock, and(_GEN_132, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389436:10]
    printf(clock, and(_GEN_132, _T_190), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389443:10]
    stop(clock, and(_GEN_132, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389444:10]
    printf(clock, and(_GEN_132, _T_81), "Assertion failed: 'A' channel Get is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389451:10]
    stop(clock, and(_GEN_132, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389452:10]
    node _GEN_146 = and(io_in_a_valid, _T_195) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389486:10]
    printf(clock, and(_GEN_146, _T_221), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389486:10]
    stop(clock, and(_GEN_146, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389487:10]
    printf(clock, and(_GEN_146, _T_61), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389493:10]
    stop(clock, and(_GEN_146, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389494:10]
    printf(clock, and(_GEN_146, _T_68), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389500:10]
    stop(clock, and(_GEN_146, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389501:10]
    printf(clock, and(_GEN_146, _T_186), "Assertion failed: 'A' channel PutFull carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389508:10]
    stop(clock, and(_GEN_146, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389509:10]
    printf(clock, and(_GEN_146, _T_190), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389516:10]
    stop(clock, and(_GEN_146, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389517:10]
    node _GEN_156 = and(io_in_a_valid, _T_236) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389551:10]
    printf(clock, and(_GEN_156, _T_221), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389551:10]
    stop(clock, and(_GEN_156, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389552:10]
    printf(clock, and(_GEN_156, _T_61), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389558:10]
    stop(clock, and(_GEN_156, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389559:10]
    printf(clock, and(_GEN_156, _T_68), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389565:10]
    stop(clock, and(_GEN_156, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389566:10]
    printf(clock, and(_GEN_156, _T_186), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389573:10]
    stop(clock, and(_GEN_156, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389574:10]
    printf(clock, and(_GEN_156, _T_278), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389583:10]
    stop(clock, and(_GEN_156, _T_278), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389584:10]
    node _GEN_166 = and(io_in_a_valid, _T_279) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389615:10]
    printf(clock, and(_GEN_166, _T_43), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389615:10]
    stop(clock, and(_GEN_166, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389616:10]
    printf(clock, and(_GEN_166, _T_61), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389622:10]
    stop(clock, and(_GEN_166, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389623:10]
    printf(clock, and(_GEN_166, _T_68), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389629:10]
    stop(clock, and(_GEN_166, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389630:10]
    printf(clock, and(_GEN_166, _T_312), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389637:10]
    stop(clock, and(_GEN_166, _T_312), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389638:10]
    printf(clock, and(_GEN_166, _T_190), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389645:10]
    stop(clock, and(_GEN_166, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389646:10]
    node _GEN_176 = and(io_in_a_valid, _T_317) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389677:10]
    printf(clock, and(_GEN_176, _T_43), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389677:10]
    stop(clock, and(_GEN_176, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389678:10]
    printf(clock, and(_GEN_176, _T_61), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389684:10]
    stop(clock, and(_GEN_176, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389685:10]
    printf(clock, and(_GEN_176, _T_68), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389691:10]
    stop(clock, and(_GEN_176, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389692:10]
    printf(clock, and(_GEN_176, _T_350), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389699:10]
    stop(clock, and(_GEN_176, _T_350), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389700:10]
    printf(clock, and(_GEN_176, _T_190), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389707:10]
    stop(clock, and(_GEN_176, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389708:10]
    node _GEN_186 = and(io_in_a_valid, _T_355) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389739:10]
    printf(clock, and(_GEN_186, _T_43), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389739:10]
    stop(clock, and(_GEN_186, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389740:10]
    printf(clock, and(_GEN_186, _T_61), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389746:10]
    stop(clock, and(_GEN_186, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389747:10]
    printf(clock, and(_GEN_186, _T_68), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389753:10]
    stop(clock, and(_GEN_186, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389754:10]
    printf(clock, and(_GEN_186, _T_388), "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389761:10]
    stop(clock, and(_GEN_186, _T_388), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389762:10]
    printf(clock, and(_GEN_186, _T_190), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389769:10]
    stop(clock, and(_GEN_186, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389770:10]
    printf(clock, and(_GEN_186, _T_81), "Assertion failed: 'A' channel Hint is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389777:10]
    stop(clock, and(_GEN_186, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 389778:10]
    printf(clock, and(io_in_d_valid, _T_400), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389788:8]
    stop(clock, and(io_in_d_valid, _T_400), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389789:8]
    node _GEN_198 = and(io_in_d_valid, _T_401) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389809:10]
    printf(clock, and(_GEN_198, _T_404), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389809:10]
    stop(clock, and(_GEN_198, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389810:10]
    printf(clock, and(_GEN_198, _T_408), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389817:10]
    stop(clock, and(_GEN_198, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389818:10]
    printf(clock, and(_GEN_198, _T_412), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389825:10]
    stop(clock, and(_GEN_198, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389826:10]
    printf(clock, and(_GEN_198, _T_416), "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389833:10]
    stop(clock, and(_GEN_198, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389834:10]
    printf(clock, and(_GEN_198, _T_420), "Assertion failed: 'D' channel ReleaseAck is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389841:10]
    stop(clock, and(_GEN_198, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389842:10]
    node _GEN_208 = and(io_in_d_valid, _T_421) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389851:10]
    printf(clock, and(_GEN_208, _T_404), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389851:10]
    stop(clock, and(_GEN_208, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389852:10]
    printf(clock, and(_GEN_208, _T_43), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389858:10]
    stop(clock, and(_GEN_208, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389859:10]
    printf(clock, and(_GEN_208, _T_408), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389866:10]
    stop(clock, and(_GEN_208, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389867:10]
    printf(clock, and(_GEN_208, _T_435), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389874:10]
    stop(clock, and(_GEN_208, _T_435), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389875:10]
    printf(clock, and(_GEN_208, _T_439), "Assertion failed: 'D' channel Grant carries toN param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389882:10]
    stop(clock, and(_GEN_208, _T_439), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389883:10]
    printf(clock, and(_GEN_208, _T_416), "Assertion failed: 'D' channel Grant is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389890:10]
    stop(clock, and(_GEN_208, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389891:10]
    printf(clock, and(_GEN_208, _T_420), "Assertion failed: 'D' channel Grant is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389899:10]
    stop(clock, and(_GEN_208, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389900:10]
    node _GEN_222 = and(io_in_d_valid, _T_449) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389909:10]
    printf(clock, and(_GEN_222, _T_404), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389909:10]
    stop(clock, and(_GEN_222, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389910:10]
    printf(clock, and(_GEN_222, _T_43), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389916:10]
    stop(clock, and(_GEN_222, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389917:10]
    printf(clock, and(_GEN_222, _T_408), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389924:10]
    stop(clock, and(_GEN_222, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389925:10]
    printf(clock, and(_GEN_222, _T_435), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389932:10]
    stop(clock, and(_GEN_222, _T_435), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389933:10]
    printf(clock, and(_GEN_222, _T_439), "Assertion failed: 'D' channel GrantData carries toN param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389940:10]
    stop(clock, and(_GEN_222, _T_439), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389941:10]
    printf(clock, and(_GEN_222, _T_472), "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389949:10]
    stop(clock, and(_GEN_222, _T_472), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389950:10]
    printf(clock, and(_GEN_222, _T_420), "Assertion failed: 'D' channel GrantData is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389958:10]
    stop(clock, and(_GEN_222, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389959:10]
    node _GEN_236 = and(io_in_d_valid, _T_478) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389968:10]
    printf(clock, and(_GEN_236, _T_404), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389968:10]
    stop(clock, and(_GEN_236, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389969:10]
    printf(clock, and(_GEN_236, _T_412), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389976:10]
    stop(clock, and(_GEN_236, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389977:10]
    printf(clock, and(_GEN_236, _T_416), "Assertion failed: 'D' channel AccessAck is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389984:10]
    stop(clock, and(_GEN_236, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389985:10]
    printf(clock, and(_GEN_236, _T_420), "Assertion failed: 'D' channel AccessAck is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389993:10]
    stop(clock, and(_GEN_236, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 389994:10]
    node _GEN_244 = and(io_in_d_valid, _T_495) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390003:10]
    printf(clock, and(_GEN_244, _T_404), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390003:10]
    stop(clock, and(_GEN_244, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390004:10]
    printf(clock, and(_GEN_244, _T_412), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390011:10]
    stop(clock, and(_GEN_244, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390012:10]
    printf(clock, and(_GEN_244, _T_472), "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390020:10]
    stop(clock, and(_GEN_244, _T_472), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390021:10]
    printf(clock, and(_GEN_244, _T_420), "Assertion failed: 'D' channel AccessAckData is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390029:10]
    stop(clock, and(_GEN_244, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390030:10]
    node _GEN_252 = and(io_in_d_valid, _T_513) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390039:10]
    printf(clock, and(_GEN_252, _T_404), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390039:10]
    stop(clock, and(_GEN_252, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390040:10]
    printf(clock, and(_GEN_252, _T_412), "Assertion failed: 'D' channel HintAck carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390047:10]
    stop(clock, and(_GEN_252, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390048:10]
    printf(clock, and(_GEN_252, _T_416), "Assertion failed: 'D' channel HintAck is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390055:10]
    stop(clock, and(_GEN_252, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390056:10]
    printf(clock, and(_GEN_252, _T_420), "Assertion failed: 'D' channel HintAck is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390064:10]
    stop(clock, and(_GEN_252, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390065:10]
    printf(clock, and(_T_543, _T_547), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390135:8]
    stop(clock, and(_T_543, _T_547), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390136:8]
    printf(clock, and(_T_543, _T_551), "Assertion failed: 'A' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390143:8]
    stop(clock, and(_T_543, _T_551), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390144:8]
    printf(clock, and(_T_543, _T_555), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390151:8]
    stop(clock, and(_T_543, _T_555), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390152:8]
    printf(clock, and(_T_543, _T_559), "Assertion failed: 'A' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390159:8]
    stop(clock, and(_T_543, _T_559), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390160:8]
    printf(clock, and(_T_543, _T_563), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390167:8]
    stop(clock, and(_T_543, _T_563), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390168:8]
    printf(clock, and(_T_567, _T_571), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390216:8]
    stop(clock, and(_T_567, _T_571), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390217:8]
    printf(clock, and(_T_567, _T_575), "Assertion failed: 'D' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390224:8]
    stop(clock, and(_T_567, _T_575), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390225:8]
    printf(clock, and(_T_567, _T_579), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390232:8]
    stop(clock, and(_T_567, _T_579), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390233:8]
    printf(clock, and(_T_567, _T_583), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390240:8]
    stop(clock, and(_T_567, _T_583), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390241:8]
    printf(clock, and(_T_567, _T_587), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390248:8]
    stop(clock, and(_T_567, _T_587), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390249:8]
    printf(clock, and(_T_567, _T_591), "Assertion failed: 'D' channel denied changed with multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390256:8]
    stop(clock, and(_T_567, _T_591), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390257:8]
    printf(clock, and(_T_597, _T_604), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390401:8]
    stop(clock, and(_T_597, _T_604), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390402:8]
    printf(clock, and(_T_608, _T_623), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390461:8]
    stop(clock, and(_T_608, _T_623), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390462:8]
    node _GEN_260 = and(_T_608, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390472:10]
    printf(clock, and(_GEN_260, _T_629), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390472:10]
    stop(clock, and(_GEN_260, _T_629), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390473:10]
    printf(clock, and(_GEN_260, _T_633), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390480:10]
    stop(clock, and(_GEN_260, _T_633), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390481:10]
    node _GEN_264 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390494:10]
    node _GEN_265 = and(_T_608, _GEN_264) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390494:10]
    printf(clock, and(_GEN_265, _T_641), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390494:10]
    stop(clock, and(_GEN_265, _T_641), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390495:10]
    printf(clock, and(_GEN_265, _T_645), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390502:10]
    stop(clock, and(_GEN_265, _T_645), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390503:10]
    printf(clock, and(_T_652, _T_657), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390521:8]
    stop(clock, and(_T_652, _T_657), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390522:8]
    printf(clock, _T_664, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 3 (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390533:6]
    stop(clock, _T_664, 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390534:6]
    printf(clock, _T_673, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390561:6]
    stop(clock, _T_673, 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390562:6]
    printf(clock, and(_T_696, _T_709), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390783:8]
    stop(clock, and(_T_696, _T_709), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390784:8]
    printf(clock, and(_T_696, _T_717), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390804:10]
    stop(clock, and(_T_696, _T_717), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 390805:10]
    printf(clock, _T_742, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390868:6]
    stop(clock, _T_742, 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 390869:6]

  module Repeater_7_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 390883:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 390884:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390885:4]
    input io_repeat : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    output io_full : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    input io_enq_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    input io_enq_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    input io_enq_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    input io_enq_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    input io_enq_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    input io_enq_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    output io_deq_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    output io_deq_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    output io_deq_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    output io_deq_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    output io_deq_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390886:4]

    reg full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), full) @[Repeater.scala 19:21 chipyard.TestHarness.SmallBoomConfig.fir 390888:4]
    reg saved_opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), saved_opcode) @[Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]
    reg saved_param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), saved_param) @[Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]
    reg saved_size : UInt<3>, clock with :
      reset => (UInt<1>("h0"), saved_size) @[Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]
    reg saved_source : UInt<4>, clock with :
      reset => (UInt<1>("h0"), saved_source) @[Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]
    reg saved_address : UInt<29>, clock with :
      reset => (UInt<1>("h0"), saved_address) @[Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]
    reg saved_mask : UInt<8>, clock with :
      reset => (UInt<1>("h0"), saved_mask) @[Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]
    reg saved_corrupt : UInt<1>, clock with :
      reset => (UInt<1>("h0"), saved_corrupt) @[Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]
    node _io_enq_ready_T = not(full) @[Repeater.scala 24:35 chipyard.TestHarness.SmallBoomConfig.fir 390892:4]
    node _T = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 390905:4]
    node _T_1 = and(_T, io_repeat) @[Repeater.scala 28:23 chipyard.TestHarness.SmallBoomConfig.fir 390906:4]
    node _GEN_0 = or(_T_1, full) @[Repeater.scala 28:38 chipyard.TestHarness.SmallBoomConfig.fir 390907:4 Repeater.scala 28:45 chipyard.TestHarness.SmallBoomConfig.fir 390908:6 Repeater.scala 19:21 chipyard.TestHarness.SmallBoomConfig.fir 390888:4]
    node _T_2 = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 390918:4]
    node _T_3 = not(io_repeat) @[Repeater.scala 29:26 chipyard.TestHarness.SmallBoomConfig.fir 390919:4]
    node _T_4 = and(_T_2, _T_3) @[Repeater.scala 29:23 chipyard.TestHarness.SmallBoomConfig.fir 390920:4]
    node _GEN_9 = mux(_T_4, UInt<1>("h0"), _GEN_0) @[Repeater.scala 29:38 chipyard.TestHarness.SmallBoomConfig.fir 390921:4 Repeater.scala 29:45 chipyard.TestHarness.SmallBoomConfig.fir 390922:6]
    io_full <= full @[Repeater.scala 26:11 chipyard.TestHarness.SmallBoomConfig.fir 390904:4]
    io_enq_ready <= and(io_deq_ready, _io_enq_ready_T) @[Repeater.scala 24:32 chipyard.TestHarness.SmallBoomConfig.fir 390893:4]
    io_deq_valid <= or(io_enq_valid, full) @[Repeater.scala 23:32 chipyard.TestHarness.SmallBoomConfig.fir 390890:4]
    io_deq_bits_opcode <= mux(full, saved_opcode, io_enq_bits_opcode) @[Repeater.scala 25:21 chipyard.TestHarness.SmallBoomConfig.fir 390895:4]
    io_deq_bits_param <= mux(full, saved_param, io_enq_bits_param) @[Repeater.scala 25:21 chipyard.TestHarness.SmallBoomConfig.fir 390895:4]
    io_deq_bits_size <= mux(full, saved_size, io_enq_bits_size) @[Repeater.scala 25:21 chipyard.TestHarness.SmallBoomConfig.fir 390895:4]
    io_deq_bits_source <= mux(full, saved_source, io_enq_bits_source) @[Repeater.scala 25:21 chipyard.TestHarness.SmallBoomConfig.fir 390895:4]
    io_deq_bits_address <= mux(full, saved_address, io_enq_bits_address) @[Repeater.scala 25:21 chipyard.TestHarness.SmallBoomConfig.fir 390895:4]
    io_deq_bits_mask <= mux(full, saved_mask, io_enq_bits_mask) @[Repeater.scala 25:21 chipyard.TestHarness.SmallBoomConfig.fir 390895:4]
    io_deq_bits_corrupt <= mux(full, saved_corrupt, io_enq_bits_corrupt) @[Repeater.scala 25:21 chipyard.TestHarness.SmallBoomConfig.fir 390895:4]
    full <= mux(reset, UInt<1>("h0"), _GEN_9) @[Repeater.scala 19:21 chipyard.TestHarness.SmallBoomConfig.fir 390888:4 Repeater.scala 19:21 chipyard.TestHarness.SmallBoomConfig.fir 390888:4]
    saved_opcode <= mux(_T_1, io_enq_bits_opcode, saved_opcode) @[Repeater.scala 28:38 chipyard.TestHarness.SmallBoomConfig.fir 390907:4 Repeater.scala 28:62 chipyard.TestHarness.SmallBoomConfig.fir 390916:6 Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]
    saved_param <= mux(_T_1, io_enq_bits_param, saved_param) @[Repeater.scala 28:38 chipyard.TestHarness.SmallBoomConfig.fir 390907:4 Repeater.scala 28:62 chipyard.TestHarness.SmallBoomConfig.fir 390915:6 Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]
    saved_size <= mux(_T_1, io_enq_bits_size, saved_size) @[Repeater.scala 28:38 chipyard.TestHarness.SmallBoomConfig.fir 390907:4 Repeater.scala 28:62 chipyard.TestHarness.SmallBoomConfig.fir 390914:6 Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]
    saved_source <= mux(_T_1, io_enq_bits_source, saved_source) @[Repeater.scala 28:38 chipyard.TestHarness.SmallBoomConfig.fir 390907:4 Repeater.scala 28:62 chipyard.TestHarness.SmallBoomConfig.fir 390913:6 Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]
    saved_address <= mux(_T_1, io_enq_bits_address, saved_address) @[Repeater.scala 28:38 chipyard.TestHarness.SmallBoomConfig.fir 390907:4 Repeater.scala 28:62 chipyard.TestHarness.SmallBoomConfig.fir 390912:6 Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]
    saved_mask <= mux(_T_1, io_enq_bits_mask, saved_mask) @[Repeater.scala 28:38 chipyard.TestHarness.SmallBoomConfig.fir 390907:4 Repeater.scala 28:62 chipyard.TestHarness.SmallBoomConfig.fir 390911:6 Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]
    saved_corrupt <= mux(_T_1, io_enq_bits_corrupt, saved_corrupt) @[Repeater.scala 28:38 chipyard.TestHarness.SmallBoomConfig.fir 390907:4 Repeater.scala 28:62 chipyard.TestHarness.SmallBoomConfig.fir 390909:6 Repeater.scala 20:18 chipyard.TestHarness.SmallBoomConfig.fir 390889:4]

  module TLFragmenter_7_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 390925:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 390926:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390927:4]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_in_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_in_a_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_in_a_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_in_a_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_in_a_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_in_d_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_in_d_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_in_d_bits_source : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_in_d_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_out_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_out_a_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_out_a_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_out_a_bits_address : UInt<29> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_out_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_out_a_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_out_d_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_out_d_bits_size : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_out_d_bits_source : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_out_d_bits_sink : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_out_d_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_out_d_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]
    input auto_out_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 390928:4]

    inst monitor of TLMonitor_56_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.SmallBoomConfig.fir 390935:4]
    inst repeater of Repeater_7_inTestHarness @[Fragmenter.scala 262:30 chipyard.TestHarness.SmallBoomConfig.fir 391037:4]
    reg acknum : UInt<3>, clock with :
      reset => (UInt<1>("h0"), acknum) @[Fragmenter.scala 189:29 chipyard.TestHarness.SmallBoomConfig.fir 390962:4]
    reg dOrig : UInt<3>, clock with :
      reset => (UInt<1>("h0"), dOrig) @[Fragmenter.scala 190:24 chipyard.TestHarness.SmallBoomConfig.fir 390963:4]
    reg dToggle : UInt<1>, clock with :
      reset => (UInt<1>("h0"), dToggle) @[Fragmenter.scala 191:30 chipyard.TestHarness.SmallBoomConfig.fir 390964:4]
    node dFragnum = bits(auto_out_d_bits_source, 2, 0) @[Fragmenter.scala 192:41 chipyard.TestHarness.SmallBoomConfig.fir 390965:4]
    node dFirst = eq(acknum, UInt<3>("h0")) @[Fragmenter.scala 193:29 chipyard.TestHarness.SmallBoomConfig.fir 390966:4]
    node dLast = eq(dFragnum, UInt<3>("h0")) @[Fragmenter.scala 194:30 chipyard.TestHarness.SmallBoomConfig.fir 390967:4]
    node dsizeOH = dshlw(UInt<4>("h1"), auto_out_d_bits_size) @[OneHot.scala 65:12 chipyard.TestHarness.SmallBoomConfig.fir 390969:4]
    node _dsizeOH1_T_1 = dshlw(UInt<6>("h7"), auto_out_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.SmallBoomConfig.fir 390972:4]
    node _dsizeOH1_T_2 = bits(_dsizeOH1_T_1, 2, 0) @[package.scala 234:82 chipyard.TestHarness.SmallBoomConfig.fir 390973:4]
    node dsizeOH1 = not(_dsizeOH1_T_2) @[package.scala 234:46 chipyard.TestHarness.SmallBoomConfig.fir 390974:4]
    node dHasData = bits(auto_out_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.SmallBoomConfig.fir 390975:4]
    node _ack_decrement_T = shr(dsizeOH, 3) @[Fragmenter.scala 204:60 chipyard.TestHarness.SmallBoomConfig.fir 390991:4]
    node ack_decrement = or(dHasData, _ack_decrement_T) @[Fragmenter.scala 204:32 chipyard.TestHarness.SmallBoomConfig.fir 390992:4]
    node _dFirst_size_T = shl(dFragnum, 3) @[Fragmenter.scala 206:47 chipyard.TestHarness.SmallBoomConfig.fir 390993:4]
    node _GEN_7 = pad(dsizeOH1, 6) @[Fragmenter.scala 206:69 chipyard.TestHarness.SmallBoomConfig.fir 390994:4]
    node dFirst_size_lo = or(_dFirst_size_T, _GEN_7) @[Fragmenter.scala 206:69 chipyard.TestHarness.SmallBoomConfig.fir 390994:4]
    node _dFirst_size_T_1 = shl(dFirst_size_lo, 1) @[package.scala 232:35 chipyard.TestHarness.SmallBoomConfig.fir 390995:4]
    node _dFirst_size_T_2 = or(_dFirst_size_T_1, UInt<7>("h1")) @[package.scala 232:40 chipyard.TestHarness.SmallBoomConfig.fir 390996:4]
    node _dFirst_size_T_3 = cat(UInt<1>("h0"), dFirst_size_lo) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 390997:4]
    node _dFirst_size_T_4 = not(_dFirst_size_T_3) @[package.scala 232:53 chipyard.TestHarness.SmallBoomConfig.fir 390998:4]
    node _dFirst_size_T_5 = and(_dFirst_size_T_2, _dFirst_size_T_4) @[package.scala 232:51 chipyard.TestHarness.SmallBoomConfig.fir 390999:4]
    node dFirst_size_hi = bits(_dFirst_size_T_5, 6, 4) @[OneHot.scala 30:18 chipyard.TestHarness.SmallBoomConfig.fir 391000:4]
    node dFirst_size_lo_1 = bits(_dFirst_size_T_5, 3, 0) @[OneHot.scala 31:18 chipyard.TestHarness.SmallBoomConfig.fir 391001:4]
    node dFirst_size_hi_1 = orr(dFirst_size_hi) @[OneHot.scala 32:14 chipyard.TestHarness.SmallBoomConfig.fir 391002:4]
    node _GEN_8 = pad(dFirst_size_hi, 4) @[OneHot.scala 32:28 chipyard.TestHarness.SmallBoomConfig.fir 391003:4]
    node _dFirst_size_T_6 = or(_GEN_8, dFirst_size_lo_1) @[OneHot.scala 32:28 chipyard.TestHarness.SmallBoomConfig.fir 391003:4]
    node dFirst_size_hi_2 = bits(_dFirst_size_T_6, 3, 2) @[OneHot.scala 30:18 chipyard.TestHarness.SmallBoomConfig.fir 391004:4]
    node dFirst_size_lo_2 = bits(_dFirst_size_T_6, 1, 0) @[OneHot.scala 31:18 chipyard.TestHarness.SmallBoomConfig.fir 391005:4]
    node dFirst_size_hi_3 = orr(dFirst_size_hi_2) @[OneHot.scala 32:14 chipyard.TestHarness.SmallBoomConfig.fir 391006:4]
    node _dFirst_size_T_7 = or(dFirst_size_hi_2, dFirst_size_lo_2) @[OneHot.scala 32:28 chipyard.TestHarness.SmallBoomConfig.fir 391007:4]
    node dFirst_size_lo_3 = bits(_dFirst_size_T_7, 1, 1) @[CircuitMath.scala 30:8 chipyard.TestHarness.SmallBoomConfig.fir 391008:4]
    node dFirst_size = cat(dFirst_size_hi_1, cat(dFirst_size_hi_3, dFirst_size_lo_3)) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 391010:4]
    node _drop_T = not(dHasData) @[Fragmenter.scala 222:20 chipyard.TestHarness.SmallBoomConfig.fir 391023:4]
    node _drop_T_2 = not(dLast) @[Fragmenter.scala 222:33 chipyard.TestHarness.SmallBoomConfig.fir 391025:4]
    node drop = and(_drop_T, _drop_T_2) @[Fragmenter.scala 222:30 chipyard.TestHarness.SmallBoomConfig.fir 391026:4]
    node bundleOut_0_d_ready = or(auto_in_d_ready, drop) @[Fragmenter.scala 223:35 chipyard.TestHarness.SmallBoomConfig.fir 391027:4]
    node _T_7 = and(bundleOut_0_d_ready, auto_out_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 391011:4]
    node _GEN_9 = pad(ack_decrement, 3) @[Fragmenter.scala 209:55 chipyard.TestHarness.SmallBoomConfig.fir 391013:6]
    node _acknum_T = sub(acknum, _GEN_9) @[Fragmenter.scala 209:55 chipyard.TestHarness.SmallBoomConfig.fir 391013:6]
    node _acknum_T_1 = tail(_acknum_T, 1) @[Fragmenter.scala 209:55 chipyard.TestHarness.SmallBoomConfig.fir 391014:6]
    node _acknum_T_2 = mux(dFirst, dFragnum, _acknum_T_1) @[Fragmenter.scala 209:24 chipyard.TestHarness.SmallBoomConfig.fir 391015:6]
    node _dToggle_T = bits(auto_out_d_bits_source, 3, 3) @[Fragmenter.scala 212:41 chipyard.TestHarness.SmallBoomConfig.fir 391019:8]
    node _GEN_0 = mux(dFirst, dFirst_size, dOrig) @[Fragmenter.scala 210:25 chipyard.TestHarness.SmallBoomConfig.fir 391017:6 Fragmenter.scala 211:19 chipyard.TestHarness.SmallBoomConfig.fir 391018:8 Fragmenter.scala 190:24 chipyard.TestHarness.SmallBoomConfig.fir 390963:4]
    node _GEN_1 = mux(dFirst, _dToggle_T, dToggle) @[Fragmenter.scala 210:25 chipyard.TestHarness.SmallBoomConfig.fir 391017:6 Fragmenter.scala 212:21 chipyard.TestHarness.SmallBoomConfig.fir 391020:8 Fragmenter.scala 191:30 chipyard.TestHarness.SmallBoomConfig.fir 390964:4]
    node _GEN_2 = mux(_T_7, _acknum_T_2, acknum) @[Fragmenter.scala 208:29 chipyard.TestHarness.SmallBoomConfig.fir 391012:4 Fragmenter.scala 209:18 chipyard.TestHarness.SmallBoomConfig.fir 391016:6 Fragmenter.scala 189:29 chipyard.TestHarness.SmallBoomConfig.fir 390962:4]
    node _GEN_4 = mux(_T_7, _GEN_1, dToggle) @[Fragmenter.scala 208:29 chipyard.TestHarness.SmallBoomConfig.fir 391012:4 Fragmenter.scala 191:30 chipyard.TestHarness.SmallBoomConfig.fir 390964:4]
    node _bundleIn_0_d_valid_T = not(drop) @[Fragmenter.scala 224:39 chipyard.TestHarness.SmallBoomConfig.fir 391029:4]
    node _aFrag_T = gt(repeater.io_deq_bits_size, UInt<3>("h3")) @[Fragmenter.scala 285:31 chipyard.TestHarness.SmallBoomConfig.fir 391062:4]
    node aFrag = mux(_aFrag_T, UInt<3>("h3"), repeater.io_deq_bits_size) @[Fragmenter.scala 285:24 chipyard.TestHarness.SmallBoomConfig.fir 391063:4]
    node _aOrigOH1_T_1 = dshlw(UInt<13>("h3f"), repeater.io_deq_bits_size) @[package.scala 234:77 chipyard.TestHarness.SmallBoomConfig.fir 391065:4]
    node _aOrigOH1_T_2 = bits(_aOrigOH1_T_1, 5, 0) @[package.scala 234:82 chipyard.TestHarness.SmallBoomConfig.fir 391066:4]
    node aOrigOH1 = not(_aOrigOH1_T_2) @[package.scala 234:46 chipyard.TestHarness.SmallBoomConfig.fir 391067:4]
    node _aFragOH1_T_1 = dshlw(UInt<10>("h7"), aFrag) @[package.scala 234:77 chipyard.TestHarness.SmallBoomConfig.fir 391069:4]
    node _aFragOH1_T_2 = bits(_aFragOH1_T_1, 2, 0) @[package.scala 234:82 chipyard.TestHarness.SmallBoomConfig.fir 391070:4]
    node aFragOH1 = not(_aFragOH1_T_2) @[package.scala 234:46 chipyard.TestHarness.SmallBoomConfig.fir 391071:4]
    node _aHasData_opdata_T = bits(repeater.io_deq_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.SmallBoomConfig.fir 391072:4]
    node aHasData = not(_aHasData_opdata_T) @[Edges.scala 91:28 chipyard.TestHarness.SmallBoomConfig.fir 391073:4]
    reg gennum : UInt<3>, clock with :
      reset => (UInt<1>("h0"), gennum) @[Fragmenter.scala 291:29 chipyard.TestHarness.SmallBoomConfig.fir 391075:4]
    node aFirst = eq(gennum, UInt<3>("h0")) @[Fragmenter.scala 292:29 chipyard.TestHarness.SmallBoomConfig.fir 391076:4]
    node _old_gennum1_T = shr(aOrigOH1, 3) @[Fragmenter.scala 293:48 chipyard.TestHarness.SmallBoomConfig.fir 391077:4]
    node _old_gennum1_T_1 = sub(gennum, UInt<3>("h1")) @[Fragmenter.scala 293:79 chipyard.TestHarness.SmallBoomConfig.fir 391078:4]
    node _old_gennum1_T_2 = tail(_old_gennum1_T_1, 1) @[Fragmenter.scala 293:79 chipyard.TestHarness.SmallBoomConfig.fir 391079:4]
    node old_gennum1 = mux(aFirst, _old_gennum1_T, _old_gennum1_T_2) @[Fragmenter.scala 293:30 chipyard.TestHarness.SmallBoomConfig.fir 391080:4]
    node _new_gennum_T = not(old_gennum1) @[Fragmenter.scala 294:28 chipyard.TestHarness.SmallBoomConfig.fir 391081:4]
    node new_gennum = not(_new_gennum_T) @[Fragmenter.scala 294:26 chipyard.TestHarness.SmallBoomConfig.fir 391084:4]
    reg aToggle_r : UInt<1>, clock with :
      reset => (UInt<1>("h0"), aToggle_r) @[Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 391091:4]
    node _GEN_5 = mux(aFirst, dToggle, aToggle_r) @[Reg.scala 16:19 chipyard.TestHarness.SmallBoomConfig.fir 391092:4 Reg.scala 16:23 chipyard.TestHarness.SmallBoomConfig.fir 391093:6 Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 391091:4]
    node bundleOut_0_a_bits_source_hi_lo = not(_GEN_5) @[Fragmenter.scala 297:23 chipyard.TestHarness.SmallBoomConfig.fir 391096:4]
    node bundleOut_0_a_valid = repeater.io_deq_valid @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 Fragmenter.scala 303:15 chipyard.TestHarness.SmallBoomConfig.fir 391105:4]
    node _T_8 = and(auto_out_a_ready, bundleOut_0_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 391097:4]
    node _GEN_6 = mux(_T_8, new_gennum, gennum) @[Fragmenter.scala 300:29 chipyard.TestHarness.SmallBoomConfig.fir 391098:4 Fragmenter.scala 300:38 chipyard.TestHarness.SmallBoomConfig.fir 391099:6 Fragmenter.scala 291:29 chipyard.TestHarness.SmallBoomConfig.fir 391075:4]
    node _repeater_io_repeat_T = not(aHasData) @[Fragmenter.scala 302:31 chipyard.TestHarness.SmallBoomConfig.fir 391101:4]
    node _repeater_io_repeat_T_1 = neq(new_gennum, UInt<3>("h0")) @[Fragmenter.scala 302:53 chipyard.TestHarness.SmallBoomConfig.fir 391102:4]
    node _bundleOut_0_a_bits_address_T = shl(old_gennum1, 3) @[Fragmenter.scala 304:65 chipyard.TestHarness.SmallBoomConfig.fir 391106:4]
    node _bundleOut_0_a_bits_address_T_1 = not(aOrigOH1) @[Fragmenter.scala 304:90 chipyard.TestHarness.SmallBoomConfig.fir 391107:4]
    node _bundleOut_0_a_bits_address_T_2 = or(_bundleOut_0_a_bits_address_T, _bundleOut_0_a_bits_address_T_1) @[Fragmenter.scala 304:88 chipyard.TestHarness.SmallBoomConfig.fir 391108:4]
    node _GEN_10 = pad(aFragOH1, 6) @[Fragmenter.scala 304:100 chipyard.TestHarness.SmallBoomConfig.fir 391109:4]
    node _bundleOut_0_a_bits_address_T_3 = or(_bundleOut_0_a_bits_address_T_2, _GEN_10) @[Fragmenter.scala 304:100 chipyard.TestHarness.SmallBoomConfig.fir 391109:4]
    node _bundleOut_0_a_bits_address_T_4 = or(_bundleOut_0_a_bits_address_T_3, UInt<6>("h7")) @[Fragmenter.scala 304:111 chipyard.TestHarness.SmallBoomConfig.fir 391110:4]
    node _bundleOut_0_a_bits_address_T_5 = not(_bundleOut_0_a_bits_address_T_4) @[Fragmenter.scala 304:51 chipyard.TestHarness.SmallBoomConfig.fir 391111:4]
    node _GEN_11 = pad(_bundleOut_0_a_bits_address_T_5, 29) @[Fragmenter.scala 304:49 chipyard.TestHarness.SmallBoomConfig.fir 391112:4]
    node bundleOut_0_a_bits_source_hi = cat(repeater.io_deq_bits_source, bundleOut_0_a_bits_source_hi_lo) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 391114:4]
    node _T_9 = not(repeater.io_full) @[Fragmenter.scala 309:17 chipyard.TestHarness.SmallBoomConfig.fir 391118:4]
    node _T_11 = or(_T_9, _repeater_io_repeat_T) @[Fragmenter.scala 309:35 chipyard.TestHarness.SmallBoomConfig.fir 391120:4]
    node _T_13 = or(_T_11, reset) @[Fragmenter.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 391122:4]
    node _T_14 = not(_T_13) @[Fragmenter.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 391123:4]
    node _T_16 = eq(repeater.io_deq_bits_mask, UInt<8>("hff")) @[Fragmenter.scala 312:53 chipyard.TestHarness.SmallBoomConfig.fir 391130:4]
    node _T_17 = or(_T_9, _T_16) @[Fragmenter.scala 312:35 chipyard.TestHarness.SmallBoomConfig.fir 391131:4]
    node _T_19 = or(_T_17, reset) @[Fragmenter.scala 312:16 chipyard.TestHarness.SmallBoomConfig.fir 391133:4]
    node _T_20 = not(_T_19) @[Fragmenter.scala 312:16 chipyard.TestHarness.SmallBoomConfig.fir 391134:4]
    auto_in_a_ready <= repeater.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 Fragmenter.scala 263:25 chipyard.TestHarness.SmallBoomConfig.fir 391041:4]
    auto_in_d_valid <= and(auto_out_d_valid, _bundleIn_0_d_valid_T) @[Fragmenter.scala 224:36 chipyard.TestHarness.SmallBoomConfig.fir 391030:4]
    auto_in_d_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 390960:4]
    auto_in_d_bits_param <= auto_out_d_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 390960:4]
    auto_in_d_bits_size <= mux(dFirst, dFirst_size, dOrig) @[Fragmenter.scala 227:32 chipyard.TestHarness.SmallBoomConfig.fir 391035:4]
    auto_in_d_bits_source <= shr(auto_out_d_bits_source, 4) @[Fragmenter.scala 226:47 chipyard.TestHarness.SmallBoomConfig.fir 391033:4]
    auto_in_d_bits_sink <= auto_out_d_bits_sink @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 390960:4]
    auto_in_d_bits_denied <= auto_out_d_bits_denied @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 390960:4]
    auto_in_d_bits_data <= auto_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 390960:4]
    auto_in_d_bits_corrupt <= auto_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 390960:4]
    auto_out_a_valid <= repeater.io_deq_valid @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 Fragmenter.scala 303:15 chipyard.TestHarness.SmallBoomConfig.fir 391105:4]
    auto_out_a_bits_opcode <= repeater.io_deq_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 Fragmenter.scala 303:15 chipyard.TestHarness.SmallBoomConfig.fir 391105:4]
    auto_out_a_bits_param <= repeater.io_deq_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 Fragmenter.scala 303:15 chipyard.TestHarness.SmallBoomConfig.fir 391105:4]
    auto_out_a_bits_size <= bits(aFrag, 1, 0) @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 Fragmenter.scala 306:25 chipyard.TestHarness.SmallBoomConfig.fir 391117:4]
    auto_out_a_bits_source <= cat(bundleOut_0_a_bits_source_hi, new_gennum) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 391115:4]
    auto_out_a_bits_address <= or(repeater.io_deq_bits_address, _GEN_11) @[Fragmenter.scala 304:49 chipyard.TestHarness.SmallBoomConfig.fir 391112:4]
    auto_out_a_bits_mask <= mux(repeater.io_full, UInt<8>("hff"), auto_in_a_bits_mask) @[Fragmenter.scala 313:31 chipyard.TestHarness.SmallBoomConfig.fir 391139:4]
    auto_out_a_bits_data <= auto_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    auto_out_a_bits_corrupt <= repeater.io_deq_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 Fragmenter.scala 303:15 chipyard.TestHarness.SmallBoomConfig.fir 391105:4]
    auto_out_d_ready <= or(auto_in_d_ready, drop) @[Fragmenter.scala 223:35 chipyard.TestHarness.SmallBoomConfig.fir 391027:4]
    monitor.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 390936:4]
    monitor.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 390937:4]
    monitor.io_in_a_ready <= repeater.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 Fragmenter.scala 263:25 chipyard.TestHarness.SmallBoomConfig.fir 391041:4]
    monitor.io_in_a_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    monitor.io_in_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    monitor.io_in_a_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    monitor.io_in_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    monitor.io_in_a_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    monitor.io_in_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    monitor.io_in_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    monitor.io_in_a_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    monitor.io_in_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    monitor.io_in_d_valid <= and(auto_out_d_valid, _bundleIn_0_d_valid_T) @[Fragmenter.scala 224:36 chipyard.TestHarness.SmallBoomConfig.fir 391030:4]
    monitor.io_in_d_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 390960:4]
    monitor.io_in_d_bits_param <= auto_out_d_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 390960:4]
    monitor.io_in_d_bits_size <= mux(dFirst, dFirst_size, dOrig) @[Fragmenter.scala 227:32 chipyard.TestHarness.SmallBoomConfig.fir 391035:4]
    monitor.io_in_d_bits_source <= shr(auto_out_d_bits_source, 4) @[Fragmenter.scala 226:47 chipyard.TestHarness.SmallBoomConfig.fir 391033:4]
    monitor.io_in_d_bits_sink <= auto_out_d_bits_sink @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 390960:4]
    monitor.io_in_d_bits_denied <= auto_out_d_bits_denied @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 390960:4]
    monitor.io_in_d_bits_corrupt <= auto_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 390960:4]
    acknum <= mux(reset, UInt<3>("h0"), _GEN_2) @[Fragmenter.scala 189:29 chipyard.TestHarness.SmallBoomConfig.fir 390962:4 Fragmenter.scala 189:29 chipyard.TestHarness.SmallBoomConfig.fir 390962:4]
    dOrig <= mux(_T_7, _GEN_0, dOrig) @[Fragmenter.scala 208:29 chipyard.TestHarness.SmallBoomConfig.fir 391012:4 Fragmenter.scala 190:24 chipyard.TestHarness.SmallBoomConfig.fir 390963:4]
    dToggle <= mux(reset, UInt<1>("h0"), _GEN_4) @[Fragmenter.scala 191:30 chipyard.TestHarness.SmallBoomConfig.fir 390964:4 Fragmenter.scala 191:30 chipyard.TestHarness.SmallBoomConfig.fir 390964:4]
    repeater.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 391039:4]
    repeater.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 391040:4]
    repeater.io_repeat <= and(_repeater_io_repeat_T, _repeater_io_repeat_T_1) @[Fragmenter.scala 302:41 chipyard.TestHarness.SmallBoomConfig.fir 391103:4]
    repeater.io_enq_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    repeater.io_enq_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    repeater.io_enq_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    repeater.io_enq_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    repeater.io_enq_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    repeater.io_enq_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    repeater.io_enq_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    repeater.io_enq_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 390933:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 390961:4]
    repeater.io_deq_ready <= auto_out_a_ready @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 390958:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 390960:4]
    gennum <= mux(reset, UInt<3>("h0"), _GEN_6) @[Fragmenter.scala 291:29 chipyard.TestHarness.SmallBoomConfig.fir 391075:4 Fragmenter.scala 291:29 chipyard.TestHarness.SmallBoomConfig.fir 391075:4]
    aToggle_r <= mux(aFirst, dToggle, aToggle_r) @[Reg.scala 16:19 chipyard.TestHarness.SmallBoomConfig.fir 391092:4 Reg.scala 16:23 chipyard.TestHarness.SmallBoomConfig.fir 391093:6 Reg.scala 15:16 chipyard.TestHarness.SmallBoomConfig.fir 391091:4]
    printf(clock, _T_14, "Assertion failed\n    at Fragmenter.scala:309 assert (!repeater.io.full || !aHasData)\n") @[Fragmenter.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 391125:6]
    stop(clock, _T_14, 1) @[Fragmenter.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 391126:6]
    printf(clock, _T_20, "Assertion failed\n    at Fragmenter.scala:312 assert (!repeater.io.full || in_a.bits.mask === fullMask)\n") @[Fragmenter.scala 312:16 chipyard.TestHarness.SmallBoomConfig.fir 391136:6]
    stop(clock, _T_20, 1) @[Fragmenter.scala 312:16 chipyard.TestHarness.SmallBoomConfig.fir 391137:6]

  module TLMonitor_57_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 391177:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 391178:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 391179:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_a_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_a_bits_address : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_d_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_d_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_d_bits_source : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_d_bits_sink : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]
    input io_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 391180:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.SmallBoomConfig.fir 393119:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.SmallBoomConfig.fir 393426:4]
    node _is_aligned_mask_T_1 = dshlw(UInt<27>("hfff"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.SmallBoomConfig.fir 391196:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 11, 0) @[package.scala 234:82 chipyard.TestHarness.SmallBoomConfig.fir 391197:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.SmallBoomConfig.fir 391198:6]
    node _GEN_71 = pad(is_aligned_mask, 32) @[Edges.scala 20:16 chipyard.TestHarness.SmallBoomConfig.fir 391199:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.SmallBoomConfig.fir 391199:6]
    node is_aligned = eq(_is_aligned_T, UInt<32>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.SmallBoomConfig.fir 391200:6]
    node mask_sizeOH_shiftAmount = bits(io_in_a_bits_size, 1, 0) @[OneHot.scala 64:49 chipyard.TestHarness.SmallBoomConfig.fir 391202:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<4>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.SmallBoomConfig.fir 391203:6]
    node _mask_sizeOH_T_2 = bits(_mask_sizeOH_T_1, 2, 0) @[OneHot.scala 65:27 chipyard.TestHarness.SmallBoomConfig.fir 391204:6]
    node mask_sizeOH = or(_mask_sizeOH_T_2, UInt<3>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.SmallBoomConfig.fir 391205:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<4>("h3")) @[Misc.scala 205:21 chipyard.TestHarness.SmallBoomConfig.fir 391206:6]
    node mask_size = bits(mask_sizeOH, 2, 2) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 391207:6]
    node mask_bit = bits(io_in_a_bits_address, 2, 2) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 391208:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 391209:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391211:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391212:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391214:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391215:6]
    node mask_size_1 = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 391216:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 391217:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 391218:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 391219:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391220:6]
    node mask_acc_2 = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391221:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 391222:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391223:6]
    node mask_acc_3 = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391224:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 391225:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391226:6]
    node mask_acc_4 = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391227:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 391228:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391229:6]
    node mask_acc_5 = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391230:6]
    node mask_size_2 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.SmallBoomConfig.fir 391231:6]
    node mask_bit_2 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.SmallBoomConfig.fir 391232:6]
    node mask_nbit_2 = not(mask_bit_2) @[Misc.scala 210:20 chipyard.TestHarness.SmallBoomConfig.fir 391233:6]
    node mask_eq_6 = and(mask_eq_2, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 391234:6]
    node _mask_acc_T_6 = and(mask_size_2, mask_eq_6) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391235:6]
    node mask_lo_lo_lo = or(mask_acc_2, _mask_acc_T_6) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391236:6]
    node mask_eq_7 = and(mask_eq_2, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 391237:6]
    node _mask_acc_T_7 = and(mask_size_2, mask_eq_7) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391238:6]
    node mask_lo_lo_hi = or(mask_acc_2, _mask_acc_T_7) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391239:6]
    node mask_eq_8 = and(mask_eq_3, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 391240:6]
    node _mask_acc_T_8 = and(mask_size_2, mask_eq_8) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391241:6]
    node mask_lo_hi_lo = or(mask_acc_3, _mask_acc_T_8) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391242:6]
    node mask_eq_9 = and(mask_eq_3, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 391243:6]
    node _mask_acc_T_9 = and(mask_size_2, mask_eq_9) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391244:6]
    node mask_lo_hi_hi = or(mask_acc_3, _mask_acc_T_9) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391245:6]
    node mask_eq_10 = and(mask_eq_4, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 391246:6]
    node _mask_acc_T_10 = and(mask_size_2, mask_eq_10) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391247:6]
    node mask_hi_lo_lo = or(mask_acc_4, _mask_acc_T_10) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391248:6]
    node mask_eq_11 = and(mask_eq_4, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 391249:6]
    node _mask_acc_T_11 = and(mask_size_2, mask_eq_11) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391250:6]
    node mask_hi_lo_hi = or(mask_acc_4, _mask_acc_T_11) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391251:6]
    node mask_eq_12 = and(mask_eq_5, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 391252:6]
    node _mask_acc_T_12 = and(mask_size_2, mask_eq_12) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391253:6]
    node mask_hi_hi_lo = or(mask_acc_5, _mask_acc_T_12) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391254:6]
    node mask_eq_13 = and(mask_eq_5, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.SmallBoomConfig.fir 391255:6]
    node _mask_acc_T_13 = and(mask_size_2, mask_eq_13) @[Misc.scala 214:38 chipyard.TestHarness.SmallBoomConfig.fir 391256:6]
    node mask_hi_hi_hi = or(mask_acc_5, _mask_acc_T_13) @[Misc.scala 214:29 chipyard.TestHarness.SmallBoomConfig.fir 391257:6]
    node mask = cat(cat(cat(mask_hi_hi_hi, mask_hi_hi_lo), cat(mask_hi_lo_hi, mask_hi_lo_lo)), cat(cat(mask_lo_hi_hi, mask_lo_hi_lo), cat(mask_lo_lo_hi, mask_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.SmallBoomConfig.fir 391264:6]
    node _T_7 = cvt(io_in_a_bits_address) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 391268:6]
    node _T_15 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.SmallBoomConfig.fir 391280:6]
    node _T_17 = leq(io_in_a_bits_size, UInt<4>("hc")) @[Parameters.scala 92:42 chipyard.TestHarness.SmallBoomConfig.fir 391283:8]
    node _T_25 = and(_T_7, SInt<33>("h-101000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391291:8]
    node _T_26 = asSInt(_T_25) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391292:8]
    node _T_27 = eq(_T_26, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 391293:8]
    node _T_28 = xor(io_in_a_bits_address, UInt<32>("h3000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 391294:8]
    node _T_29 = cvt(_T_28) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 391295:8]
    node _T_30 = and(_T_29, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391296:8]
    node _T_31 = asSInt(_T_30) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391297:8]
    node _T_32 = eq(_T_31, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 391298:8]
    node _T_33 = xor(io_in_a_bits_address, UInt<32>("h10000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 391299:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 391300:8]
    node _T_35 = and(_T_34, SInt<33>("h-10000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391301:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391302:8]
    node _T_37 = eq(_T_36, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 391303:8]
    node _T_38 = xor(io_in_a_bits_address, UInt<32>("h2000000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 391304:8]
    node _T_39 = cvt(_T_38) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 391305:8]
    node _T_40 = and(_T_39, SInt<33>("h-10000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391306:8]
    node _T_41 = asSInt(_T_40) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391307:8]
    node _T_42 = eq(_T_41, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 391308:8]
    node _T_43 = xor(io_in_a_bits_address, UInt<32>("h2010000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 391309:8]
    node _T_44 = cvt(_T_43) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 391310:8]
    node _T_45 = and(_T_44, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391311:8]
    node _T_46 = asSInt(_T_45) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391312:8]
    node _T_47 = eq(_T_46, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 391313:8]
    node _T_48 = xor(io_in_a_bits_address, UInt<32>("hc000000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 391314:8]
    node _T_49 = cvt(_T_48) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 391315:8]
    node _T_50 = and(_T_49, SInt<33>("h-4000000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391316:8]
    node _T_51 = asSInt(_T_50) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391317:8]
    node _T_52 = eq(_T_51, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 391318:8]
    node _T_53 = xor(io_in_a_bits_address, UInt<32>("h54000000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 391319:8]
    node _T_54 = cvt(_T_53) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 391320:8]
    node _T_55 = and(_T_54, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391321:8]
    node _T_56 = asSInt(_T_55) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391322:8]
    node _T_57 = eq(_T_56, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 391323:8]
    node _T_58 = or(_T_27, _T_32) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391324:8]
    node _T_65 = eq(UInt<4>("h6"), io_in_a_bits_size) @[Parameters.scala 91:48 chipyard.TestHarness.SmallBoomConfig.fir 391331:8]
    node _T_67 = xor(io_in_a_bits_address, UInt<32>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 391333:8]
    node _T_68 = cvt(_T_67) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 391334:8]
    node _T_69 = and(_T_68, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391335:8]
    node _T_70 = asSInt(_T_69) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391336:8]
    node _T_71 = eq(_T_70, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 391337:8]
    node _T_72 = xor(io_in_a_bits_address, UInt<32>("h80000000")) @[Parameters.scala 137:31 chipyard.TestHarness.SmallBoomConfig.fir 391338:8]
    node _T_73 = cvt(_T_72) @[Parameters.scala 137:49 chipyard.TestHarness.SmallBoomConfig.fir 391339:8]
    node _T_74 = and(_T_73, SInt<33>("h-10000000")) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391340:8]
    node _T_75 = asSInt(_T_74) @[Parameters.scala 137:52 chipyard.TestHarness.SmallBoomConfig.fir 391341:8]
    node _T_76 = eq(_T_75, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.SmallBoomConfig.fir 391342:8]
    node _T_77 = or(_T_71, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391343:8]
    node _T_78 = and(_T_65, _T_77) @[Parameters.scala 670:56 chipyard.TestHarness.SmallBoomConfig.fir 391344:8]
    node _T_81 = and(_T_17, _T_78) @[Monitor.scala 82:72 chipyard.TestHarness.SmallBoomConfig.fir 391347:8]
    node _T_83 = or(_T_81, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391349:8]
    node _T_84 = not(_T_83) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391350:8]
    node _T_147 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391417:8]
    node _T_153 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391431:8]
    node _T_154 = not(_T_153) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391432:8]
    node _T_156 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391438:8]
    node _T_157 = not(_T_156) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391439:8]
    node _T_162 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.SmallBoomConfig.fir 391452:8]
    node _T_163 = eq(_T_162, UInt<8>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.SmallBoomConfig.fir 391453:8]
    node _T_165 = or(_T_163, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391455:8]
    node _T_166 = not(_T_165) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391456:8]
    node _T_171 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.SmallBoomConfig.fir 391470:6]
    node _T_331 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.SmallBoomConfig.fir 391668:6]
    node _T_339 = or(_T_17, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391677:8]
    node _T_340 = not(_T_339) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391678:8]
    node _T_350 = and(_T_17, _T_32) @[Parameters.scala 670:56 chipyard.TestHarness.SmallBoomConfig.fir 391692:8]
    node _T_352 = leq(io_in_a_bits_size, UInt<4>("h6")) @[Parameters.scala 92:42 chipyard.TestHarness.SmallBoomConfig.fir 391694:8]
    node _T_395 = or(_T_27, _T_37) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391737:8]
    node _T_396 = or(_T_395, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391738:8]
    node _T_397 = or(_T_396, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391739:8]
    node _T_398 = or(_T_397, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391740:8]
    node _T_399 = or(_T_398, _T_71) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391741:8]
    node _T_400 = or(_T_399, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391742:8]
    node _T_401 = or(_T_400, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391743:8]
    node _T_402 = and(_T_352, _T_401) @[Parameters.scala 670:56 chipyard.TestHarness.SmallBoomConfig.fir 391744:8]
    node _T_404 = or(_T_350, _T_402) @[Parameters.scala 672:30 chipyard.TestHarness.SmallBoomConfig.fir 391746:8]
    node _T_406 = or(_T_404, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391748:8]
    node _T_407 = not(_T_406) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391749:8]
    node _T_418 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.SmallBoomConfig.fir 391776:8]
    node _T_420 = or(_T_418, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391778:8]
    node _T_421 = not(_T_420) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391779:8]
    node _T_426 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.SmallBoomConfig.fir 391793:6]
    node _T_482 = or(_T_27, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391850:8]
    node _T_483 = or(_T_482, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391851:8]
    node _T_484 = or(_T_483, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391852:8]
    node _T_485 = or(_T_484, _T_71) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391853:8]
    node _T_486 = or(_T_485, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391854:8]
    node _T_487 = or(_T_486, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 391855:8]
    node _T_488 = and(_T_352, _T_487) @[Parameters.scala 670:56 chipyard.TestHarness.SmallBoomConfig.fir 391856:8]
    node _T_497 = or(_T_350, _T_488) @[Parameters.scala 672:30 chipyard.TestHarness.SmallBoomConfig.fir 391865:8]
    node _T_499 = and(_T_17, _T_497) @[Monitor.scala 115:71 chipyard.TestHarness.SmallBoomConfig.fir 391867:8]
    node _T_501 = or(_T_499, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391869:8]
    node _T_502 = not(_T_501) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391870:8]
    node _T_517 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.SmallBoomConfig.fir 391906:6]
    node _T_604 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.SmallBoomConfig.fir 392010:8]
    node _T_605 = and(io_in_a_bits_mask, _T_604) @[Monitor.scala 127:31 chipyard.TestHarness.SmallBoomConfig.fir 392011:8]
    node _T_606 = eq(_T_605, UInt<8>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.SmallBoomConfig.fir 392012:8]
    node _T_608 = or(_T_606, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392014:8]
    node _T_609 = not(_T_608) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392015:8]
    node _T_610 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.SmallBoomConfig.fir 392021:6]
    node _T_618 = leq(io_in_a_bits_size, UInt<4>("h3")) @[Parameters.scala 92:42 chipyard.TestHarness.SmallBoomConfig.fir 392030:8]
    node _T_662 = or(_T_58, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 392074:8]
    node _T_663 = or(_T_662, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 392075:8]
    node _T_664 = or(_T_663, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 392076:8]
    node _T_665 = or(_T_664, _T_71) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 392077:8]
    node _T_666 = or(_T_665, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 392078:8]
    node _T_667 = or(_T_666, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.SmallBoomConfig.fir 392079:8]
    node _T_668 = and(_T_618, _T_667) @[Parameters.scala 670:56 chipyard.TestHarness.SmallBoomConfig.fir 392080:8]
    node _T_678 = and(_T_17, _T_668) @[Monitor.scala 131:74 chipyard.TestHarness.SmallBoomConfig.fir 392090:8]
    node _T_680 = or(_T_678, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392092:8]
    node _T_681 = not(_T_680) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392093:8]
    node _T_696 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.SmallBoomConfig.fir 392129:6]
    node _T_782 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.SmallBoomConfig.fir 392237:6]
    node _T_851 = and(_T_352, _T_77) @[Parameters.scala 670:56 chipyard.TestHarness.SmallBoomConfig.fir 392307:8]
    node _T_854 = or(_T_350, _T_851) @[Parameters.scala 672:30 chipyard.TestHarness.SmallBoomConfig.fir 392310:8]
    node _T_855 = and(_T_17, _T_854) @[Monitor.scala 147:68 chipyard.TestHarness.SmallBoomConfig.fir 392311:8]
    node _T_857 = or(_T_855, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392313:8]
    node _T_858 = not(_T_857) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392314:8]
    node _T_877 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.SmallBoomConfig.fir 392360:6]
    node _T_879 = or(_T_877, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392362:6]
    node _T_880 = not(_T_879) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392363:6]
    node _source_ok_T_1 = not(io_in_d_bits_source) @[Parameters.scala 46:9 chipyard.TestHarness.SmallBoomConfig.fir 392368:6]
    node _T_881 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.SmallBoomConfig.fir 392373:6]
    node _T_883 = or(_source_ok_T_1, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392376:8]
    node _T_884 = not(_T_883) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392377:8]
    node _T_885 = geq(io_in_d_bits_size, UInt<4>("h3")) @[Monitor.scala 312:27 chipyard.TestHarness.SmallBoomConfig.fir 392382:8]
    node _T_887 = or(_T_885, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392384:8]
    node _T_888 = not(_T_887) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392385:8]
    node _T_889 = eq(io_in_d_bits_param, UInt<2>("h0")) @[Monitor.scala 313:28 chipyard.TestHarness.SmallBoomConfig.fir 392390:8]
    node _T_891 = or(_T_889, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392392:8]
    node _T_892 = not(_T_891) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392393:8]
    node _T_893 = not(io_in_d_bits_corrupt) @[Monitor.scala 314:15 chipyard.TestHarness.SmallBoomConfig.fir 392398:8]
    node _T_895 = or(_T_893, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392400:8]
    node _T_896 = not(_T_895) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392401:8]
    node _T_897 = not(io_in_d_bits_denied) @[Monitor.scala 315:15 chipyard.TestHarness.SmallBoomConfig.fir 392406:8]
    node _T_899 = or(_T_897, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392408:8]
    node _T_900 = not(_T_899) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392409:8]
    node _T_901 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.SmallBoomConfig.fir 392415:6]
    node _T_912 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 102:26 chipyard.TestHarness.SmallBoomConfig.fir 392439:8]
    node _T_914 = or(_T_912, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392441:8]
    node _T_915 = not(_T_914) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392442:8]
    node _T_916 = neq(io_in_d_bits_param, UInt<2>("h2")) @[Monitor.scala 323:28 chipyard.TestHarness.SmallBoomConfig.fir 392447:8]
    node _T_918 = or(_T_916, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392449:8]
    node _T_919 = not(_T_918) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392450:8]
    node _T_929 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.SmallBoomConfig.fir 392473:6]
    node _T_949 = or(_T_897, io_in_d_bits_corrupt) @[Monitor.scala 334:30 chipyard.TestHarness.SmallBoomConfig.fir 392514:8]
    node _T_951 = or(_T_949, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392516:8]
    node _T_952 = not(_T_951) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392517:8]
    node _T_958 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.SmallBoomConfig.fir 392532:6]
    node _T_975 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.SmallBoomConfig.fir 392567:6]
    node _T_993 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.SmallBoomConfig.fir 392603:6]
    node _a_first_T = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 392669:4]
    node a_first_beats1_decode = shr(is_aligned_mask, 3) @[Edges.scala 219:59 chipyard.TestHarness.SmallBoomConfig.fir 392674:4]
    node _a_first_beats1_opdata_T = bits(io_in_a_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.SmallBoomConfig.fir 392675:4]
    node a_first_beats1_opdata = not(_a_first_beats1_opdata_T) @[Edges.scala 91:28 chipyard.TestHarness.SmallBoomConfig.fir 392676:4]
    node a_first_beats1 = mux(a_first_beats1_opdata, a_first_beats1_decode, UInt<9>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.SmallBoomConfig.fir 392677:4]
    reg a_first_counter : UInt<9>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392678:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 392679:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 392680:4]
    node a_first = eq(a_first_counter, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 392681:4]
    node _a_first_counter_T = mux(a_first, a_first_beats1, a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 392689:6]
    node _GEN_0 = mux(_a_first_T, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 392688:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 392690:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392678:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.SmallBoomConfig.fir 392692:4]
    reg size : UInt<4>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.SmallBoomConfig.fir 392694:4]
    reg address : UInt<32>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.SmallBoomConfig.fir 392696:4]
    node _T_1022 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.SmallBoomConfig.fir 392697:4]
    node _T_1023 = and(io_in_a_valid, _T_1022) @[Monitor.scala 389:19 chipyard.TestHarness.SmallBoomConfig.fir 392698:4]
    node _T_1024 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.SmallBoomConfig.fir 392700:6]
    node _T_1026 = or(_T_1024, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392702:6]
    node _T_1027 = not(_T_1026) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392703:6]
    node _T_1032 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.SmallBoomConfig.fir 392716:6]
    node _T_1034 = or(_T_1032, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392718:6]
    node _T_1035 = not(_T_1034) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392719:6]
    node _T_1040 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.SmallBoomConfig.fir 392732:6]
    node _T_1042 = or(_T_1040, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392734:6]
    node _T_1043 = not(_T_1042) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392735:6]
    node _T_1045 = and(_a_first_T, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.SmallBoomConfig.fir 392742:4]
    node _d_first_T = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 392750:4]
    node _d_first_beats1_decode_T_1 = dshlw(UInt<27>("hfff"), io_in_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.SmallBoomConfig.fir 392752:4]
    node _d_first_beats1_decode_T_2 = bits(_d_first_beats1_decode_T_1, 11, 0) @[package.scala 234:82 chipyard.TestHarness.SmallBoomConfig.fir 392753:4]
    node _d_first_beats1_decode_T_3 = not(_d_first_beats1_decode_T_2) @[package.scala 234:46 chipyard.TestHarness.SmallBoomConfig.fir 392754:4]
    node d_first_beats1_decode = shr(_d_first_beats1_decode_T_3, 3) @[Edges.scala 219:59 chipyard.TestHarness.SmallBoomConfig.fir 392755:4]
    node d_first_beats1_opdata = bits(io_in_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.SmallBoomConfig.fir 392756:4]
    node d_first_beats1 = mux(d_first_beats1_opdata, d_first_beats1_decode, UInt<9>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.SmallBoomConfig.fir 392757:4]
    reg d_first_counter : UInt<9>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392758:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 392759:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 392760:4]
    node d_first = eq(d_first_counter, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 392761:4]
    node _d_first_counter_T = mux(d_first, d_first_beats1, d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 392769:6]
    node _GEN_6 = mux(_d_first_T, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 392768:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 392770:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392758:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.SmallBoomConfig.fir 392772:4]
    reg param_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), param_1) @[Monitor.scala 536:22 chipyard.TestHarness.SmallBoomConfig.fir 392773:4]
    reg size_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.SmallBoomConfig.fir 392774:4]
    reg source_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.SmallBoomConfig.fir 392775:4]
    reg sink : UInt<3>, clock with :
      reset => (UInt<1>("h0"), sink) @[Monitor.scala 539:22 chipyard.TestHarness.SmallBoomConfig.fir 392776:4]
    reg denied : UInt<1>, clock with :
      reset => (UInt<1>("h0"), denied) @[Monitor.scala 540:22 chipyard.TestHarness.SmallBoomConfig.fir 392777:4]
    node _T_1046 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.SmallBoomConfig.fir 392778:4]
    node _T_1047 = and(io_in_d_valid, _T_1046) @[Monitor.scala 541:19 chipyard.TestHarness.SmallBoomConfig.fir 392779:4]
    node _T_1048 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.SmallBoomConfig.fir 392781:6]
    node _T_1050 = or(_T_1048, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392783:6]
    node _T_1051 = not(_T_1050) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392784:6]
    node _T_1052 = eq(io_in_d_bits_param, param_1) @[Monitor.scala 543:29 chipyard.TestHarness.SmallBoomConfig.fir 392789:6]
    node _T_1054 = or(_T_1052, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392791:6]
    node _T_1055 = not(_T_1054) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392792:6]
    node _T_1056 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.SmallBoomConfig.fir 392797:6]
    node _T_1058 = or(_T_1056, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392799:6]
    node _T_1059 = not(_T_1058) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392800:6]
    node _T_1060 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.SmallBoomConfig.fir 392805:6]
    node _T_1062 = or(_T_1060, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392807:6]
    node _T_1063 = not(_T_1062) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392808:6]
    node _T_1064 = eq(io_in_d_bits_sink, sink) @[Monitor.scala 546:29 chipyard.TestHarness.SmallBoomConfig.fir 392813:6]
    node _T_1066 = or(_T_1064, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392815:6]
    node _T_1067 = not(_T_1066) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392816:6]
    node _T_1068 = eq(io_in_d_bits_denied, denied) @[Monitor.scala 547:29 chipyard.TestHarness.SmallBoomConfig.fir 392821:6]
    node _T_1070 = or(_T_1068, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392823:6]
    node _T_1071 = not(_T_1070) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392824:6]
    node _T_1073 = and(_d_first_T, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.SmallBoomConfig.fir 392831:4]
    reg inflight : UInt<1>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 392840:4]
    reg inflight_opcodes : UInt<4>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 392841:4]
    reg inflight_sizes : UInt<8>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 392842:4]
    reg a_first_counter_1 : UInt<9>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392852:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 392853:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 392854:4]
    node a_first_1 = eq(a_first_counter_1, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 392855:4]
    node _a_first_counter_T_1 = mux(a_first_1, a_first_beats1, a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 392863:6]
    node _GEN_13 = mux(_a_first_T, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 392862:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 392864:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392852:4]
    reg d_first_counter_1 : UInt<9>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392874:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 392875:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 392876:4]
    node d_first_1 = eq(d_first_counter_1, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 392877:4]
    node _d_first_counter_T_1 = mux(d_first_1, d_first_beats1, d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 392885:6]
    node _GEN_14 = mux(_d_first_T, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 392884:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 392886:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392874:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.SmallBoomConfig.fir 392898:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 4) @[Monitor.scala 634:69 chipyard.TestHarness.SmallBoomConfig.fir 392898:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.SmallBoomConfig.fir 392899:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 392902:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 392903:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_1, 16) @[Monitor.scala 634:97 chipyard.TestHarness.SmallBoomConfig.fir 392904:4]
    node _a_opcode_lookup_T_6 = and(_GEN_73, _a_opcode_lookup_T_5) @[Monitor.scala 634:97 chipyard.TestHarness.SmallBoomConfig.fir 392904:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.SmallBoomConfig.fir 392905:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 16) @[Monitor.scala 634:152 chipyard.TestHarness.SmallBoomConfig.fir 392905:4]
    node _a_size_lookup_T = shl(io_in_d_bits_source, 3) @[Monitor.scala 638:65 chipyard.TestHarness.SmallBoomConfig.fir 392909:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_size_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.SmallBoomConfig.fir 392910:4]
    node _a_size_lookup_T_4 = sub(UInt<16>("h100"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 392913:4]
    node _a_size_lookup_T_5 = tail(_a_size_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.SmallBoomConfig.fir 392914:4]
    node _GEN_75 = pad(_a_size_lookup_T_1, 16) @[Monitor.scala 638:91 chipyard.TestHarness.SmallBoomConfig.fir 392915:4]
    node _a_size_lookup_T_6 = and(_GEN_75, _a_size_lookup_T_5) @[Monitor.scala 638:91 chipyard.TestHarness.SmallBoomConfig.fir 392915:4]
    node _GEN_76 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.SmallBoomConfig.fir 392916:4]
    node _a_size_lookup_T_7 = pad(_GEN_76, 16) @[Monitor.scala 638:144 chipyard.TestHarness.SmallBoomConfig.fir 392916:4]
    node _T_1074 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.SmallBoomConfig.fir 392940:4]
    node _GEN_15 = mux(_T_1074, UInt<2>("h1"), UInt<2>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.SmallBoomConfig.fir 392942:4 Monitor.scala 649:22 chipyard.TestHarness.SmallBoomConfig.fir 392944:6 chipyard.TestHarness.SmallBoomConfig.fir 392891:4]
    node _T_1077 = and(_a_first_T, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.SmallBoomConfig.fir 392947:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.SmallBoomConfig.fir 392952:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.SmallBoomConfig.fir 392953:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.SmallBoomConfig.fir 392955:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<5>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.SmallBoomConfig.fir 392956:6]
    node a_opcodes_set_interm = mux(_T_1077, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 392949:4 Monitor.scala 654:28 chipyard.TestHarness.SmallBoomConfig.fir 392954:6 chipyard.TestHarness.SmallBoomConfig.fir 392937:4]
    node _a_opcodes_set_T_1 = pad(a_opcodes_set_interm, 19) @[Monitor.scala 656:54 chipyard.TestHarness.SmallBoomConfig.fir 392959:6]
    node a_sizes_set_interm = mux(_T_1077, _a_sizes_set_interm_T_1, UInt<5>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 392949:4 Monitor.scala 655:28 chipyard.TestHarness.SmallBoomConfig.fir 392957:6 chipyard.TestHarness.SmallBoomConfig.fir 392939:4]
    node _a_sizes_set_T_1 = pad(a_sizes_set_interm, 20) @[Monitor.scala 657:52 chipyard.TestHarness.SmallBoomConfig.fir 392962:6]
    node _T_1081 = not(inflight) @[Monitor.scala 658:17 chipyard.TestHarness.SmallBoomConfig.fir 392966:6]
    node _T_1083 = or(_T_1081, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392968:6]
    node _T_1084 = not(_T_1083) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392969:6]
    node _GEN_16 = mux(_T_1077, UInt<2>("h1"), UInt<2>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 392949:4 Monitor.scala 653:28 chipyard.TestHarness.SmallBoomConfig.fir 392951:6 chipyard.TestHarness.SmallBoomConfig.fir 392889:4]
    node _GEN_19 = mux(_T_1077, _a_opcodes_set_T_1, UInt<19>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 392949:4 Monitor.scala 656:28 chipyard.TestHarness.SmallBoomConfig.fir 392960:6 chipyard.TestHarness.SmallBoomConfig.fir 392893:4]
    node _GEN_20 = mux(_T_1077, _a_sizes_set_T_1, UInt<20>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.SmallBoomConfig.fir 392949:4 Monitor.scala 657:28 chipyard.TestHarness.SmallBoomConfig.fir 392963:6 chipyard.TestHarness.SmallBoomConfig.fir 392895:4]
    node _T_1085 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.SmallBoomConfig.fir 392984:4]
    node _T_1087 = not(_T_881) @[Monitor.scala 671:74 chipyard.TestHarness.SmallBoomConfig.fir 392986:4]
    node _T_1088 = and(_T_1085, _T_1087) @[Monitor.scala 671:71 chipyard.TestHarness.SmallBoomConfig.fir 392987:4]
    node _d_clr_wo_ready_T = dshlw(UInt<2>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.SmallBoomConfig.fir 392989:6]
    node _GEN_21 = mux(_T_1088, _d_clr_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.SmallBoomConfig.fir 392988:4 Monitor.scala 672:22 chipyard.TestHarness.SmallBoomConfig.fir 392990:6 chipyard.TestHarness.SmallBoomConfig.fir 392978:4]
    node _T_1090 = and(_d_first_T, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.SmallBoomConfig.fir 392993:4]
    node _T_1093 = and(_T_1090, _T_1087) @[Monitor.scala 675:72 chipyard.TestHarness.SmallBoomConfig.fir 392996:4]
    node _GEN_78 = pad(_a_opcode_lookup_T_5, 31) @[Monitor.scala 677:76 chipyard.TestHarness.SmallBoomConfig.fir 393005:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_78, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.SmallBoomConfig.fir 393005:6]
    node _GEN_79 = pad(_a_size_lookup_T_5, 31) @[Monitor.scala 678:74 chipyard.TestHarness.SmallBoomConfig.fir 393012:6]
    node _d_sizes_clr_T_5 = dshlw(_GEN_79, _a_size_lookup_T) @[Monitor.scala 678:74 chipyard.TestHarness.SmallBoomConfig.fir 393012:6]
    node _GEN_22 = mux(_T_1093, _d_clr_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.SmallBoomConfig.fir 392997:4 Monitor.scala 676:21 chipyard.TestHarness.SmallBoomConfig.fir 392999:6 chipyard.TestHarness.SmallBoomConfig.fir 392976:4]
    node _GEN_23 = mux(_T_1093, _d_opcodes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.SmallBoomConfig.fir 392997:4 Monitor.scala 677:21 chipyard.TestHarness.SmallBoomConfig.fir 393006:6 chipyard.TestHarness.SmallBoomConfig.fir 392980:4]
    node _GEN_24 = mux(_T_1093, _d_sizes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.SmallBoomConfig.fir 392997:4 Monitor.scala 678:21 chipyard.TestHarness.SmallBoomConfig.fir 393013:6 chipyard.TestHarness.SmallBoomConfig.fir 392982:4]
    node same_cycle_resp = and(_T_1074, _source_ok_T_1) @[Monitor.scala 681:88 chipyard.TestHarness.SmallBoomConfig.fir 393023:6]
    node _T_1098 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.SmallBoomConfig.fir 393024:6]
    node _T_1100 = or(_T_1098, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.SmallBoomConfig.fir 393026:6]
    node _T_1102 = or(_T_1100, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393028:6]
    node _T_1103 = not(_T_1102) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393029:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 393035:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 393035:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 393035:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 393035:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 393035:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 393035:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 393035:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 393035:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 393035:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 393035:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 393035:8 Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 393035:8]
    node _T_1104 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.SmallBoomConfig.fir 393035:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 393036:8 Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 393036:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 393036:8 Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 393036:8]
    node _T_1105 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.SmallBoomConfig.fir 393036:8]
    node _T_1106 = or(_T_1104, _T_1105) @[Monitor.scala 685:77 chipyard.TestHarness.SmallBoomConfig.fir 393037:8]
    node _T_1108 = or(_T_1106, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393039:8]
    node _T_1109 = not(_T_1108) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393040:8]
    node _T_1110 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.SmallBoomConfig.fir 393045:8]
    node _T_1112 = or(_T_1110, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393047:8]
    node _T_1113 = not(_T_1112) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393048:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 392896:4 Monitor.scala 634:21 chipyard.TestHarness.SmallBoomConfig.fir 392906:4]
    node _T_1114 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 393055:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_1114), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 393056:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 393056:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_1114), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 393056:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 393056:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_1114), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 393056:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 393056:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_1114), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 393056:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 393056:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_1114), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 393056:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 393056:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_1114), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 393056:8 Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 393056:8]
    node _T_1115 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.SmallBoomConfig.fir 393056:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_1114), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 393058:8 Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 393058:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_1114), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 393058:8 Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 393058:8]
    node _T_1117 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.SmallBoomConfig.fir 393058:8]
    node _T_1118 = or(_T_1115, _T_1117) @[Monitor.scala 689:72 chipyard.TestHarness.SmallBoomConfig.fir 393059:8]
    node _T_1120 = or(_T_1118, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393061:8]
    node _T_1121 = not(_T_1120) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393062:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 7, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 392907:4 Monitor.scala 638:19 chipyard.TestHarness.SmallBoomConfig.fir 392917:4]
    node _GEN_80 = pad(io_in_d_bits_size, 8) @[Monitor.scala 691:36 chipyard.TestHarness.SmallBoomConfig.fir 393067:8]
    node _T_1122 = eq(_GEN_80, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.SmallBoomConfig.fir 393067:8]
    node _T_1124 = or(_T_1122, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393069:8]
    node _T_1125 = not(_T_1124) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393070:8]
    node _T_1127 = and(_T_1085, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.SmallBoomConfig.fir 393078:4]
    node _T_1128 = and(_T_1127, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.SmallBoomConfig.fir 393079:4]
    node _T_1130 = and(_T_1128, _source_ok_T_1) @[Monitor.scala 694:65 chipyard.TestHarness.SmallBoomConfig.fir 393081:4]
    node _T_1132 = and(_T_1130, _T_1087) @[Monitor.scala 694:116 chipyard.TestHarness.SmallBoomConfig.fir 393083:4]
    node _T_1133 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.SmallBoomConfig.fir 393085:6]
    node _T_1134 = or(_T_1133, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.SmallBoomConfig.fir 393086:6]
    node _T_1136 = or(_T_1134, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393088:6]
    node _T_1137 = not(_T_1136) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393089:6]
    node a_set_wo_ready = bits(_GEN_15, 0, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 392890:4]
    node d_clr_wo_ready = bits(_GEN_21, 0, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 392977:4]
    node _T_1138 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.SmallBoomConfig.fir 393095:4]
    node _T_1139 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.SmallBoomConfig.fir 393096:4]
    node _T_1140 = not(_T_1139) @[Monitor.scala 699:51 chipyard.TestHarness.SmallBoomConfig.fir 393097:4]
    node _T_1141 = or(_T_1138, _T_1140) @[Monitor.scala 699:48 chipyard.TestHarness.SmallBoomConfig.fir 393098:4]
    node _T_1143 = or(_T_1141, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393100:4]
    node _T_1144 = not(_T_1143) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393101:4]
    node a_set = bits(_GEN_16, 0, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 392888:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.SmallBoomConfig.fir 393106:4]
    node d_clr = bits(_GEN_22, 0, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 392975:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.SmallBoomConfig.fir 393107:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.SmallBoomConfig.fir 393108:4]
    node a_opcodes_set = bits(_GEN_19, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 392892:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.SmallBoomConfig.fir 393110:4]
    node d_opcodes_clr = bits(_GEN_23, 3, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 392979:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.SmallBoomConfig.fir 393111:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.SmallBoomConfig.fir 393112:4]
    node a_sizes_set = bits(_GEN_20, 7, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 392894:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.SmallBoomConfig.fir 393114:4]
    node d_sizes_clr = bits(_GEN_24, 7, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 392981:4]
    node _inflight_sizes_T_1 = not(d_sizes_clr) @[Monitor.scala 704:56 chipyard.TestHarness.SmallBoomConfig.fir 393115:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_sizes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.SmallBoomConfig.fir 393116:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 393118:4]
    node _T_1145 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.SmallBoomConfig.fir 393121:4]
    node _T_1146 = not(_T_1145) @[Monitor.scala 709:16 chipyard.TestHarness.SmallBoomConfig.fir 393122:4]
    node _T_1147 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.SmallBoomConfig.fir 393123:4]
    node _T_1148 = or(_T_1146, _T_1147) @[Monitor.scala 709:30 chipyard.TestHarness.SmallBoomConfig.fir 393124:4]
    node _T_1149 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.SmallBoomConfig.fir 393125:4]
    node _T_1150 = or(_T_1148, _T_1149) @[Monitor.scala 709:47 chipyard.TestHarness.SmallBoomConfig.fir 393126:4]
    node _T_1152 = or(_T_1150, reset) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 393128:4]
    node _T_1153 = not(_T_1152) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 393129:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.SmallBoomConfig.fir 393134:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.SmallBoomConfig.fir 393135:4]
    node _T_1156 = or(_a_first_T, _d_first_T) @[Monitor.scala 712:27 chipyard.TestHarness.SmallBoomConfig.fir 393139:4]
    node _GEN_57 = mux(_T_1156, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.SmallBoomConfig.fir 393140:4 Monitor.scala 712:58 chipyard.TestHarness.SmallBoomConfig.fir 393141:6 Monitor.scala 711:14 chipyard.TestHarness.SmallBoomConfig.fir 393136:4]
    reg inflight_sizes_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 393145:4]
    reg d_first_counter_2 : UInt<9>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 393180:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 393181:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.SmallBoomConfig.fir 393182:4]
    node d_first_2 = eq(d_first_counter_2, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.SmallBoomConfig.fir 393183:4]
    node _d_first_counter_T_2 = mux(d_first_2, d_first_beats1, d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.SmallBoomConfig.fir 393191:6]
    node _GEN_59 = mux(_d_first_T, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.SmallBoomConfig.fir 393190:4 Edges.scala 235:15 chipyard.TestHarness.SmallBoomConfig.fir 393192:6 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 393180:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_size_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.SmallBoomConfig.fir 393216:4]
    node _GEN_84 = pad(_c_size_lookup_T_1, 16) @[Monitor.scala 747:93 chipyard.TestHarness.SmallBoomConfig.fir 393221:4]
    node _c_size_lookup_T_6 = and(_GEN_84, _a_size_lookup_T_5) @[Monitor.scala 747:93 chipyard.TestHarness.SmallBoomConfig.fir 393221:4]
    node _GEN_85 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.SmallBoomConfig.fir 393222:4]
    node _c_size_lookup_T_7 = pad(_GEN_85, 16) @[Monitor.scala 747:146 chipyard.TestHarness.SmallBoomConfig.fir 393222:4]
    node _T_1174 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.SmallBoomConfig.fir 393300:4]
    node _T_1176 = and(_T_1174, _T_881) @[Monitor.scala 779:71 chipyard.TestHarness.SmallBoomConfig.fir 393302:4]
    node _T_1178 = and(_d_first_T, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.SmallBoomConfig.fir 393308:4]
    node _T_1180 = and(_T_1178, _T_881) @[Monitor.scala 783:72 chipyard.TestHarness.SmallBoomConfig.fir 393310:4]
    node _GEN_69 = mux(_T_1180, _d_sizes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.SmallBoomConfig.fir 393311:4 Monitor.scala 786:21 chipyard.TestHarness.SmallBoomConfig.fir 393327:6 chipyard.TestHarness.SmallBoomConfig.fir 393298:4]
    node _T_1184 = dshr(UInt<1>("h0"), io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.SmallBoomConfig.fir 393346:6]
    node _T_1188 = or(_T_1184, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393350:6]
    node _T_1189 = not(_T_1188) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393351:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 7, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 393204:4 Monitor.scala 747:21 chipyard.TestHarness.SmallBoomConfig.fir 393223:4]
    node _T_1194 = eq(_GEN_80, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.SmallBoomConfig.fir 393369:8]
    node _T_1196 = or(_T_1194, reset) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393371:8]
    node _T_1197 = not(_T_1196) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393372:8]
    node d_sizes_clr_1 = bits(_GEN_69, 7, 0) @[chipyard.TestHarness.SmallBoomConfig.fir 393297:4]
    node _inflight_sizes_T_4 = not(d_sizes_clr_1) @[Monitor.scala 811:58 chipyard.TestHarness.SmallBoomConfig.fir 393422:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_sizes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.SmallBoomConfig.fir 393423:4]
    a_first_counter <= mux(reset, UInt<9>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392678:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392678:4]
    opcode <= mux(_T_1045, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 392743:4 Monitor.scala 397:15 chipyard.TestHarness.SmallBoomConfig.fir 392744:6 Monitor.scala 384:22 chipyard.TestHarness.SmallBoomConfig.fir 392692:4]
    size <= mux(_T_1045, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 392743:4 Monitor.scala 399:15 chipyard.TestHarness.SmallBoomConfig.fir 392746:6 Monitor.scala 386:22 chipyard.TestHarness.SmallBoomConfig.fir 392694:4]
    address <= mux(_T_1045, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.SmallBoomConfig.fir 392743:4 Monitor.scala 401:15 chipyard.TestHarness.SmallBoomConfig.fir 392748:6 Monitor.scala 388:22 chipyard.TestHarness.SmallBoomConfig.fir 392696:4]
    d_first_counter <= mux(reset, UInt<9>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392758:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392758:4]
    opcode_1 <= mux(_T_1073, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 392832:4 Monitor.scala 550:15 chipyard.TestHarness.SmallBoomConfig.fir 392833:6 Monitor.scala 535:22 chipyard.TestHarness.SmallBoomConfig.fir 392772:4]
    param_1 <= mux(_T_1073, io_in_d_bits_param, param_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 392832:4 Monitor.scala 551:15 chipyard.TestHarness.SmallBoomConfig.fir 392834:6 Monitor.scala 536:22 chipyard.TestHarness.SmallBoomConfig.fir 392773:4]
    size_1 <= mux(_T_1073, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 392832:4 Monitor.scala 552:15 chipyard.TestHarness.SmallBoomConfig.fir 392835:6 Monitor.scala 537:22 chipyard.TestHarness.SmallBoomConfig.fir 392774:4]
    source_1 <= mux(_T_1073, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 392832:4 Monitor.scala 553:15 chipyard.TestHarness.SmallBoomConfig.fir 392836:6 Monitor.scala 538:22 chipyard.TestHarness.SmallBoomConfig.fir 392775:4]
    sink <= mux(_T_1073, io_in_d_bits_sink, sink) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 392832:4 Monitor.scala 554:15 chipyard.TestHarness.SmallBoomConfig.fir 392837:6 Monitor.scala 539:22 chipyard.TestHarness.SmallBoomConfig.fir 392776:4]
    denied <= mux(_T_1073, io_in_d_bits_denied, denied) @[Monitor.scala 549:32 chipyard.TestHarness.SmallBoomConfig.fir 392832:4 Monitor.scala 555:15 chipyard.TestHarness.SmallBoomConfig.fir 392838:6 Monitor.scala 540:22 chipyard.TestHarness.SmallBoomConfig.fir 392777:4]
    inflight <= mux(reset, UInt<1>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 392840:4 Monitor.scala 611:27 chipyard.TestHarness.SmallBoomConfig.fir 392840:4 Monitor.scala 702:14 chipyard.TestHarness.SmallBoomConfig.fir 393109:4]
    inflight_opcodes <= mux(reset, UInt<4>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 392841:4 Monitor.scala 613:35 chipyard.TestHarness.SmallBoomConfig.fir 392841:4 Monitor.scala 703:22 chipyard.TestHarness.SmallBoomConfig.fir 393113:4]
    inflight_sizes <= mux(reset, UInt<8>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 392842:4 Monitor.scala 615:33 chipyard.TestHarness.SmallBoomConfig.fir 392842:4 Monitor.scala 704:20 chipyard.TestHarness.SmallBoomConfig.fir 393117:4]
    a_first_counter_1 <= mux(reset, UInt<9>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392852:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392852:4]
    d_first_counter_1 <= mux(reset, UInt<9>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392874:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 392874:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 393118:4 Monitor.scala 706:27 chipyard.TestHarness.SmallBoomConfig.fir 393118:4]
    inflight_sizes_1 <= mux(reset, UInt<8>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 393145:4 Monitor.scala 725:35 chipyard.TestHarness.SmallBoomConfig.fir 393145:4 Monitor.scala 811:22 chipyard.TestHarness.SmallBoomConfig.fir 393424:4]
    d_first_counter_2 <= mux(reset, UInt<9>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 393180:4 Edges.scala 228:27 chipyard.TestHarness.SmallBoomConfig.fir 393180:4]
    node _GEN_90 = and(io_in_a_valid, _T_15) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391352:10]
    printf(clock, and(_GEN_90, _T_84), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391352:10]
    stop(clock, and(_GEN_90, _T_84), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391353:10]
    printf(clock, and(_GEN_90, _T_147), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391419:10]
    stop(clock, and(_GEN_90, _T_147), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391420:10]
    printf(clock, and(_GEN_90, _T_154), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391434:10]
    stop(clock, and(_GEN_90, _T_154), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391435:10]
    printf(clock, and(_GEN_90, _T_157), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391441:10]
    stop(clock, and(_GEN_90, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391442:10]
    printf(clock, and(_GEN_90, _T_166), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391458:10]
    stop(clock, and(_GEN_90, _T_166), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391459:10]
    node _GEN_100 = and(io_in_a_valid, _T_171) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391542:10]
    printf(clock, and(_GEN_100, _T_84), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391542:10]
    stop(clock, and(_GEN_100, _T_84), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391543:10]
    printf(clock, and(_GEN_100, _T_147), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391609:10]
    stop(clock, and(_GEN_100, _T_147), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391610:10]
    printf(clock, and(_GEN_100, _T_154), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391624:10]
    stop(clock, and(_GEN_100, _T_154), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391625:10]
    printf(clock, and(_GEN_100, _T_157), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391631:10]
    stop(clock, and(_GEN_100, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391632:10]
    printf(clock, and(_GEN_100, _T_147), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391647:10]
    stop(clock, and(_GEN_100, _T_147), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391648:10]
    printf(clock, and(_GEN_100, _T_166), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391656:10]
    stop(clock, and(_GEN_100, _T_166), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391657:10]
    node _GEN_112 = and(io_in_a_valid, _T_331) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391680:10]
    printf(clock, and(_GEN_112, _T_340), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391680:10]
    stop(clock, and(_GEN_112, _T_340), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391681:10]
    printf(clock, and(_GEN_112, _T_407), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391751:10]
    stop(clock, and(_GEN_112, _T_407), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391752:10]
    printf(clock, and(_GEN_112, _T_157), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391765:10]
    stop(clock, and(_GEN_112, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391766:10]
    printf(clock, and(_GEN_112, _T_421), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391781:10]
    stop(clock, and(_GEN_112, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391782:10]
    node _GEN_120 = and(io_in_a_valid, _T_426) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391872:10]
    printf(clock, and(_GEN_120, _T_502), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391872:10]
    stop(clock, and(_GEN_120, _T_502), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391873:10]
    printf(clock, and(_GEN_120, _T_157), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391886:10]
    stop(clock, and(_GEN_120, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391887:10]
    printf(clock, and(_GEN_120, _T_421), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391902:10]
    stop(clock, and(_GEN_120, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391903:10]
    node _GEN_126 = and(io_in_a_valid, _T_517) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391985:10]
    printf(clock, and(_GEN_126, _T_502), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391985:10]
    stop(clock, and(_GEN_126, _T_502), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391986:10]
    printf(clock, and(_GEN_126, _T_157), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 391999:10]
    stop(clock, and(_GEN_126, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392000:10]
    printf(clock, and(_GEN_126, _T_609), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392017:10]
    stop(clock, and(_GEN_126, _T_609), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392018:10]
    node _GEN_132 = and(io_in_a_valid, _T_610) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392095:10]
    printf(clock, and(_GEN_132, _T_681), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392095:10]
    stop(clock, and(_GEN_132, _T_681), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392096:10]
    printf(clock, and(_GEN_132, _T_157), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392109:10]
    stop(clock, and(_GEN_132, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392110:10]
    printf(clock, and(_GEN_132, _T_421), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392125:10]
    stop(clock, and(_GEN_132, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392126:10]
    node _GEN_138 = and(io_in_a_valid, _T_696) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392203:10]
    printf(clock, and(_GEN_138, _T_681), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392203:10]
    stop(clock, and(_GEN_138, _T_681), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392204:10]
    printf(clock, and(_GEN_138, _T_157), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392217:10]
    stop(clock, and(_GEN_138, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392218:10]
    printf(clock, and(_GEN_138, _T_421), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392233:10]
    stop(clock, and(_GEN_138, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392234:10]
    node _GEN_144 = and(io_in_a_valid, _T_782) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392316:10]
    printf(clock, and(_GEN_144, _T_858), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392316:10]
    stop(clock, and(_GEN_144, _T_858), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392317:10]
    printf(clock, and(_GEN_144, _T_157), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392330:10]
    stop(clock, and(_GEN_144, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392331:10]
    printf(clock, and(_GEN_144, _T_421), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392346:10]
    stop(clock, and(_GEN_144, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392347:10]
    printf(clock, and(io_in_d_valid, _T_880), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392365:8]
    stop(clock, and(io_in_d_valid, _T_880), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392366:8]
    node _GEN_150 = and(io_in_d_valid, _T_881) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392379:10]
    printf(clock, and(_GEN_150, _T_884), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392379:10]
    stop(clock, and(_GEN_150, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392380:10]
    printf(clock, and(_GEN_150, _T_888), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392387:10]
    stop(clock, and(_GEN_150, _T_888), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392388:10]
    printf(clock, and(_GEN_150, _T_892), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392395:10]
    stop(clock, and(_GEN_150, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392396:10]
    printf(clock, and(_GEN_150, _T_896), "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392403:10]
    stop(clock, and(_GEN_150, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392404:10]
    printf(clock, and(_GEN_150, _T_900), "Assertion failed: 'D' channel ReleaseAck is denied (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392411:10]
    stop(clock, and(_GEN_150, _T_900), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392412:10]
    node _GEN_160 = and(io_in_d_valid, _T_901) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392421:10]
    printf(clock, and(_GEN_160, _T_884), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392421:10]
    stop(clock, and(_GEN_160, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392422:10]
    printf(clock, and(_GEN_160, _T_888), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392436:10]
    stop(clock, and(_GEN_160, _T_888), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392437:10]
    printf(clock, and(_GEN_160, _T_915), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392444:10]
    stop(clock, and(_GEN_160, _T_915), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392445:10]
    printf(clock, and(_GEN_160, _T_919), "Assertion failed: 'D' channel Grant carries toN param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392452:10]
    stop(clock, and(_GEN_160, _T_919), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392453:10]
    printf(clock, and(_GEN_160, _T_896), "Assertion failed: 'D' channel Grant is corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392460:10]
    stop(clock, and(_GEN_160, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392461:10]
    node _GEN_170 = and(io_in_d_valid, _T_929) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392479:10]
    printf(clock, and(_GEN_170, _T_884), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392479:10]
    stop(clock, and(_GEN_170, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392480:10]
    printf(clock, and(_GEN_170, _T_888), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392494:10]
    stop(clock, and(_GEN_170, _T_888), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392495:10]
    printf(clock, and(_GEN_170, _T_915), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392502:10]
    stop(clock, and(_GEN_170, _T_915), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392503:10]
    printf(clock, and(_GEN_170, _T_919), "Assertion failed: 'D' channel GrantData carries toN param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392510:10]
    stop(clock, and(_GEN_170, _T_919), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392511:10]
    printf(clock, and(_GEN_170, _T_952), "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392519:10]
    stop(clock, and(_GEN_170, _T_952), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392520:10]
    node _GEN_180 = and(io_in_d_valid, _T_958) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392538:10]
    printf(clock, and(_GEN_180, _T_884), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392538:10]
    stop(clock, and(_GEN_180, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392539:10]
    printf(clock, and(_GEN_180, _T_892), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392546:10]
    stop(clock, and(_GEN_180, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392547:10]
    printf(clock, and(_GEN_180, _T_896), "Assertion failed: 'D' channel AccessAck is corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392554:10]
    stop(clock, and(_GEN_180, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392555:10]
    node _GEN_186 = and(io_in_d_valid, _T_975) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392573:10]
    printf(clock, and(_GEN_186, _T_884), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392573:10]
    stop(clock, and(_GEN_186, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392574:10]
    printf(clock, and(_GEN_186, _T_892), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392581:10]
    stop(clock, and(_GEN_186, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392582:10]
    printf(clock, and(_GEN_186, _T_952), "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392590:10]
    stop(clock, and(_GEN_186, _T_952), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392591:10]
    node _GEN_192 = and(io_in_d_valid, _T_993) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392609:10]
    printf(clock, and(_GEN_192, _T_884), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392609:10]
    stop(clock, and(_GEN_192, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392610:10]
    printf(clock, and(_GEN_192, _T_892), "Assertion failed: 'D' channel HintAck carries invalid param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392617:10]
    stop(clock, and(_GEN_192, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392618:10]
    printf(clock, and(_GEN_192, _T_896), "Assertion failed: 'D' channel HintAck is corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392625:10]
    stop(clock, and(_GEN_192, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392626:10]
    printf(clock, and(_T_1023, _T_1027), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392705:8]
    stop(clock, and(_T_1023, _T_1027), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392706:8]
    printf(clock, and(_T_1023, _T_1035), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392721:8]
    stop(clock, and(_T_1023, _T_1035), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392722:8]
    printf(clock, and(_T_1023, _T_1043), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392737:8]
    stop(clock, and(_T_1023, _T_1043), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392738:8]
    printf(clock, and(_T_1047, _T_1051), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392786:8]
    stop(clock, and(_T_1047, _T_1051), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392787:8]
    printf(clock, and(_T_1047, _T_1055), "Assertion failed: 'D' channel param changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392794:8]
    stop(clock, and(_T_1047, _T_1055), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392795:8]
    printf(clock, and(_T_1047, _T_1059), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392802:8]
    stop(clock, and(_T_1047, _T_1059), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392803:8]
    printf(clock, and(_T_1047, _T_1063), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392810:8]
    stop(clock, and(_T_1047, _T_1063), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392811:8]
    printf(clock, and(_T_1047, _T_1067), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392818:8]
    stop(clock, and(_T_1047, _T_1067), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392819:8]
    printf(clock, and(_T_1047, _T_1071), "Assertion failed: 'D' channel denied changed with multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392826:8]
    stop(clock, and(_T_1047, _T_1071), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 392827:8]
    printf(clock, and(_T_1077, _T_1084), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392971:8]
    stop(clock, and(_T_1077, _T_1084), 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 392972:8]
    printf(clock, and(_T_1088, _T_1103), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393031:8]
    stop(clock, and(_T_1088, _T_1103), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393032:8]
    node _GEN_198 = and(_T_1088, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393042:10]
    printf(clock, and(_GEN_198, _T_1109), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393042:10]
    stop(clock, and(_GEN_198, _T_1109), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393043:10]
    printf(clock, and(_GEN_198, _T_1113), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393050:10]
    stop(clock, and(_GEN_198, _T_1113), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393051:10]
    node _GEN_202 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393064:10]
    node _GEN_203 = and(_T_1088, _GEN_202) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393064:10]
    printf(clock, and(_GEN_203, _T_1121), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393064:10]
    stop(clock, and(_GEN_203, _T_1121), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393065:10]
    printf(clock, and(_GEN_203, _T_1125), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393072:10]
    stop(clock, and(_GEN_203, _T_1125), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393073:10]
    printf(clock, and(_T_1132, _T_1137), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393091:8]
    stop(clock, and(_T_1132, _T_1137), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393092:8]
    printf(clock, _T_1144, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 8 (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393103:6]
    stop(clock, _T_1144, 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393104:6]
    printf(clock, _T_1153, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 393131:6]
    stop(clock, _T_1153, 1) @[Monitor.scala 42:11 chipyard.TestHarness.SmallBoomConfig.fir 393132:6]
    printf(clock, and(_T_1176, _T_1189), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393353:8]
    stop(clock, and(_T_1176, _T_1189), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393354:8]
    printf(clock, and(_T_1176, _T_1197), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393374:10]
    stop(clock, and(_T_1176, _T_1197), 1) @[Monitor.scala 49:11 chipyard.TestHarness.SmallBoomConfig.fir 393375:10]

  module TLBuffer_21_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 393581:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 393582:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393583:4]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_in_a_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_in_a_bits_address : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_in_a_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    output auto_in_d_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    output auto_out_a_bits_param : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    output auto_out_a_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    output auto_out_a_bits_source : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    output auto_out_a_bits_address : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    output auto_out_a_bits_mask : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    output auto_out_a_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    output auto_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_out_d_bits_param : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_out_d_bits_size : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_out_d_bits_source : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_out_d_bits_sink : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_out_d_bits_denied : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_out_d_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]
    input auto_out_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393584:4]

    inst monitor of TLMonitor_57_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.SmallBoomConfig.fir 393591:4]
    inst bundleOut_0_a_q of Queue_6_inTestHarness @[Decoupled.scala 296:21 chipyard.TestHarness.SmallBoomConfig.fir 393618:4]
    inst bundleIn_0_d_q of Queue_7_inTestHarness @[Decoupled.scala 296:21 chipyard.TestHarness.SmallBoomConfig.fir 393632:4]
    auto_in_a_ready <= bundleOut_0_a_q.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 Decoupled.scala 299:17 chipyard.TestHarness.SmallBoomConfig.fir 393630:4]
    auto_in_d_valid <= bundleIn_0_d_q.io_deq_valid @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 393645:4]
    auto_in_d_bits_data <= bundleIn_0_d_q.io_deq_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 393645:4]
    auto_out_a_valid <= bundleOut_0_a_q.io_deq_valid @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 393631:4]
    auto_out_a_bits_opcode <= bundleOut_0_a_q.io_deq_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 393631:4]
    auto_out_a_bits_param <= bundleOut_0_a_q.io_deq_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 393631:4]
    auto_out_a_bits_size <= bundleOut_0_a_q.io_deq_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 393631:4]
    auto_out_a_bits_source <= bundleOut_0_a_q.io_deq_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 393631:4]
    auto_out_a_bits_address <= bundleOut_0_a_q.io_deq_bits_address @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 393631:4]
    auto_out_a_bits_mask <= bundleOut_0_a_q.io_deq_bits_mask @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 393631:4]
    auto_out_a_bits_data <= bundleOut_0_a_q.io_deq_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 393631:4]
    auto_out_a_bits_corrupt <= bundleOut_0_a_q.io_deq_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 Buffer.scala 37:13 chipyard.TestHarness.SmallBoomConfig.fir 393631:4]
    auto_out_d_ready <= bundleIn_0_d_q.io_enq_ready @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 Decoupled.scala 299:17 chipyard.TestHarness.SmallBoomConfig.fir 393644:4]
    monitor.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 393592:4]
    monitor.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 393593:4]
    monitor.io_in_a_ready <= bundleOut_0_a_q.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 Decoupled.scala 299:17 chipyard.TestHarness.SmallBoomConfig.fir 393630:4]
    monitor.io_in_a_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 393617:4]
    monitor.io_in_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 393617:4]
    monitor.io_in_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 393617:4]
    monitor.io_in_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 393617:4]
    monitor.io_in_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 393617:4]
    monitor.io_in_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 393617:4]
    monitor.io_in_d_valid <= bundleIn_0_d_q.io_deq_valid @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 393645:4]
    monitor.io_in_d_bits_opcode <= bundleIn_0_d_q.io_deq_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 393645:4]
    monitor.io_in_d_bits_param <= bundleIn_0_d_q.io_deq_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 393645:4]
    monitor.io_in_d_bits_size <= bundleIn_0_d_q.io_deq_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 393645:4]
    monitor.io_in_d_bits_source <= bundleIn_0_d_q.io_deq_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 393645:4]
    monitor.io_in_d_bits_sink <= bundleIn_0_d_q.io_deq_bits_sink @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 393645:4]
    monitor.io_in_d_bits_denied <= bundleIn_0_d_q.io_deq_bits_denied @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 393645:4]
    monitor.io_in_d_bits_corrupt <= bundleIn_0_d_q.io_deq_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 Buffer.scala 38:13 chipyard.TestHarness.SmallBoomConfig.fir 393645:4]
    bundleOut_0_a_q.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 393619:4]
    bundleOut_0_a_q.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 393620:4]
    bundleOut_0_a_q.io_enq_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 393617:4]
    bundleOut_0_a_q.io_enq_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 393617:4]
    bundleOut_0_a_q.io_enq_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 393617:4]
    bundleOut_0_a_q.io_enq_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 393617:4]
    bundleOut_0_a_q.io_enq_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 393617:4]
    bundleOut_0_a_q.io_enq_bits_data <= auto_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 393617:4]
    bundleOut_0_a_q.io_deq_ready <= auto_out_a_ready @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 393616:4]
    bundleIn_0_d_q.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 393633:4]
    bundleIn_0_d_q.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 393634:4]
    bundleIn_0_d_q.io_enq_valid <= auto_out_d_valid @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 393616:4]
    bundleIn_0_d_q.io_enq_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 393616:4]
    bundleIn_0_d_q.io_enq_bits_param <= auto_out_d_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 393616:4]
    bundleIn_0_d_q.io_enq_bits_size <= auto_out_d_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 393616:4]
    bundleIn_0_d_q.io_enq_bits_source <= auto_out_d_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 393616:4]
    bundleIn_0_d_q.io_enq_bits_sink <= auto_out_d_bits_sink @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 393616:4]
    bundleIn_0_d_q.io_enq_bits_denied <= auto_out_d_bits_denied @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 393616:4]
    bundleIn_0_d_q.io_enq_bits_data <= auto_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 393616:4]
    bundleIn_0_d_q.io_enq_bits_corrupt <= auto_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.SmallBoomConfig.fir 393614:4 LazyModule.scala 311:12 chipyard.TestHarness.SmallBoomConfig.fir 393616:4]
    bundleIn_0_d_q.io_deq_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.SmallBoomConfig.fir 393589:4 LazyModule.scala 309:16 chipyard.TestHarness.SmallBoomConfig.fir 393617:4]

  module SerialRAM_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 393665:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 393666:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393667:4]
    input io_ser_in_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393669:4]
    output io_ser_in_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393669:4]
    output io_ser_in_bits : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 393669:4]
    output io_ser_out_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393669:4]
    input io_ser_out_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393669:4]
    input io_ser_out_bits : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 393669:4]
    output io_tsi_ser_in_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393669:4]
    input io_tsi_ser_in_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393669:4]
    input io_tsi_ser_in_bits : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 393669:4]
    input io_tsi_ser_out_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393669:4]
    output io_tsi_ser_out_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393669:4]
    output io_tsi_ser_out_bits : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 393669:4]

    inst adapter of SerialAdapter_inTestHarness @[SerialAdapter.scala 311:27 chipyard.TestHarness.SmallBoomConfig.fir 393675:4]
    inst serdesser of TLSerdesser_1_inTestHarness @[SerialAdapter.scala 312:29 chipyard.TestHarness.SmallBoomConfig.fir 393682:4]
    inst srams of TLRAM_inTestHarness @[SerialAdapter.scala 322:15 chipyard.TestHarness.SmallBoomConfig.fir 393689:4]
    inst xbar of TLXbar_10_inTestHarness @[Xbar.scala 142:26 chipyard.TestHarness.SmallBoomConfig.fir 393695:4]
    inst buffer of TLBuffer_20_inTestHarness @[Buffer.scala 68:28 chipyard.TestHarness.SmallBoomConfig.fir 393701:4]
    inst fragmenter of TLFragmenter_7_inTestHarness @[Fragmenter.scala 333:34 chipyard.TestHarness.SmallBoomConfig.fir 393707:4]
    inst buffer_1 of TLBuffer_21_inTestHarness @[Buffer.scala 68:28 chipyard.TestHarness.SmallBoomConfig.fir 393713:4]
    io_ser_in_valid <= serdesser.io_ser_out_valid @[SerialAdapter.scala 340:15 chipyard.TestHarness.SmallBoomConfig.fir 393729:4]
    io_ser_in_bits <= serdesser.io_ser_out_bits @[SerialAdapter.scala 340:15 chipyard.TestHarness.SmallBoomConfig.fir 393728:4]
    io_ser_out_ready <= serdesser.io_ser_in_ready @[SerialAdapter.scala 339:32 chipyard.TestHarness.SmallBoomConfig.fir 393727:4]
    io_tsi_ser_in_ready <= adapter.io_serial_in_ready @[SerialAdapter.scala 341:16 chipyard.TestHarness.SmallBoomConfig.fir 393736:4]
    io_tsi_ser_out_valid <= adapter.io_serial_out_valid @[SerialAdapter.scala 341:16 chipyard.TestHarness.SmallBoomConfig.fir 393732:4]
    io_tsi_ser_out_bits <= adapter.io_serial_out_bits @[SerialAdapter.scala 341:16 chipyard.TestHarness.SmallBoomConfig.fir 393731:4]
    adapter.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 393680:4]
    adapter.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 393681:4]
    adapter.auto_out_a_ready <= buffer_1.auto_in_a_ready @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393719:4]
    adapter.auto_out_d_valid <= buffer_1.auto_in_d_valid @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393719:4]
    adapter.auto_out_d_bits_data <= buffer_1.auto_in_d_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393719:4]
    adapter.io_serial_in_valid <= io_tsi_ser_in_valid @[SerialAdapter.scala 341:16 chipyard.TestHarness.SmallBoomConfig.fir 393735:4]
    adapter.io_serial_in_bits <= io_tsi_ser_in_bits @[SerialAdapter.scala 341:16 chipyard.TestHarness.SmallBoomConfig.fir 393734:4]
    adapter.io_serial_out_ready <= io_tsi_ser_out_ready @[SerialAdapter.scala 341:16 chipyard.TestHarness.SmallBoomConfig.fir 393733:4]
    serdesser.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 393687:4]
    serdesser.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 393688:4]
    serdesser.auto_manager_in_a_valid <= buffer_1.auto_out_a_valid @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    serdesser.auto_manager_in_a_bits_opcode <= buffer_1.auto_out_a_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    serdesser.auto_manager_in_a_bits_param <= buffer_1.auto_out_a_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    serdesser.auto_manager_in_a_bits_size <= buffer_1.auto_out_a_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    serdesser.auto_manager_in_a_bits_source <= buffer_1.auto_out_a_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    serdesser.auto_manager_in_a_bits_address <= buffer_1.auto_out_a_bits_address @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    serdesser.auto_manager_in_a_bits_mask <= buffer_1.auto_out_a_bits_mask @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    serdesser.auto_manager_in_a_bits_data <= buffer_1.auto_out_a_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    serdesser.auto_manager_in_a_bits_corrupt <= buffer_1.auto_out_a_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    serdesser.auto_manager_in_d_ready <= buffer_1.auto_out_d_ready @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    serdesser.auto_client_out_a_ready <= xbar.auto_in_a_ready @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    serdesser.auto_client_out_d_valid <= xbar.auto_in_d_valid @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    serdesser.auto_client_out_d_bits_opcode <= xbar.auto_in_d_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    serdesser.auto_client_out_d_bits_param <= xbar.auto_in_d_bits_param @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    serdesser.auto_client_out_d_bits_size <= xbar.auto_in_d_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    serdesser.auto_client_out_d_bits_source <= xbar.auto_in_d_bits_source @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    serdesser.auto_client_out_d_bits_sink <= xbar.auto_in_d_bits_sink @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    serdesser.auto_client_out_d_bits_denied <= xbar.auto_in_d_bits_denied @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    serdesser.auto_client_out_d_bits_data <= xbar.auto_in_d_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    serdesser.auto_client_out_d_bits_corrupt <= xbar.auto_in_d_bits_corrupt @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    serdesser.io_ser_in_valid <= io_ser_out_valid @[SerialAdapter.scala 339:32 chipyard.TestHarness.SmallBoomConfig.fir 393726:4]
    serdesser.io_ser_in_bits <= io_ser_out_bits @[SerialAdapter.scala 339:32 chipyard.TestHarness.SmallBoomConfig.fir 393725:4]
    serdesser.io_ser_out_ready <= io_ser_in_ready @[SerialAdapter.scala 340:15 chipyard.TestHarness.SmallBoomConfig.fir 393730:4]
    srams.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 393693:4]
    srams.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 393694:4]
    srams.auto_in_a_valid <= buffer.auto_out_a_valid @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    srams.auto_in_a_bits_opcode <= buffer.auto_out_a_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    srams.auto_in_a_bits_param <= buffer.auto_out_a_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    srams.auto_in_a_bits_size <= buffer.auto_out_a_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    srams.auto_in_a_bits_source <= buffer.auto_out_a_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    srams.auto_in_a_bits_address <= buffer.auto_out_a_bits_address @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    srams.auto_in_a_bits_mask <= buffer.auto_out_a_bits_mask @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    srams.auto_in_a_bits_data <= buffer.auto_out_a_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    srams.auto_in_a_bits_corrupt <= buffer.auto_out_a_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    srams.auto_in_d_ready <= buffer.auto_out_d_ready @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    xbar.auto_in_a_valid <= serdesser.auto_client_out_a_valid @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    xbar.auto_in_a_bits_opcode <= serdesser.auto_client_out_a_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    xbar.auto_in_a_bits_param <= serdesser.auto_client_out_a_bits_param @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    xbar.auto_in_a_bits_size <= serdesser.auto_client_out_a_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    xbar.auto_in_a_bits_source <= serdesser.auto_client_out_a_bits_source @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    xbar.auto_in_a_bits_address <= serdesser.auto_client_out_a_bits_address @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    xbar.auto_in_a_bits_mask <= serdesser.auto_client_out_a_bits_mask @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    xbar.auto_in_a_bits_data <= serdesser.auto_client_out_a_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    xbar.auto_in_a_bits_corrupt <= serdesser.auto_client_out_a_bits_corrupt @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    xbar.auto_in_d_ready <= serdesser.auto_client_out_d_ready @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393720:4]
    xbar.auto_out_a_ready <= fragmenter.auto_in_a_ready @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    xbar.auto_out_d_valid <= fragmenter.auto_in_d_valid @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    xbar.auto_out_d_bits_opcode <= fragmenter.auto_in_d_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    xbar.auto_out_d_bits_param <= fragmenter.auto_in_d_bits_param @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    xbar.auto_out_d_bits_size <= fragmenter.auto_in_d_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    xbar.auto_out_d_bits_source <= fragmenter.auto_in_d_bits_source @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    xbar.auto_out_d_bits_sink <= fragmenter.auto_in_d_bits_sink @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    xbar.auto_out_d_bits_denied <= fragmenter.auto_in_d_bits_denied @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    xbar.auto_out_d_bits_data <= fragmenter.auto_in_d_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    xbar.auto_out_d_bits_corrupt <= fragmenter.auto_in_d_bits_corrupt @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    buffer.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 393705:4]
    buffer.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 393706:4]
    buffer.auto_in_a_valid <= fragmenter.auto_out_a_valid @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    buffer.auto_in_a_bits_opcode <= fragmenter.auto_out_a_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    buffer.auto_in_a_bits_param <= fragmenter.auto_out_a_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    buffer.auto_in_a_bits_size <= fragmenter.auto_out_a_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    buffer.auto_in_a_bits_source <= fragmenter.auto_out_a_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    buffer.auto_in_a_bits_address <= fragmenter.auto_out_a_bits_address @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    buffer.auto_in_a_bits_mask <= fragmenter.auto_out_a_bits_mask @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    buffer.auto_in_a_bits_data <= fragmenter.auto_out_a_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    buffer.auto_in_a_bits_corrupt <= fragmenter.auto_out_a_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    buffer.auto_in_d_ready <= fragmenter.auto_out_d_ready @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    buffer.auto_out_a_ready <= srams.auto_in_a_ready @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    buffer.auto_out_d_valid <= srams.auto_in_d_valid @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    buffer.auto_out_d_bits_opcode <= srams.auto_in_d_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    buffer.auto_out_d_bits_size <= srams.auto_in_d_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    buffer.auto_out_d_bits_source <= srams.auto_in_d_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    buffer.auto_out_d_bits_data <= srams.auto_in_d_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393722:4]
    fragmenter.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 393711:4]
    fragmenter.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 393712:4]
    fragmenter.auto_in_a_valid <= xbar.auto_out_a_valid @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    fragmenter.auto_in_a_bits_opcode <= xbar.auto_out_a_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    fragmenter.auto_in_a_bits_param <= xbar.auto_out_a_bits_param @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    fragmenter.auto_in_a_bits_size <= xbar.auto_out_a_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    fragmenter.auto_in_a_bits_source <= xbar.auto_out_a_bits_source @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    fragmenter.auto_in_a_bits_address <= xbar.auto_out_a_bits_address @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    fragmenter.auto_in_a_bits_mask <= xbar.auto_out_a_bits_mask @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    fragmenter.auto_in_a_bits_data <= xbar.auto_out_a_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    fragmenter.auto_in_a_bits_corrupt <= xbar.auto_out_a_bits_corrupt @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    fragmenter.auto_in_d_ready <= xbar.auto_out_d_ready @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393721:4]
    fragmenter.auto_out_a_ready <= buffer.auto_in_a_ready @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    fragmenter.auto_out_d_valid <= buffer.auto_in_d_valid @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    fragmenter.auto_out_d_bits_opcode <= buffer.auto_in_d_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    fragmenter.auto_out_d_bits_param <= buffer.auto_in_d_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    fragmenter.auto_out_d_bits_size <= buffer.auto_in_d_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    fragmenter.auto_out_d_bits_source <= buffer.auto_in_d_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    fragmenter.auto_out_d_bits_sink <= buffer.auto_in_d_bits_sink @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    fragmenter.auto_out_d_bits_denied <= buffer.auto_in_d_bits_denied @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    fragmenter.auto_out_d_bits_data <= buffer.auto_in_d_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    fragmenter.auto_out_d_bits_corrupt <= buffer.auto_in_d_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393723:4]
    buffer_1.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 393717:4]
    buffer_1.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 393718:4]
    buffer_1.auto_in_a_valid <= adapter.auto_out_a_valid @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393719:4]
    buffer_1.auto_in_a_bits_opcode <= adapter.auto_out_a_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393719:4]
    buffer_1.auto_in_a_bits_size <= adapter.auto_out_a_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393719:4]
    buffer_1.auto_in_a_bits_address <= adapter.auto_out_a_bits_address @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393719:4]
    buffer_1.auto_in_a_bits_mask <= adapter.auto_out_a_bits_mask @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393719:4]
    buffer_1.auto_in_a_bits_data <= adapter.auto_out_a_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393719:4]
    buffer_1.auto_in_d_ready <= adapter.auto_out_d_ready @[LazyModule.scala 298:16 chipyard.TestHarness.SmallBoomConfig.fir 393719:4]
    buffer_1.auto_out_a_ready <= serdesser.auto_manager_in_a_ready @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    buffer_1.auto_out_d_valid <= serdesser.auto_manager_in_d_valid @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    buffer_1.auto_out_d_bits_opcode <= serdesser.auto_manager_in_d_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    buffer_1.auto_out_d_bits_param <= serdesser.auto_manager_in_d_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    buffer_1.auto_out_d_bits_size <= serdesser.auto_manager_in_d_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    buffer_1.auto_out_d_bits_source <= serdesser.auto_manager_in_d_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    buffer_1.auto_out_d_bits_sink <= serdesser.auto_manager_in_d_bits_sink @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    buffer_1.auto_out_d_bits_denied <= serdesser.auto_manager_in_d_bits_denied @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    buffer_1.auto_out_d_bits_data <= serdesser.auto_manager_in_d_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]
    buffer_1.auto_out_d_bits_corrupt <= serdesser.auto_manager_in_d_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.SmallBoomConfig.fir 393724:4]

  extmodule SimSerial : @[chipyard.TestHarness.SmallBoomConfig.fir 393738:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 393739:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393740:4]
    input serial_in_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393741:4]
    output serial_in_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393741:4]
    output serial_in_bits : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 393741:4]
    output serial_out_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393741:4]
    input serial_out_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393741:4]
    input serial_out_bits : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 393741:4]
    output exit : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393742:4]
    defname = SimSerial

  extmodule SimDRAM : @[chipyard.TestHarness.SmallBoomConfig.fir 393747:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 393748:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393749:4]
    output axi_aw_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_aw_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_aw_bits_id : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_aw_bits_addr : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_aw_bits_len : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_aw_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_aw_bits_burst : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_aw_bits_lock : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_aw_bits_cache : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_aw_bits_prot : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_aw_bits_qos : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    output axi_w_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_w_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_w_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_w_bits_strb : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_w_bits_last : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_b_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    output axi_b_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    output axi_b_bits_id : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    output axi_b_bits_resp : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    output axi_ar_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_ar_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_ar_bits_id : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_ar_bits_addr : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_ar_bits_len : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_ar_bits_size : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_ar_bits_burst : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_ar_bits_lock : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_ar_bits_cache : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_ar_bits_prot : UInt<3> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_ar_bits_qos : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    input axi_r_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    output axi_r_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    output axi_r_bits_id : UInt<4> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    output axi_r_bits_data : UInt<64> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    output axi_r_bits_resp : UInt<2> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    output axi_r_bits_last : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393750:4]
    defname = SimDRAM
    parameter LINE_SIZE = 64
    parameter ID_BITS = 4
    parameter ADDR_BITS = 32
    parameter MEM_SIZE = 268435456
    parameter DATA_BITS = 64

  module Queue_48_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 393759:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 393760:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393761:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393762:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393762:4]
    input io_enq_bits : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 393762:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393762:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393762:4]
    output io_deq_bits : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 393762:4]

    mem ram : @[Decoupled.scala 218:16 chipyard.TestHarness.SmallBoomConfig.fir 393764:4]
      data-type => UInt<8>
      depth => 128
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg enq_ptr_value : UInt<7>, clock with :
      reset => (UInt<1>("h0"), enq_ptr_value) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393765:4]
    reg deq_ptr_value : UInt<7>, clock with :
      reset => (UInt<1>("h0"), deq_ptr_value) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393766:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 393767:4]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 223:33 chipyard.TestHarness.SmallBoomConfig.fir 393768:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.SmallBoomConfig.fir 393769:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.SmallBoomConfig.fir 393770:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.SmallBoomConfig.fir 393771:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 393772:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.SmallBoomConfig.fir 393775:4]
    node _value_T = add(enq_ptr_value, UInt<7>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393782:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393783:6]
    node _GEN_5 = mux(do_enq, _value_T_1, enq_ptr_value) @[Decoupled.scala 229:17 chipyard.TestHarness.SmallBoomConfig.fir 393778:4 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 393784:6 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393765:4]
    node _value_T_2 = add(deq_ptr_value, UInt<7>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393788:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393789:6]
    node _GEN_6 = mux(do_deq, _value_T_3, deq_ptr_value) @[Decoupled.scala 233:17 chipyard.TestHarness.SmallBoomConfig.fir 393786:4 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 393790:6 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393766:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.SmallBoomConfig.fir 393792:4]
    node _GEN_7 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.SmallBoomConfig.fir 393793:4 Decoupled.scala 237:16 chipyard.TestHarness.SmallBoomConfig.fir 393794:6 Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 393767:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.SmallBoomConfig.fir 393798:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.SmallBoomConfig.fir 393796:4]
    io_deq_bits <= ram.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.SmallBoomConfig.fir 393801:4]
    enq_ptr_value <= mux(reset, UInt<7>("h0"), _GEN_5) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393765:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393765:4]
    deq_ptr_value <= mux(reset, UInt<7>("h0"), _GEN_6) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393766:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393766:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_7) @[Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 393767:4 Decoupled.scala 221:27 chipyard.TestHarness.SmallBoomConfig.fir 393767:4]
    ram.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram.io_deq_bits_MPORT.addr <= deq_ptr_value
    ram.io_deq_bits_MPORT.clk <= clock
    ram.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram.MPORT.addr <= enq_ptr_value
    ram.MPORT.mask <= UInt<1>("h1")
    ram.MPORT.data <= io_enq_bits
    ram.MPORT.clk <= clock

  extmodule SimUART : @[chipyard.TestHarness.SmallBoomConfig.fir 393859:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 393860:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393861:4]
    input serial_in_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393862:4]
    output serial_in_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393862:4]
    output serial_in_bits : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 393862:4]
    output serial_out_ready : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393862:4]
    input serial_out_valid : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393862:4]
    input serial_out_bits : UInt<8> @[chipyard.TestHarness.SmallBoomConfig.fir 393862:4]
    defname = SimUART
    parameter UARTNO = 0

  module UARTAdapter_inTestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 393867:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 393868:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393869:4]
    input io_uart_txd : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393870:4]
    output io_uart_rxd : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 393870:4]

    inst txfifo of Queue_48_inTestHarness @[UARTAdapter.scala 32:22 chipyard.TestHarness.SmallBoomConfig.fir 393872:4]
    inst rxfifo of Queue_48_inTestHarness @[UARTAdapter.scala 33:22 chipyard.TestHarness.SmallBoomConfig.fir 393875:4]
    inst sim of SimUART @[UARTAdapter.scala 108:19 chipyard.TestHarness.SmallBoomConfig.fir 394024:4]
    reg txState : UInt<2>, clock with :
      reset => (UInt<1>("h0"), txState) @[UARTAdapter.scala 38:24 chipyard.TestHarness.SmallBoomConfig.fir 393878:4]
    reg txData : UInt<8>, clock with :
      reset => (UInt<1>("h0"), txData) @[UARTAdapter.scala 39:19 chipyard.TestHarness.SmallBoomConfig.fir 393879:4]
    node _T = eq(txState, UInt<2>("h2")) @[UARTAdapter.scala 41:49 chipyard.TestHarness.SmallBoomConfig.fir 393880:4]
    node _T_1 = and(_T, txfifo.io_enq_ready) @[UARTAdapter.scala 41:61 chipyard.TestHarness.SmallBoomConfig.fir 393881:4]
    reg txDataIdx : UInt<3>, clock with :
      reset => (UInt<1>("h0"), txDataIdx) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393882:4]
    node wrap_wrap = eq(txDataIdx, UInt<3>("h7")) @[Counter.scala 72:24 chipyard.TestHarness.SmallBoomConfig.fir 393886:6]
    node _wrap_value_T = add(txDataIdx, UInt<3>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393887:6]
    node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393888:6]
    node _GEN_0 = mux(_T_1, _wrap_value_T_1, txDataIdx) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 393885:4 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 393889:6 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393882:4]
    node txDataWrap = and(_T_1, wrap_wrap) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 393885:4 Counter.scala 118:24 chipyard.TestHarness.SmallBoomConfig.fir 393890:6 chipyard.TestHarness.SmallBoomConfig.fir 393884:4]
    node _T_2 = eq(txState, UInt<2>("h1")) @[UARTAdapter.scala 43:51 chipyard.TestHarness.SmallBoomConfig.fir 393892:4]
    node _T_3 = and(_T_2, txfifo.io_enq_ready) @[UARTAdapter.scala 43:63 chipyard.TestHarness.SmallBoomConfig.fir 393893:4]
    reg txBaudCount : UInt<10>, clock with :
      reset => (UInt<1>("h0"), txBaudCount) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393894:4]
    node wrap_wrap_1 = eq(txBaudCount, UInt<10>("h363")) @[Counter.scala 72:24 chipyard.TestHarness.SmallBoomConfig.fir 393898:6]
    node _wrap_value_T_2 = add(txBaudCount, UInt<10>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393899:6]
    node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393900:6]
    node _GEN_2 = mux(wrap_wrap_1, UInt<10>("h0"), _wrap_value_T_3) @[Counter.scala 86:20 chipyard.TestHarness.SmallBoomConfig.fir 393902:6 Counter.scala 86:28 chipyard.TestHarness.SmallBoomConfig.fir 393903:8 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 393901:6]
    node _GEN_3 = mux(_T_3, _GEN_2, txBaudCount) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 393897:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393894:4]
    node txBaudWrap = and(_T_3, wrap_wrap_1) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 393897:4 Counter.scala 118:24 chipyard.TestHarness.SmallBoomConfig.fir 393905:6 chipyard.TestHarness.SmallBoomConfig.fir 393896:4]
    node _T_4 = eq(txState, UInt<2>("h0")) @[UARTAdapter.scala 44:53 chipyard.TestHarness.SmallBoomConfig.fir 393907:4]
    node _T_5 = not(io_uart_txd) @[UARTAdapter.scala 44:80 chipyard.TestHarness.SmallBoomConfig.fir 393908:4]
    node _T_6 = and(_T_4, _T_5) @[UARTAdapter.scala 44:65 chipyard.TestHarness.SmallBoomConfig.fir 393909:4]
    node _T_7 = and(_T_6, txfifo.io_enq_ready) @[UARTAdapter.scala 44:88 chipyard.TestHarness.SmallBoomConfig.fir 393910:4]
    reg txSlackCount : UInt<2>, clock with :
      reset => (UInt<1>("h0"), txSlackCount) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393911:4]
    node wrap_wrap_2 = eq(txSlackCount, UInt<2>("h3")) @[Counter.scala 72:24 chipyard.TestHarness.SmallBoomConfig.fir 393915:6]
    node _wrap_value_T_4 = add(txSlackCount, UInt<2>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393916:6]
    node _wrap_value_T_5 = tail(_wrap_value_T_4, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393917:6]
    node _GEN_5 = mux(_T_7, _wrap_value_T_5, txSlackCount) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 393914:4 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 393918:6 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393911:4]
    node txSlackWrap = and(_T_7, wrap_wrap_2) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 393914:4 Counter.scala 118:24 chipyard.TestHarness.SmallBoomConfig.fir 393919:6 chipyard.TestHarness.SmallBoomConfig.fir 393913:4]
    node _T_8 = eq(UInt<2>("h0"), txState) @[Conditional.scala 37:30 chipyard.TestHarness.SmallBoomConfig.fir 393921:4]
    node _GEN_7 = mux(txSlackWrap, UInt<8>("h0"), txData) @[UARTAdapter.scala 48:25 chipyard.TestHarness.SmallBoomConfig.fir 393923:6 UARTAdapter.scala 49:17 chipyard.TestHarness.SmallBoomConfig.fir 393924:8 UARTAdapter.scala 39:19 chipyard.TestHarness.SmallBoomConfig.fir 393879:4]
    node _GEN_8 = mux(txSlackWrap, UInt<2>("h1"), txState) @[UARTAdapter.scala 48:25 chipyard.TestHarness.SmallBoomConfig.fir 393923:6 UARTAdapter.scala 50:17 chipyard.TestHarness.SmallBoomConfig.fir 393925:8 UARTAdapter.scala 38:24 chipyard.TestHarness.SmallBoomConfig.fir 393878:4]
    node _T_9 = eq(UInt<2>("h1"), txState) @[Conditional.scala 37:30 chipyard.TestHarness.SmallBoomConfig.fir 393929:6]
    node _GEN_9 = mux(txBaudWrap, UInt<2>("h2"), txState) @[UARTAdapter.scala 54:24 chipyard.TestHarness.SmallBoomConfig.fir 393931:8 UARTAdapter.scala 55:17 chipyard.TestHarness.SmallBoomConfig.fir 393932:10 UARTAdapter.scala 38:24 chipyard.TestHarness.SmallBoomConfig.fir 393878:4]
    node _T_10 = eq(UInt<2>("h2"), txState) @[Conditional.scala 37:30 chipyard.TestHarness.SmallBoomConfig.fir 393936:8]
    node _GEN_35 = pad(io_uart_txd, 8) @[UARTAdapter.scala 60:41 chipyard.TestHarness.SmallBoomConfig.fir 393939:12]
    node _txData_T = dshlw(_GEN_35, txDataIdx) @[UARTAdapter.scala 60:41 chipyard.TestHarness.SmallBoomConfig.fir 393939:12]
    node _txData_T_1 = or(txData, _txData_T) @[UARTAdapter.scala 60:26 chipyard.TestHarness.SmallBoomConfig.fir 393940:12]
    node _GEN_10 = mux(txfifo.io_enq_ready, _txData_T_1, txData) @[UARTAdapter.scala 59:34 chipyard.TestHarness.SmallBoomConfig.fir 393938:10 UARTAdapter.scala 60:16 chipyard.TestHarness.SmallBoomConfig.fir 393941:12 UARTAdapter.scala 39:19 chipyard.TestHarness.SmallBoomConfig.fir 393879:4]
    node _txState_T_1 = mux(io_uart_txd, UInt<2>("h0"), UInt<2>("h3")) @[UARTAdapter.scala 63:23 chipyard.TestHarness.SmallBoomConfig.fir 393945:12]
    node _GEN_11 = mux(txfifo.io_enq_ready, UInt<2>("h1"), txState) @[UARTAdapter.scala 64:39 chipyard.TestHarness.SmallBoomConfig.fir 393949:12 UARTAdapter.scala 65:17 chipyard.TestHarness.SmallBoomConfig.fir 393950:14 UARTAdapter.scala 38:24 chipyard.TestHarness.SmallBoomConfig.fir 393878:4]
    node _GEN_12 = mux(txDataWrap, _txState_T_1, _GEN_11) @[UARTAdapter.scala 62:24 chipyard.TestHarness.SmallBoomConfig.fir 393943:10 UARTAdapter.scala 63:17 chipyard.TestHarness.SmallBoomConfig.fir 393946:12]
    node _T_11 = eq(UInt<2>("h3"), txState) @[Conditional.scala 37:30 chipyard.TestHarness.SmallBoomConfig.fir 393954:10]
    node _T_13 = and(io_uart_txd, txfifo.io_enq_ready) @[UARTAdapter.scala 69:32 chipyard.TestHarness.SmallBoomConfig.fir 393957:12]
    node _GEN_13 = mux(_T_13, UInt<2>("h0"), txState) @[UARTAdapter.scala 69:56 chipyard.TestHarness.SmallBoomConfig.fir 393958:12 UARTAdapter.scala 70:17 chipyard.TestHarness.SmallBoomConfig.fir 393959:14 UARTAdapter.scala 38:24 chipyard.TestHarness.SmallBoomConfig.fir 393878:4]
    node _GEN_14 = mux(_T_11, _GEN_13, txState) @[Conditional.scala 39:67 chipyard.TestHarness.SmallBoomConfig.fir 393955:10 UARTAdapter.scala 38:24 chipyard.TestHarness.SmallBoomConfig.fir 393878:4]
    node _GEN_15 = mux(_T_10, _GEN_10, txData) @[Conditional.scala 39:67 chipyard.TestHarness.SmallBoomConfig.fir 393937:8 UARTAdapter.scala 39:19 chipyard.TestHarness.SmallBoomConfig.fir 393879:4]
    node _GEN_16 = mux(_T_10, _GEN_12, _GEN_14) @[Conditional.scala 39:67 chipyard.TestHarness.SmallBoomConfig.fir 393937:8]
    node _GEN_17 = mux(_T_9, _GEN_9, _GEN_16) @[Conditional.scala 39:67 chipyard.TestHarness.SmallBoomConfig.fir 393930:6]
    node _GEN_18 = mux(_T_9, txData, _GEN_15) @[Conditional.scala 39:67 chipyard.TestHarness.SmallBoomConfig.fir 393930:6 UARTAdapter.scala 39:19 chipyard.TestHarness.SmallBoomConfig.fir 393879:4]
    node _GEN_20 = mux(_T_8, _GEN_8, _GEN_17) @[Conditional.scala 40:58 chipyard.TestHarness.SmallBoomConfig.fir 393922:4]
    reg rxState : UInt<2>, clock with :
      reset => (UInt<1>("h0"), rxState) @[UARTAdapter.scala 79:24 chipyard.TestHarness.SmallBoomConfig.fir 393964:4]
    reg rxBaudCount : UInt<10>, clock with :
      reset => (UInt<1>("h0"), rxBaudCount) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393965:4]
    node wrap_wrap_3 = eq(rxBaudCount, UInt<10>("h363")) @[Counter.scala 72:24 chipyard.TestHarness.SmallBoomConfig.fir 393969:6]
    node _wrap_value_T_6 = add(rxBaudCount, UInt<10>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393970:6]
    node _wrap_value_T_7 = tail(_wrap_value_T_6, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393971:6]
    node _GEN_21 = mux(wrap_wrap_3, UInt<10>("h0"), _wrap_value_T_7) @[Counter.scala 86:20 chipyard.TestHarness.SmallBoomConfig.fir 393973:6 Counter.scala 86:28 chipyard.TestHarness.SmallBoomConfig.fir 393974:8 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 393972:6]
    node _GEN_22 = mux(txfifo.io_enq_ready, _GEN_21, rxBaudCount) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 393968:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393965:4]
    node rxBaudWrap = and(txfifo.io_enq_ready, wrap_wrap_3) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 393968:4 Counter.scala 118:24 chipyard.TestHarness.SmallBoomConfig.fir 393976:6 chipyard.TestHarness.SmallBoomConfig.fir 393967:4]
    node _T_14 = eq(rxState, UInt<2>("h2")) @[UARTAdapter.scala 83:49 chipyard.TestHarness.SmallBoomConfig.fir 393978:4]
    node _T_15 = and(_T_14, txfifo.io_enq_ready) @[UARTAdapter.scala 83:61 chipyard.TestHarness.SmallBoomConfig.fir 393979:4]
    node _T_16 = and(_T_15, rxBaudWrap) @[UARTAdapter.scala 83:84 chipyard.TestHarness.SmallBoomConfig.fir 393980:4]
    reg rxDataIdx : UInt<3>, clock with :
      reset => (UInt<1>("h0"), rxDataIdx) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393981:4]
    node wrap_wrap_4 = eq(rxDataIdx, UInt<3>("h7")) @[Counter.scala 72:24 chipyard.TestHarness.SmallBoomConfig.fir 393985:6]
    node _wrap_value_T_8 = add(rxDataIdx, UInt<3>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393986:6]
    node _wrap_value_T_9 = tail(_wrap_value_T_8, 1) @[Counter.scala 76:24 chipyard.TestHarness.SmallBoomConfig.fir 393987:6]
    node _GEN_24 = mux(_T_16, _wrap_value_T_9, rxDataIdx) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 393984:4 Counter.scala 76:15 chipyard.TestHarness.SmallBoomConfig.fir 393988:6 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393981:4]
    node rxDataWrap = and(_T_16, wrap_wrap_4) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 393984:4 Counter.scala 118:24 chipyard.TestHarness.SmallBoomConfig.fir 393989:6 chipyard.TestHarness.SmallBoomConfig.fir 393983:4]
    node _T_17 = eq(UInt<2>("h0"), rxState) @[Conditional.scala 37:30 chipyard.TestHarness.SmallBoomConfig.fir 393992:4]
    node _T_18 = and(rxBaudWrap, rxfifo.io_deq_valid) @[UARTAdapter.scala 89:24 chipyard.TestHarness.SmallBoomConfig.fir 393995:6]
    node _GEN_26 = mux(_T_18, UInt<2>("h1"), rxState) @[UARTAdapter.scala 89:48 chipyard.TestHarness.SmallBoomConfig.fir 393996:6 UARTAdapter.scala 90:17 chipyard.TestHarness.SmallBoomConfig.fir 393997:8 UARTAdapter.scala 79:24 chipyard.TestHarness.SmallBoomConfig.fir 393964:4]
    node _T_19 = eq(UInt<2>("h1"), rxState) @[Conditional.scala 37:30 chipyard.TestHarness.SmallBoomConfig.fir 394001:6]
    node _GEN_27 = mux(rxBaudWrap, UInt<2>("h2"), rxState) @[UARTAdapter.scala 95:24 chipyard.TestHarness.SmallBoomConfig.fir 394004:8 UARTAdapter.scala 96:17 chipyard.TestHarness.SmallBoomConfig.fir 394005:10 UARTAdapter.scala 79:24 chipyard.TestHarness.SmallBoomConfig.fir 393964:4]
    node _T_20 = eq(UInt<2>("h2"), rxState) @[Conditional.scala 37:30 chipyard.TestHarness.SmallBoomConfig.fir 394009:8]
    node _io_uart_rxd_T = dshr(rxfifo.io_deq_bits, rxDataIdx) @[UARTAdapter.scala 100:42 chipyard.TestHarness.SmallBoomConfig.fir 394011:10]
    node _io_uart_rxd_T_1 = bits(_io_uart_rxd_T, 0, 0) @[UARTAdapter.scala 100:55 chipyard.TestHarness.SmallBoomConfig.fir 394012:10]
    node _T_21 = and(rxDataWrap, rxBaudWrap) @[UARTAdapter.scala 101:23 chipyard.TestHarness.SmallBoomConfig.fir 394014:10]
    node _GEN_28 = mux(_T_21, UInt<2>("h0"), rxState) @[UARTAdapter.scala 101:38 chipyard.TestHarness.SmallBoomConfig.fir 394015:10 UARTAdapter.scala 102:17 chipyard.TestHarness.SmallBoomConfig.fir 394016:12 UARTAdapter.scala 79:24 chipyard.TestHarness.SmallBoomConfig.fir 393964:4]
    node _GEN_29 = mux(_T_20, _io_uart_rxd_T_1, UInt<1>("h1")) @[Conditional.scala 39:67 chipyard.TestHarness.SmallBoomConfig.fir 394010:8 UARTAdapter.scala 100:19 chipyard.TestHarness.SmallBoomConfig.fir 394013:10 UARTAdapter.scala 85:15 chipyard.TestHarness.SmallBoomConfig.fir 393991:4]
    node _GEN_30 = mux(_T_20, _GEN_28, rxState) @[Conditional.scala 39:67 chipyard.TestHarness.SmallBoomConfig.fir 394010:8 UARTAdapter.scala 79:24 chipyard.TestHarness.SmallBoomConfig.fir 393964:4]
    node _GEN_31 = mux(_T_19, UInt<1>("h0"), _GEN_29) @[Conditional.scala 39:67 chipyard.TestHarness.SmallBoomConfig.fir 394002:6 UARTAdapter.scala 94:19 chipyard.TestHarness.SmallBoomConfig.fir 394003:8]
    node _GEN_32 = mux(_T_19, _GEN_27, _GEN_30) @[Conditional.scala 39:67 chipyard.TestHarness.SmallBoomConfig.fir 394002:6]
    node _GEN_34 = mux(_T_17, _GEN_26, _GEN_32) @[Conditional.scala 40:58 chipyard.TestHarness.SmallBoomConfig.fir 393993:4]
    node _rxfifo_io_deq_ready_T_1 = and(_T_14, rxDataWrap) @[UARTAdapter.scala 106:48 chipyard.TestHarness.SmallBoomConfig.fir 394020:4]
    node _rxfifo_io_deq_ready_T_2 = and(_rxfifo_io_deq_ready_T_1, rxBaudWrap) @[UARTAdapter.scala 106:62 chipyard.TestHarness.SmallBoomConfig.fir 394021:4]
    io_uart_rxd <= or(_T_17, _GEN_31) @[Conditional.scala 40:58 chipyard.TestHarness.SmallBoomConfig.fir 393993:4 UARTAdapter.scala 88:19 chipyard.TestHarness.SmallBoomConfig.fir 393994:6]
    txfifo.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 393873:4]
    txfifo.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 393874:4]
    txfifo.io_enq_valid <= and(_T_1, wrap_wrap) @[Counter.scala 118:17 chipyard.TestHarness.SmallBoomConfig.fir 393885:4 Counter.scala 118:24 chipyard.TestHarness.SmallBoomConfig.fir 393890:6 chipyard.TestHarness.SmallBoomConfig.fir 393884:4]
    txfifo.io_enq_bits <= txData @[UARTAdapter.scala 75:23 chipyard.TestHarness.SmallBoomConfig.fir 393962:4]
    txfifo.io_deq_ready <= sim.serial_out_ready @[UARTAdapter.scala 115:23 chipyard.TestHarness.SmallBoomConfig.fir 394033:4]
    rxfifo.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 393876:4]
    rxfifo.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 393877:4]
    rxfifo.io_enq_valid <= sim.serial_in_valid @[UARTAdapter.scala 118:23 chipyard.TestHarness.SmallBoomConfig.fir 394035:4]
    rxfifo.io_enq_bits <= sim.serial_in_bits @[UARTAdapter.scala 117:22 chipyard.TestHarness.SmallBoomConfig.fir 394034:4]
    rxfifo.io_deq_ready <= and(_rxfifo_io_deq_ready_T_2, txfifo.io_enq_ready) @[UARTAdapter.scala 106:76 chipyard.TestHarness.SmallBoomConfig.fir 394022:4]
    txState <= mux(reset, UInt<2>("h0"), _GEN_20) @[UARTAdapter.scala 38:24 chipyard.TestHarness.SmallBoomConfig.fir 393878:4 UARTAdapter.scala 38:24 chipyard.TestHarness.SmallBoomConfig.fir 393878:4]
    txData <= mux(_T_8, _GEN_7, _GEN_18) @[Conditional.scala 40:58 chipyard.TestHarness.SmallBoomConfig.fir 393922:4]
    txDataIdx <= mux(reset, UInt<3>("h0"), _GEN_0) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393882:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393882:4]
    txBaudCount <= mux(reset, UInt<10>("h0"), _GEN_3) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393894:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393894:4]
    txSlackCount <= mux(reset, UInt<2>("h0"), _GEN_5) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393911:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393911:4]
    rxState <= mux(reset, UInt<2>("h0"), _GEN_34) @[UARTAdapter.scala 79:24 chipyard.TestHarness.SmallBoomConfig.fir 393964:4 UARTAdapter.scala 79:24 chipyard.TestHarness.SmallBoomConfig.fir 393964:4]
    rxBaudCount <= mux(reset, UInt<10>("h0"), _GEN_22) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393965:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393965:4]
    rxDataIdx <= mux(reset, UInt<3>("h0"), _GEN_24) @[Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393981:4 Counter.scala 60:40 chipyard.TestHarness.SmallBoomConfig.fir 393981:4]
    sim.clock <= clock @[UARTAdapter.scala 110:16 chipyard.TestHarness.SmallBoomConfig.fir 394028:4]
    sim.reset <= reset @[UARTAdapter.scala 111:25 chipyard.TestHarness.SmallBoomConfig.fir 394029:4]
    sim.serial_in_ready <= rxfifo.io_enq_ready @[UARTAdapter.scala 119:26 chipyard.TestHarness.SmallBoomConfig.fir 394036:4]
    sim.serial_out_valid <= txfifo.io_deq_valid @[UARTAdapter.scala 114:27 chipyard.TestHarness.SmallBoomConfig.fir 394032:4]
    sim.serial_out_bits <= txfifo.io_deq_bits @[UARTAdapter.scala 113:26 chipyard.TestHarness.SmallBoomConfig.fir 394031:4]

  module TestHarness : @[chipyard.TestHarness.SmallBoomConfig.fir 394038:2]
    input clock : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 394039:4]
    input reset : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 394040:4]
    output io_success : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 394041:4]

    inst chiptop of ChipTop @[TestHarness.scala 34:19 chipyard.TestHarness.SmallBoomConfig.fir 394043:4]
    inst SimJTAG of SimJTAG @[HarnessBinders.scala 190:26 chipyard.TestHarness.SmallBoomConfig.fir 394055:4]
    inst plusarg_reader of plusarg_reader_107 @[PlusArg.scala 80:11 chipyard.TestHarness.SmallBoomConfig.fir 394072:4]
    inst ram of SerialRAM_inTestHarness @[SerialAdapter.scala 27:26 chipyard.TestHarness.SmallBoomConfig.fir 394092:4]
    inst success_sim of SimSerial @[SerialAdapter.scala 37:23 chipyard.TestHarness.SmallBoomConfig.fir 394102:4]
    inst simdram of SimDRAM @[HarnessBinders.scala 146:23 chipyard.TestHarness.SmallBoomConfig.fir 394118:4]
    inst uart_sim_0 of UARTAdapter_inTestHarness @[UARTAdapter.scala 132:28 chipyard.TestHarness.SmallBoomConfig.fir 394125:4]
    node dtm_success = eq(SimJTAG.exit, UInt<32>("h1")) @[Periphery.scala 233:26 chipyard.TestHarness.SmallBoomConfig.fir 394076:4]
    node _T_2 = not(reset) @[HarnessBinders.scala 190:105 chipyard.TestHarness.SmallBoomConfig.fir 394064:4]
    node _T_3 = geq(SimJTAG.exit, UInt<32>("h2")) @[Periphery.scala 234:19 chipyard.TestHarness.SmallBoomConfig.fir 394078:4]
    node _GEN_2 = shr(SimJTAG.exit, 1) @[Periphery.scala 235:59 chipyard.TestHarness.SmallBoomConfig.fir 394080:6]
    node _T_4 = pad(_GEN_2, 32) @[Periphery.scala 235:59 chipyard.TestHarness.SmallBoomConfig.fir 394080:6]
    io_success <= or(success_sim.exit, dtm_success) @[HarnessBinders.scala 236:22 chipyard.TestHarness.SmallBoomConfig.fir 394115:4 HarnessBinders.scala 236:35 chipyard.TestHarness.SmallBoomConfig.fir 394116:6]
    chiptop.jtag_TCK <= SimJTAG.jtag_TCK @[Periphery.scala 220:15 chipyard.TestHarness.SmallBoomConfig.fir 394065:4]
    chiptop.jtag_TMS <= SimJTAG.jtag_TMS @[Periphery.scala 221:15 chipyard.TestHarness.SmallBoomConfig.fir 394066:4]
    chiptop.jtag_TDI <= SimJTAG.jtag_TDI @[Periphery.scala 222:15 chipyard.TestHarness.SmallBoomConfig.fir 394067:4]
    chiptop.serial_tl_bits_in_valid <= ram.io_ser_in_valid @[SerialAdapter.scala 28:21 chipyard.TestHarness.SmallBoomConfig.fir 394099:4]
    chiptop.serial_tl_bits_in_bits <= ram.io_ser_in_bits @[SerialAdapter.scala 28:21 chipyard.TestHarness.SmallBoomConfig.fir 394098:4]
    chiptop.serial_tl_bits_out_ready <= ram.io_ser_out_ready @[SerialAdapter.scala 28:21 chipyard.TestHarness.SmallBoomConfig.fir 394097:4]
    chiptop.axi4_mem_0_bits_aw_ready <= simdram.axi_aw_ready @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    chiptop.axi4_mem_0_bits_w_ready <= simdram.axi_w_ready @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    chiptop.axi4_mem_0_bits_b_valid <= simdram.axi_b_valid @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    chiptop.axi4_mem_0_bits_b_bits_id <= simdram.axi_b_bits_id @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    chiptop.axi4_mem_0_bits_b_bits_resp <= simdram.axi_b_bits_resp @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    chiptop.axi4_mem_0_bits_ar_ready <= simdram.axi_ar_ready @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    chiptop.axi4_mem_0_bits_r_valid <= simdram.axi_r_valid @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    chiptop.axi4_mem_0_bits_r_bits_id <= simdram.axi_r_bits_id @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    chiptop.axi4_mem_0_bits_r_bits_data <= simdram.axi_r_bits_data @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    chiptop.axi4_mem_0_bits_r_bits_resp <= simdram.axi_r_bits_resp @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    chiptop.axi4_mem_0_bits_r_bits_last <= simdram.axi_r_bits_last @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    chiptop.uart_0_rxd <= uart_sim_0.io_uart_rxd @[UARTAdapter.scala 135:18 chipyard.TestHarness.SmallBoomConfig.fir 394129:4]
    chiptop.reset_wire_reset <= asAsyncReset(reset) @[TestHarness.scala 41:24 chipyard.TestHarness.SmallBoomConfig.fir 394047:4]
    chiptop.clock <= clock @[Clocks.scala 106:18 chipyard.TestHarness.SmallBoomConfig.fir 394049:4]
    SimJTAG.clock <= clock @[Periphery.scala 225:14 chipyard.TestHarness.SmallBoomConfig.fir 394070:4]
    SimJTAG.reset <= reset @[HarnessBinders.scala 190:97 chipyard.TestHarness.SmallBoomConfig.fir 394062:4]
    SimJTAG.jtag_TDO_data <= chiptop.jtag_TDO_data @[Periphery.scala 223:17 chipyard.TestHarness.SmallBoomConfig.fir 394069:4]
    SimJTAG.jtag_TDO_driven <= chiptop.jtag_TDO_driven @[Periphery.scala 223:17 chipyard.TestHarness.SmallBoomConfig.fir 394068:4]
    SimJTAG.enable <= bits(plusarg_reader.out, 0, 0) @[Periphery.scala 228:18 chipyard.TestHarness.SmallBoomConfig.fir 394074:4]
    SimJTAG.init_done <= not(reset) @[HarnessBinders.scala 190:105 chipyard.TestHarness.SmallBoomConfig.fir 394064:4]
    ram.clock <= chiptop.serial_tl_clock @[chipyard.TestHarness.SmallBoomConfig.fir 394093:4]
    ram.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 394045:4 chipyard.TestHarness.SmallBoomConfig.fir 394046:4]
    ram.io_ser_in_ready <= chiptop.serial_tl_bits_in_ready @[SerialAdapter.scala 28:21 chipyard.TestHarness.SmallBoomConfig.fir 394100:4]
    ram.io_ser_out_valid <= chiptop.serial_tl_bits_out_valid @[SerialAdapter.scala 28:21 chipyard.TestHarness.SmallBoomConfig.fir 394096:4]
    ram.io_ser_out_bits <= chiptop.serial_tl_bits_out_bits @[SerialAdapter.scala 28:21 chipyard.TestHarness.SmallBoomConfig.fir 394095:4]
    ram.io_tsi_ser_in_valid <= success_sim.serial_in_valid @[SerialAdapter.scala 40:21 chipyard.TestHarness.SmallBoomConfig.fir 394113:4]
    ram.io_tsi_ser_in_bits <= success_sim.serial_in_bits @[SerialAdapter.scala 40:21 chipyard.TestHarness.SmallBoomConfig.fir 394112:4]
    ram.io_tsi_ser_out_ready <= success_sim.serial_out_ready @[SerialAdapter.scala 40:21 chipyard.TestHarness.SmallBoomConfig.fir 394111:4]
    success_sim.clock <= chiptop.serial_tl_clock @[SerialAdapter.scala 38:20 chipyard.TestHarness.SmallBoomConfig.fir 394107:4]
    success_sim.reset <= reset @[HarnessBinders.scala 235:103 chipyard.TestHarness.SmallBoomConfig.fir 394101:4]
    success_sim.serial_in_ready <= ram.io_tsi_ser_in_ready @[SerialAdapter.scala 40:21 chipyard.TestHarness.SmallBoomConfig.fir 394114:4]
    success_sim.serial_out_valid <= ram.io_tsi_ser_out_valid @[SerialAdapter.scala 40:21 chipyard.TestHarness.SmallBoomConfig.fir 394110:4]
    success_sim.serial_out_bits <= ram.io_tsi_ser_out_bits @[SerialAdapter.scala 40:21 chipyard.TestHarness.SmallBoomConfig.fir 394109:4]
    simdram.clock <= chiptop.axi4_mem_0_clock @[HarnessBinders.scala 148:20 chipyard.TestHarness.SmallBoomConfig.fir 394123:4]
    simdram.reset <= chiptop.axi4_mem_0_reset @[HarnessBinders.scala 149:20 chipyard.TestHarness.SmallBoomConfig.fir 394124:4]
    simdram.axi_aw_valid <= chiptop.axi4_mem_0_bits_aw_valid @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_aw_bits_id <= chiptop.axi4_mem_0_bits_aw_bits_id @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_aw_bits_addr <= chiptop.axi4_mem_0_bits_aw_bits_addr @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_aw_bits_len <= chiptop.axi4_mem_0_bits_aw_bits_len @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_aw_bits_size <= chiptop.axi4_mem_0_bits_aw_bits_size @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_aw_bits_burst <= chiptop.axi4_mem_0_bits_aw_bits_burst @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_aw_bits_lock <= chiptop.axi4_mem_0_bits_aw_bits_lock @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_aw_bits_cache <= chiptop.axi4_mem_0_bits_aw_bits_cache @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_aw_bits_prot <= chiptop.axi4_mem_0_bits_aw_bits_prot @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_aw_bits_qos <= chiptop.axi4_mem_0_bits_aw_bits_qos @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_w_valid <= chiptop.axi4_mem_0_bits_w_valid @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_w_bits_data <= chiptop.axi4_mem_0_bits_w_bits_data @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_w_bits_strb <= chiptop.axi4_mem_0_bits_w_bits_strb @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_w_bits_last <= chiptop.axi4_mem_0_bits_w_bits_last @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_b_ready <= chiptop.axi4_mem_0_bits_b_ready @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_ar_valid <= chiptop.axi4_mem_0_bits_ar_valid @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_ar_bits_id <= chiptop.axi4_mem_0_bits_ar_bits_id @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_ar_bits_addr <= chiptop.axi4_mem_0_bits_ar_bits_addr @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_ar_bits_len <= chiptop.axi4_mem_0_bits_ar_bits_len @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_ar_bits_size <= chiptop.axi4_mem_0_bits_ar_bits_size @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_ar_bits_burst <= chiptop.axi4_mem_0_bits_ar_bits_burst @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_ar_bits_lock <= chiptop.axi4_mem_0_bits_ar_bits_lock @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_ar_bits_cache <= chiptop.axi4_mem_0_bits_ar_bits_cache @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_ar_bits_prot <= chiptop.axi4_mem_0_bits_ar_bits_prot @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_ar_bits_qos <= chiptop.axi4_mem_0_bits_ar_bits_qos @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    simdram.axi_r_ready <= chiptop.axi4_mem_0_bits_r_ready @[HarnessBinders.scala 147:18 chipyard.TestHarness.SmallBoomConfig.fir 394122:4]
    uart_sim_0.clock <= clock @[chipyard.TestHarness.SmallBoomConfig.fir 394126:4]
    uart_sim_0.reset <= reset @[chipyard.TestHarness.SmallBoomConfig.fir 394127:4]
    uart_sim_0.io_uart_txd <= chiptop.uart_0_txd @[UARTAdapter.scala 134:28 chipyard.TestHarness.SmallBoomConfig.fir 394128:4]
    printf(clock, and(_T_3, _T_2), "*** FAILED *** (exit code = %d)\n", _T_4) @[Periphery.scala 235:13 chipyard.TestHarness.SmallBoomConfig.fir 394084:8]
    stop(clock, and(_T_3, _T_2), 1) @[Periphery.scala 236:11 chipyard.TestHarness.SmallBoomConfig.fir 394089:8]

  extmodule plusarg_reader : @[chipyard.TestHarness.SmallBoomConfig.fir 134:2]
    output out : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 135:4]
    defname = plusarg_reader
    parameter FORMAT = "tilelink_timeout=%d"
    parameter DEFAULT = 0
    parameter WIDTH = 32

  extmodule plusarg_reader_104 : @[chipyard.TestHarness.SmallBoomConfig.fir 373902:2]
    output out : UInt<32> @[chipyard.TestHarness.SmallBoomConfig.fir 373903:4]
    defname = plusarg_reader
    parameter FORMAT = "uart_tx=%d"
    parameter DEFAULT = 1
    parameter WIDTH = 32

  extmodule ClockDividerN : @[chipyard.TestHarness.SmallBoomConfig.fir 379836:2]
    output clk_out : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 379837:4]
    input clk_in : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 379838:4]
    defname = ClockDividerN
    parameter DIV = 1

  extmodule EICG_wrapper : @[chipyard.TestHarness.SmallBoomConfig.fir 379936:2]
    input in : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 379937:4]
    input test_en : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 379938:4]
    input en : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 379939:4]
    output out : Clock @[chipyard.TestHarness.SmallBoomConfig.fir 379940:4]
    defname = EICG_wrapper

  extmodule GenericDigitalOutIOCell : @[chipyard.TestHarness.SmallBoomConfig.fir 379945:2]
    output pad : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 379946:4]
    input o : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 379947:4]
    input oe : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 379948:4]
    defname = GenericDigitalOutIOCell

  extmodule GenericDigitalInIOCell : @[chipyard.TestHarness.SmallBoomConfig.fir 379961:2]
    input pad : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 379962:4]
    output i : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 379963:4]
    input ie : UInt<1> @[chipyard.TestHarness.SmallBoomConfig.fir 379964:4]
    defname = GenericDigitalInIOCell

  extmodule cc_dir_ext :
    input RW0_addr : UInt<10>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<136>
    output RW0_rdata : UInt<136>
    input RW0_wmask : UInt<8>
    defname = cc_dir_ext

  extmodule cc_banks_0_ext :
    input RW0_addr : UInt<14>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<64>
    output RW0_rdata : UInt<64>
    defname = cc_banks_0_ext

  extmodule tag_array_ext :
    input RW0_addr : UInt<6>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<88>
    output RW0_rdata : UInt<88>
    input RW0_wmask : UInt<4>
    defname = tag_array_ext

  extmodule array_0_0_ext :
    input R0_addr : UInt<9>
    input R0_en : UInt<1>
    input R0_clk : Clock
    output R0_data : UInt<64>
    input W0_addr : UInt<9>
    input W0_en : UInt<1>
    input W0_clk : Clock
    input W0_data : UInt<64>
    input W0_mask : UInt<1>
    defname = array_0_0_ext

  extmodule tag_array_0_ext :
    input RW0_addr : UInt<6>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<80>
    output RW0_rdata : UInt<80>
    input RW0_wmask : UInt<4>
    defname = tag_array_0_ext

  extmodule dataArrayWay_0_ext :
    input RW0_addr : UInt<9>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<64>
    output RW0_rdata : UInt<64>
    defname = dataArrayWay_0_ext

  extmodule hi_us_ext :
    input R0_addr : UInt<7>
    input R0_en : UInt<1>
    input R0_clk : Clock
    output R0_data : UInt<4>
    input W0_addr : UInt<7>
    input W0_en : UInt<1>
    input W0_clk : Clock
    input W0_data : UInt<4>
    input W0_mask : UInt<4>
    defname = hi_us_ext

  extmodule table_ext :
    input R0_addr : UInt<7>
    input R0_en : UInt<1>
    input R0_clk : Clock
    output R0_data : UInt<44>
    input W0_addr : UInt<7>
    input W0_en : UInt<1>
    input W0_clk : Clock
    input W0_data : UInt<44>
    input W0_mask : UInt<4>
    defname = table_ext

  extmodule hi_us_0_ext :
    input R0_addr : UInt<8>
    input R0_en : UInt<1>
    input R0_clk : Clock
    output R0_data : UInt<4>
    input W0_addr : UInt<8>
    input W0_en : UInt<1>
    input W0_clk : Clock
    input W0_data : UInt<4>
    input W0_mask : UInt<4>
    defname = hi_us_0_ext

  extmodule table_0_ext :
    input R0_addr : UInt<8>
    input R0_en : UInt<1>
    input R0_clk : Clock
    output R0_data : UInt<48>
    input W0_addr : UInt<8>
    input W0_en : UInt<1>
    input W0_clk : Clock
    input W0_data : UInt<48>
    input W0_mask : UInt<4>
    defname = table_0_ext

  extmodule table_1_ext :
    input R0_addr : UInt<7>
    input R0_en : UInt<1>
    input R0_clk : Clock
    output R0_data : UInt<52>
    input W0_addr : UInt<7>
    input W0_en : UInt<1>
    input W0_clk : Clock
    input W0_data : UInt<52>
    input W0_mask : UInt<4>
    defname = table_1_ext

  extmodule meta_0_ext :
    input R0_addr : UInt<7>
    input R0_en : UInt<1>
    input R0_clk : Clock
    output R0_data : UInt<124>
    input W0_addr : UInt<7>
    input W0_en : UInt<1>
    input W0_clk : Clock
    input W0_data : UInt<124>
    input W0_mask : UInt<4>
    defname = meta_0_ext

  extmodule btb_0_ext :
    input R0_addr : UInt<7>
    input R0_en : UInt<1>
    input R0_clk : Clock
    output R0_data : UInt<56>
    input W0_addr : UInt<7>
    input W0_en : UInt<1>
    input W0_clk : Clock
    input W0_data : UInt<56>
    input W0_mask : UInt<4>
    defname = btb_0_ext

  extmodule ebtb_ext :
    input R0_addr : UInt<7>
    input R0_en : UInt<1>
    input R0_clk : Clock
    output R0_data : UInt<40>
    input W0_addr : UInt<7>
    input W0_en : UInt<1>
    input W0_clk : Clock
    input W0_data : UInt<40>
    defname = ebtb_ext

  extmodule data_ext :
    input R0_addr : UInt<11>
    input R0_en : UInt<1>
    input R0_clk : Clock
    output R0_data : UInt<8>
    input W0_addr : UInt<11>
    input W0_en : UInt<1>
    input W0_clk : Clock
    input W0_data : UInt<8>
    input W0_mask : UInt<4>
    defname = data_ext

  extmodule meta_ext :
    input R0_addr : UInt<4>
    input R0_en : UInt<1>
    input R0_clk : Clock
    output R0_data : UInt<120>
    input W0_addr : UInt<4>
    input W0_en : UInt<1>
    input W0_clk : Clock
    input W0_data : UInt<120>
    defname = meta_ext

  extmodule ghist_0_ext :
    input R0_addr : UInt<4>
    input R0_en : UInt<1>
    input R0_clk : Clock
    output R0_data : UInt<72>
    input W0_addr : UInt<4>
    input W0_en : UInt<1>
    input W0_clk : Clock
    input W0_data : UInt<72>
    defname = ghist_0_ext

  extmodule rob_debug_inst_mem_ext :
    input R0_addr : UInt<5>
    input R0_en : UInt<1>
    input R0_clk : Clock
    output R0_data : UInt<32>
    input W0_addr : UInt<5>
    input W0_en : UInt<1>
    input W0_clk : Clock
    input W0_data : UInt<32>
    input W0_mask : UInt<1>
    defname = rob_debug_inst_mem_ext

  extmodule l2_tlb_ram_ext :
    input RW0_addr : UInt<9>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<45>
    output RW0_rdata : UInt<45>
    defname = l2_tlb_ram_ext

  extmodule mem_ext :
    input RW0_addr : UInt<9>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<64>
    output RW0_rdata : UInt<64>
    input RW0_wmask : UInt<8>
    defname = mem_ext

  module mem_inTestHarness :
    input RW0_addr : UInt<9>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata_0 : UInt<8>
    input RW0_wdata_1 : UInt<8>
    input RW0_wdata_2 : UInt<8>
    input RW0_wdata_3 : UInt<8>
    input RW0_wdata_4 : UInt<8>
    input RW0_wdata_5 : UInt<8>
    input RW0_wdata_6 : UInt<8>
    input RW0_wdata_7 : UInt<8>
    output RW0_rdata_0 : UInt<8>
    output RW0_rdata_1 : UInt<8>
    output RW0_rdata_2 : UInt<8>
    output RW0_rdata_3 : UInt<8>
    output RW0_rdata_4 : UInt<8>
    output RW0_rdata_5 : UInt<8>
    output RW0_rdata_6 : UInt<8>
    output RW0_rdata_7 : UInt<8>
    input RW0_wmask_0 : UInt<1>
    input RW0_wmask_1 : UInt<1>
    input RW0_wmask_2 : UInt<1>
    input RW0_wmask_3 : UInt<1>
    input RW0_wmask_4 : UInt<1>
    input RW0_wmask_5 : UInt<1>
    input RW0_wmask_6 : UInt<1>
    input RW0_wmask_7 : UInt<1>

    inst mem_ext of mem_ext
    mem_ext.RW0_clk <= RW0_clk
    mem_ext.RW0_en <= RW0_en
    mem_ext.RW0_addr <= RW0_addr
    RW0_rdata_0 <= bits(mem_ext.RW0_rdata, 7, 0)
    RW0_rdata_1 <= bits(mem_ext.RW0_rdata, 15, 8)
    RW0_rdata_2 <= bits(mem_ext.RW0_rdata, 23, 16)
    RW0_rdata_3 <= bits(mem_ext.RW0_rdata, 31, 24)
    RW0_rdata_4 <= bits(mem_ext.RW0_rdata, 39, 32)
    RW0_rdata_5 <= bits(mem_ext.RW0_rdata, 47, 40)
    RW0_rdata_6 <= bits(mem_ext.RW0_rdata, 55, 48)
    RW0_rdata_7 <= bits(mem_ext.RW0_rdata, 63, 56)
    mem_ext.RW0_wmode <= RW0_wmode
    node _GEN_4 = cat(cat(RW0_wdata_7, RW0_wdata_6), cat(RW0_wdata_5, RW0_wdata_4))
    node _GEN_5 = cat(cat(RW0_wdata_3, RW0_wdata_2), cat(RW0_wdata_1, RW0_wdata_0))
    mem_ext.RW0_wdata <= cat(_GEN_4, _GEN_5)
    node _GEN_10 = cat(cat(RW0_wmask_7, RW0_wmask_6), cat(RW0_wmask_5, RW0_wmask_4))
    node _GEN_11 = cat(cat(RW0_wmask_3, RW0_wmask_2), cat(RW0_wmask_1, RW0_wmask_0))
    mem_ext.RW0_wmask <= cat(_GEN_10, _GEN_11)
